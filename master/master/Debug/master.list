
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002830  08006a98  08006a98  00016a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a8  20000000  080092d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005ec8  200001a8  08009478  000201a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20006070  08009478  00026070  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f7bd  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d46  00000000  00000000  0002f98e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b90  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a60  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000059e7  00000000  00000000  00033cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f59  00000000  00000000  000396af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d608  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002fdc  00000000  00000000  0003d684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001a8 	.word	0x200001a8
 800020c:	00000000 	.word	0x00000000
 8000210:	08006a80 	.word	0x08006a80

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001ac 	.word	0x200001ac
 800022c:	08006a80 	.word	0x08006a80

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	bf14      	ite	ne
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e720      	b.n	8000374 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aedc 	beq.w	8000322 <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6c1      	b.n	8000322 <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	230f      	movs	r3, #15
 8000b52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	78db      	ldrb	r3, [r3, #3]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d03a      	beq.n	8000bd2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <NVIC_Init+0xbc>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f1c3 0304 	rsb	r3, r3, #4
 8000b70:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	461a      	mov	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	789b      	ldrb	r3, [r3, #2]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4013      	ands	r3, r2
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000ba0:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <NVIC_Init+0xc0>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	6979      	ldr	r1, [r7, #20]
 8000ba8:	b2c9      	uxtb	r1, r1
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <NVIC_Init+0xc0>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	095b      	lsrs	r3, r3, #5
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bcc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bd0:	e00f      	b.n	8000bf2 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bd2:	490b      	ldr	r1, [pc, #44]	; (8000c00 <NVIC_Init+0xc0>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	2201      	movs	r2, #1
 8000be8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bea:	f100 0320 	add.w	r3, r0, #32
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <CAN_Init>:
  *                         CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 0202 	bic.w	r2, r3, #2
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c2e:	e002      	b.n	8000c36 <CAN_Init+0x32>
  {
    wait_ack++;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d004      	beq.n	8000c4c <CAN_Init+0x48>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d1f1      	bne.n	8000c30 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d002      	beq.n	8000c5e <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e09c      	b.n	8000d98 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	799b      	ldrb	r3, [r3, #6]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d106      	bne.n	8000c74 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e005      	b.n	8000c80 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	79db      	ldrb	r3, [r3, #7]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d106      	bne.n	8000c96 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e005      	b.n	8000ca2 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	7a1b      	ldrb	r3, [r3, #8]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d106      	bne.n	8000cb8 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f043 0220 	orr.w	r2, r3, #32
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e005      	b.n	8000cc4 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f023 0220 	bic.w	r2, r3, #32
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	7a5b      	ldrb	r3, [r3, #9]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d106      	bne.n	8000cda <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f043 0210 	orr.w	r2, r3, #16
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e005      	b.n	8000ce6 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 0210 	bic.w	r2, r3, #16
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	7a9b      	ldrb	r3, [r3, #10]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d106      	bne.n	8000cfc <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f043 0208 	orr.w	r2, r3, #8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e005      	b.n	8000d08 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 0208 	bic.w	r2, r3, #8
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	7adb      	ldrb	r3, [r3, #11]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d106      	bne.n	8000d1e <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f043 0204 	orr.w	r2, r3, #4
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e005      	b.n	8000d2a <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 0204 	bic.w	r2, r3, #4
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	789b      	ldrb	r3, [r3, #2]
 8000d2e:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000d36:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000d3e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	795b      	ldrb	r3, [r3, #5]
 8000d44:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000d46:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000d4e:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 0201 	bic.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000d64:	e002      	b.n	8000d6c <CAN_Init+0x168>
   {
     wait_ack++;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d104      	bne.n	8000d82 <CAN_Init+0x17e>
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d1f1      	bne.n	8000d66 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <CAN_FilterInit>:
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7a9b      	ldrb	r3, [r3, #10]
 8000db4:	461a      	mov	r2, r3
 8000db6:	2301      	movs	r3, #1
 8000db8:	4093      	lsls	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000dbc:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <CAN_FilterInit+0x170>)
 8000dbe:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <CAN_FilterInit+0x170>)
 8000dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000dcc:	4951      	ldr	r1, [pc, #324]	; (8000f14 <CAN_FilterInit+0x170>)
 8000dce:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <CAN_FilterInit+0x170>)
 8000dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b1b      	ldrb	r3, [r3, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d125      	bne.n	8000e32 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000de6:	494b      	ldr	r1, [pc, #300]	; (8000f14 <CAN_FilterInit+0x170>)
 8000de8:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <CAN_FilterInit+0x170>)
 8000dea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4013      	ands	r3, r2
 8000df4:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000df8:	4946      	ldr	r1, [pc, #280]	; (8000f14 <CAN_FilterInit+0x170>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7a9b      	ldrb	r3, [r3, #10]
 8000dfe:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	88db      	ldrh	r3, [r3, #6]
 8000e04:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	8852      	ldrh	r2, [r2, #2]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000e0a:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000e0c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000e10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000e14:	493f      	ldr	r1, [pc, #252]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7a9b      	ldrb	r3, [r3, #10]
 8000e1a:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	889b      	ldrh	r3, [r3, #4]
 8000e20:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	8812      	ldrh	r2, [r2, #0]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000e26:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000e28:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b1b      	ldrb	r3, [r3, #12]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d124      	bne.n	8000e84 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000e3a:	4936      	ldr	r1, [pc, #216]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000e4a:	4932      	ldr	r1, [pc, #200]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7a9b      	ldrb	r3, [r3, #10]
 8000e50:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	8852      	ldrh	r2, [r2, #2]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000e5c:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000e5e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000e62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000e66:	492b      	ldr	r1, [pc, #172]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7a9b      	ldrb	r3, [r3, #10]
 8000e6c:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	889b      	ldrh	r3, [r3, #4]
 8000e72:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	88d2      	ldrh	r2, [r2, #6]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000e78:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000e7a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7adb      	ldrb	r3, [r3, #11]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000e8c:	4921      	ldr	r1, [pc, #132]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <CAN_FilterInit+0x170>)
 8000e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8000e9e:	e007      	b.n	8000eb0 <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000ea0:	491c      	ldr	r1, [pc, #112]	; (8000f14 <CAN_FilterInit+0x170>)
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <CAN_FilterInit+0x170>)
 8000ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	891b      	ldrh	r3, [r3, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d108      	bne.n	8000eca <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000eb8:	4916      	ldr	r1, [pc, #88]	; (8000f14 <CAN_FilterInit+0x170>)
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <CAN_FilterInit+0x170>)
 8000ebc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	891b      	ldrh	r3, [r3, #8]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d107      	bne.n	8000ee2 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000ed2:	4910      	ldr	r1, [pc, #64]	; (8000f14 <CAN_FilterInit+0x170>)
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <CAN_FilterInit+0x170>)
 8000ed6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7b5b      	ldrb	r3, [r3, #13]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d107      	bne.n	8000efa <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000eea:	490a      	ldr	r1, [pc, #40]	; (8000f14 <CAN_FilterInit+0x170>)
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <CAN_FilterInit+0x170>)
 8000eee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <CAN_FilterInit+0x170>)
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <CAN_FilterInit+0x170>)
 8000efe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40006400 	.word	0x40006400

08000f18 <CAN_Transmit>:
  *                    DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission
  *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f32:	d102      	bne.n	8000f3a <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e015      	b.n	8000f66 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f46:	d102      	bne.n	8000f4e <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e00b      	b.n	8000f66 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f5a:	d102      	bne.n	8000f62 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000f62:	2304      	movs	r3, #4
 8000f64:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	f000 809c 	beq.w	80010a6 <CAN_Transmit+0x18e>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	3218      	adds	r2, #24
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	440a      	add	r2, r1
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f002 0201 	and.w	r2, r2, #1
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	7a1b      	ldrb	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d113      	bne.n	8000fba <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	3218      	adds	r2, #24
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	440a      	add	r2, r1
 8000f9e:	6811      	ldr	r1, [r2, #0]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	0552      	lsls	r2, r2, #21
                                                  TxMessage->RTR);
 8000fa6:	6838      	ldr	r0, [r7, #0]
 8000fa8:	7a40      	ldrb	r0, [r0, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000faa:	4302      	orrs	r2, r0
 8000fac:	430a      	orrs	r2, r1
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	3318      	adds	r3, #24
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	440b      	add	r3, r1
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	e015      	b.n	8000fe6 <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	3218      	adds	r2, #24
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	440a      	add	r2, r1
 8000fc6:	6811      	ldr	r1, [r2, #0]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	6852      	ldr	r2, [r2, #4]
 8000fcc:	00d2      	lsls	r2, r2, #3
                                                  TxMessage->IDE | \
 8000fce:	6838      	ldr	r0, [r7, #0]
 8000fd0:	7a00      	ldrb	r0, [r0, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000fd2:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	7a40      	ldrb	r0, [r0, #9]
                                                  TxMessage->IDE | \
 8000fd8:	4302      	orrs	r2, r0
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	3318      	adds	r3, #24
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	440b      	add	r3, r1
 8000fe4:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	7a9b      	ldrb	r3, [r3, #10]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	3218      	adds	r2, #24
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	440a      	add	r2, r1
 8001000:	3204      	adds	r2, #4
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	f022 020f 	bic.w	r2, r2, #15
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	440b      	add	r3, r1
 8001010:	3304      	adds	r3, #4
 8001012:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	3218      	adds	r2, #24
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	440a      	add	r2, r1
 8001020:	3204      	adds	r2, #4
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	7a89      	ldrb	r1, [r1, #10]
 8001028:	430a      	orrs	r2, r1
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	3318      	adds	r3, #24
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	440b      	add	r3, r1
 8001032:	3304      	adds	r3, #4
 8001034:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	7b92      	ldrb	r2, [r2, #14]
 800103c:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	7b52      	ldrb	r2, [r2, #13]
 8001042:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001044:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	7b12      	ldrb	r2, [r2, #12]
 800104a:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800104c:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[0]));
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	7ac9      	ldrb	r1, [r1, #11]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001052:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	440b      	add	r3, r1
 800105a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800105e:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	7c92      	ldrb	r2, [r2, #18]
 8001066:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	7c52      	ldrb	r2, [r2, #17]
 800106c:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800106e:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	7c12      	ldrb	r2, [r2, #16]
 8001074:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001076:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[4]));
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	7bc9      	ldrb	r1, [r1, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800107c:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	440b      	add	r3, r1
 8001084:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001088:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	3218      	adds	r2, #24
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	440a      	add	r2, r1
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	f042 0201 	orr.w	r2, r2, #1
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	3318      	adds	r3, #24
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	440b      	add	r3, r1
 80010a4:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	460b      	mov	r3, r1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	331b      	adds	r3, #27
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7a1b      	ldrb	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10b      	bne.n	80010f8 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	331b      	adds	r3, #27
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	4413      	add	r3, r2
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0d5b      	lsrs	r3, r3, #21
 80010ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e00a      	b.n	800110e <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	331b      	adds	r3, #27
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	331b      	adds	r3, #27
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	331b      	adds	r3, #27
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	b2da      	uxtb	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b2da      	uxtb	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0c1b      	lsrs	r3, r3, #16
 8001190:	b2da      	uxtb	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	4413      	add	r3, r2
 800119e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0e1b      	lsrs	r3, r3, #24
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0e1b      	lsrs	r3, r3, #24
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001202:	7afb      	ldrb	r3, [r7, #11]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d106      	bne.n	8001216 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f043 0220 	orr.w	r2, r3, #32
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8001214:	e005      	b.n	8001222 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f043 0220 	orr.w	r2, r3, #32
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	611a      	str	r2, [r3, #16]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *                   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	4613      	mov	r3, r2
 8001238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	695a      	ldr	r2, [r3, #20]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	431a      	orrs	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 800124c:	e006      	b.n	800125c <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	43db      	mvns	r3, r3
 8001256:	401a      	ands	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	615a      	str	r2, [r3, #20]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
	...

08001268 <CAN_GetITStatus>:
  *                 -  CAN_IT_LEC    
  *                 -  CAN_IT_ERR 
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b2 	beq.w	80013e8 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2b40      	cmp	r3, #64	; 0x40
 8001288:	d062      	beq.n	8001350 <CAN_GetITStatus+0xe8>
 800128a:	2b40      	cmp	r3, #64	; 0x40
 800128c:	d80f      	bhi.n	80012ae <CAN_GetITStatus+0x46>
 800128e:	2b04      	cmp	r3, #4
 8001290:	d03a      	beq.n	8001308 <CAN_GetITStatus+0xa0>
 8001292:	2b04      	cmp	r3, #4
 8001294:	d804      	bhi.n	80012a0 <CAN_GetITStatus+0x38>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d024      	beq.n	80012e4 <CAN_GetITStatus+0x7c>
 800129a:	2b02      	cmp	r3, #2
 800129c:	d02b      	beq.n	80012f6 <CAN_GetITStatus+0x8e>
 800129e:	e09f      	b.n	80013e0 <CAN_GetITStatus+0x178>
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d043      	beq.n	800132c <CAN_GetITStatus+0xc4>
 80012a4:	2b20      	cmp	r3, #32
 80012a6:	d04a      	beq.n	800133e <CAN_GetITStatus+0xd6>
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d036      	beq.n	800131a <CAN_GetITStatus+0xb2>
 80012ac:	e098      	b.n	80013e0 <CAN_GetITStatus+0x178>
 80012ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012b2:	f000 8083 	beq.w	80013bc <CAN_GetITStatus+0x154>
 80012b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ba:	d809      	bhi.n	80012d0 <CAN_GetITStatus+0x68>
 80012bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c0:	d06a      	beq.n	8001398 <CAN_GetITStatus+0x130>
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d070      	beq.n	80013aa <CAN_GetITStatus+0x142>
 80012c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012cc:	d05b      	beq.n	8001386 <CAN_GetITStatus+0x11e>
 80012ce:	e087      	b.n	80013e0 <CAN_GetITStatus+0x178>
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d045      	beq.n	8001362 <CAN_GetITStatus+0xfa>
 80012d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012da:	d04b      	beq.n	8001374 <CAN_GetITStatus+0x10c>
 80012dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012e0:	d075      	beq.n	80013ce <CAN_GetITStatus+0x166>
 80012e2:	e07d      	b.n	80013e0 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4943      	ldr	r1, [pc, #268]	; (80013f8 <CAN_GetITStatus+0x190>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f8f4 	bl	80014d8 <CheckITStatus>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
	      break;
 80012f4:	e07a      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2103      	movs	r1, #3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f8eb 	bl	80014d8 <CheckITStatus>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
	      break;
 8001306:	e071      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2108      	movs	r1, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f8e2 	bl	80014d8 <CheckITStatus>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
	      break;
 8001318:	e068      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2110      	movs	r1, #16
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f8d9 	bl	80014d8 <CheckITStatus>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
	      break;
 800132a:	e05f      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	2103      	movs	r1, #3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f8d0 	bl	80014d8 <CheckITStatus>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
	      break;
 800133c:	e056      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2108      	movs	r1, #8
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f8c7 	bl	80014d8 <CheckITStatus>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
	      break;
 800134e:	e04d      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
               /* Check CAN_RF1R_FOVR1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	2110      	movs	r1, #16
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f8be 	bl	80014d8 <CheckITStatus>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
	      break;
 8001360:	e044      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
               /* Check CAN_MSR_WKUI bit */
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2108      	movs	r1, #8
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f8b5 	bl	80014d8 <CheckITStatus>
 800136e:	4603      	mov	r3, r0
 8001370:	73fb      	strb	r3, [r7, #15]
	      break;
 8001372:	e03b      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2110      	movs	r1, #16
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f8ac 	bl	80014d8 <CheckITStatus>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
	      break;
 8001384:	e032      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2101      	movs	r1, #1
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f8a3 	bl	80014d8 <CheckITStatus>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
	      break;
 8001396:	e029      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f89a 	bl	80014d8 <CheckITStatus>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	      break;
 80013a8:	e020      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
               /* Check CAN_ESR_BOFF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f891 	bl	80014d8 <CheckITStatus>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
	      break;
 80013ba:	e017      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2170      	movs	r1, #112	; 0x70
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f888 	bl	80014d8 <CheckITStatus>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
	      break;
 80013cc:	e00e      	b.n	80013ec <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2104      	movs	r1, #4
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f87f 	bl	80014d8 <CheckITStatus>
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
	      break;
 80013de:	e005      	b.n	80013ec <CAN_GetITStatus+0x184>
      default :
               /* in case of error, return RESET */
              itstatus = RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
              break;
 80013e4:	bf00      	nop
 80013e6:	e001      	b.n	80013ec <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	00010101 	.word	0x00010101

080013fc <CAN_ClearITPendingBit>:
  *                  -  CAN_IT_LEC    
  *                  -  CAN_IT_ERR 
  * @retval None.
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800140c:	d043      	beq.n	8001496 <CAN_ClearITPendingBit+0x9a>
 800140e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001412:	d80d      	bhi.n	8001430 <CAN_ClearITPendingBit+0x34>
 8001414:	2b08      	cmp	r3, #8
 8001416:	d02a      	beq.n	800146e <CAN_ClearITPendingBit+0x72>
 8001418:	2b08      	cmp	r3, #8
 800141a:	d804      	bhi.n	8001426 <CAN_ClearITPendingBit+0x2a>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d01e      	beq.n	800145e <CAN_ClearITPendingBit+0x62>
 8001420:	2b04      	cmp	r3, #4
 8001422:	d020      	beq.n	8001466 <CAN_ClearITPendingBit+0x6a>
	      CANx->MSR = CAN_MSR_ERRI; 
	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
                  of the CAN Bus status*/
	      break;
      default :
	      break;
 8001424:	e051      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001426:	2b20      	cmp	r3, #32
 8001428:	d025      	beq.n	8001476 <CAN_ClearITPendingBit+0x7a>
 800142a:	2b40      	cmp	r3, #64	; 0x40
 800142c:	d027      	beq.n	800147e <CAN_ClearITPendingBit+0x82>
	      break;
 800142e:	e04c      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8001430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001434:	d03b      	beq.n	80014ae <CAN_ClearITPendingBit+0xb2>
 8001436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800143a:	d806      	bhi.n	800144a <CAN_ClearITPendingBit+0x4e>
 800143c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001440:	d02d      	beq.n	800149e <CAN_ClearITPendingBit+0xa2>
 8001442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001446:	d02e      	beq.n	80014a6 <CAN_ClearITPendingBit+0xaa>
	      break;
 8001448:	e03f      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d01a      	beq.n	8001486 <CAN_ClearITPendingBit+0x8a>
 8001450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001454:	d01b      	beq.n	800148e <CAN_ClearITPendingBit+0x92>
 8001456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800145a:	d02f      	beq.n	80014bc <CAN_ClearITPendingBit+0xc0>
	      break;
 800145c:	e035      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <CAN_ClearITPendingBit+0xd8>)
 8001462:	609a      	str	r2, [r3, #8]
	      break;
 8001464:	e031      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FULL0; 
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2208      	movs	r2, #8
 800146a:	60da      	str	r2, [r3, #12]
	      break;
 800146c:	e02d      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2210      	movs	r2, #16
 8001472:	60da      	str	r2, [r3, #12]
	      break;
 8001474:	e029      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FULL1;  
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2208      	movs	r2, #8
 800147a:	611a      	str	r2, [r3, #16]
	      break;
 800147c:	e025      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2210      	movs	r2, #16
 8001482:	611a      	str	r2, [r3, #16]
	      break;
 8001484:	e021      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_WKUI;  
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2208      	movs	r2, #8
 800148a:	605a      	str	r2, [r3, #4]
	      break;
 800148c:	e01d      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_SLAKI;   
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2210      	movs	r2, #16
 8001492:	605a      	str	r2, [r3, #4]
	      break;
 8001494:	e019      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2204      	movs	r2, #4
 800149a:	605a      	str	r2, [r3, #4]
	      break;
 800149c:	e015      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2204      	movs	r2, #4
 80014a2:	605a      	str	r2, [r3, #4]
	      break;
 80014a4:	e011      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2204      	movs	r2, #4
 80014aa:	605a      	str	r2, [r3, #4]
	      break;
 80014ac:	e00d      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2204      	movs	r2, #4
 80014b8:	605a      	str	r2, [r3, #4]
	      break;
 80014ba:	e006      	b.n	80014ca <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2204      	movs	r2, #4
 80014c6:	605a      	str	r2, [r3, #4]
	      break;
 80014c8:	bf00      	nop
   }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	00010101 	.word	0x00010101

080014d8 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit:  specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e001      	b.n	80014fa <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001506:	b480      	push	{r7}
 8001508:	b089      	sub	sp, #36	; 0x24
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	78db      	ldrb	r3, [r3, #3]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	789b      	ldrb	r3, [r3, #2]
 8001542:	461a      	mov	r2, r3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4313      	orrs	r3, r2
 8001548:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d044      	beq.n	80015de <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	e038      	b.n	80015d2 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001560:	2201      	movs	r2, #1
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	429a      	cmp	r2, r3
 800157c:	d126      	bne.n	80015cc <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001584:	220f      	movs	r2, #15
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	43db      	mvns	r3, r3
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	78db      	ldrb	r3, [r3, #3]
 80015aa:	2b28      	cmp	r3, #40	; 0x28
 80015ac:	d105      	bne.n	80015ba <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015ae:	2201      	movs	r2, #1
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	409a      	lsls	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	e008      	b.n	80015cc <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	78db      	ldrb	r3, [r3, #3]
 80015be:	2b48      	cmp	r3, #72	; 0x48
 80015c0:	d104      	bne.n	80015cc <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015c2:	2201      	movs	r2, #1
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	409a      	lsls	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b07      	cmp	r3, #7
 80015d6:	d9c3      	bls.n	8001560 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2bff      	cmp	r3, #255	; 0xff
 80015e4:	d946      	bls.n	8001674 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	e03a      	b.n	8001668 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	3308      	adds	r3, #8
 80015f6:	2201      	movs	r2, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	429a      	cmp	r2, r3
 8001610:	d127      	bne.n	8001662 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001618:	220f      	movs	r2, #15
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	43db      	mvns	r3, r3
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	4313      	orrs	r3, r2
 8001638:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	2b28      	cmp	r3, #40	; 0x28
 8001640:	d105      	bne.n	800164e <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	3308      	adds	r3, #8
 8001646:	2201      	movs	r2, #1
 8001648:	409a      	lsls	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	2b48      	cmp	r3, #72	; 0x48
 8001654:	d105      	bne.n	8001662 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	3308      	adds	r3, #8
 800165a:	2201      	movs	r2, #1
 800165c:	409a      	lsls	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	3301      	adds	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9c1      	bls.n	80015f2 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	605a      	str	r2, [r3, #4]
  }
}
 8001674:	bf00      	nop
 8001676:	3724      	adds	r7, #36	; 0x24
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e001      	b.n	80016a4 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da03      	bge.n	80016da <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e002      	b.n	80016e0 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016fa:	d10a      	bne.n	8001712 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001702:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800170e:	6053      	str	r3, [r2, #4]
 8001710:	e021      	b.n	8001756 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00e      	beq.n	800173a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800171c:	2203      	movs	r2, #3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e00d      	b.n	8001756 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0d5b      	lsrs	r3, r3, #21
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4013      	ands	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001754:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	da03      	bge.n	800177c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800177a:	e002      	b.n	8001782 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6053      	str	r3, [r2, #4]
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40010000 	.word	0x40010000

08001790 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017a2:	4909      	ldr	r1, [pc, #36]	; (80017c8 <RCC_AHBPeriphClockCmd+0x38>)
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <RCC_AHBPeriphClockCmd+0x38>)
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80017ae:	e006      	b.n	80017be <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017b0:	4905      	ldr	r1, [pc, #20]	; (80017c8 <RCC_AHBPeriphClockCmd+0x38>)
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <RCC_AHBPeriphClockCmd+0x38>)
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4013      	ands	r3, r2
 80017bc:	614b      	str	r3, [r1, #20]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000

080017cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80017de:	4909      	ldr	r1, [pc, #36]	; (8001804 <RCC_APB2PeriphClockCmd+0x38>)
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <RCC_APB2PeriphClockCmd+0x38>)
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80017ea:	e006      	b.n	80017fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80017ec:	4905      	ldr	r1, [pc, #20]	; (8001804 <RCC_APB2PeriphClockCmd+0x38>)
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <RCC_APB2PeriphClockCmd+0x38>)
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4013      	ands	r3, r2
 80017f8:	618b      	str	r3, [r1, #24]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000

08001808 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800181a:	4909      	ldr	r1, [pc, #36]	; (8001840 <RCC_APB1PeriphClockCmd+0x38>)
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <RCC_APB1PeriphClockCmd+0x38>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001826:	e006      	b.n	8001836 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001828:	4905      	ldr	r1, [pc, #20]	; (8001840 <RCC_APB1PeriphClockCmd+0x38>)
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <RCC_APB1PeriphClockCmd+0x38>)
 800182c:	69da      	ldr	r2, [r3, #28]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	43db      	mvns	r3, r3
 8001832:	4013      	ands	r3, r2
 8001834:	61cb      	str	r3, [r1, #28]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000

08001844 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001856:	4909      	ldr	r1, [pc, #36]	; (800187c <RCC_APB1PeriphResetCmd+0x38>)
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <RCC_APB1PeriphResetCmd+0x38>)
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4313      	orrs	r3, r2
 8001860:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001862:	e006      	b.n	8001872 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001864:	4905      	ldr	r1, [pc, #20]	; (800187c <RCC_APB1PeriphResetCmd+0x38>)
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <RCC_APB1PeriphResetCmd+0x38>)
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	43db      	mvns	r3, r3
 800186e:	4013      	ands	r3, r2
 8001870:	610b      	str	r3, [r1, #16]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000

08001880 <CanAppReceiveMsgHandler>:
	sizeof(canFirlter) / sizeof(canFirlter[0]),
};


static void CanAppReceiveMsgHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
    can_frame_t frame;
    CanGet_MSG(CAN_APP_CONTROLLER, &frame);
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	2000      	movs	r0, #0
 800188c:	f001 fd4a 	bl	8003324 <CanGet_MSG>
    CanAppSendMsg(&frame);
 8001890:	463b      	mov	r3, r7
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f822 	bl	80018dc <CanAppSendMsg>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <CanAppTxCompleteHalder>:

static void CanAppTxCompleteHalder(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(xSemphore, NULL);
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <CanAppTxCompleteHalder+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fc7f 	bl	80041ae <xQueueGiveFromISR>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200001c8 	.word	0x200001c8

080018b8 <CanAppBuffOffHanlder>:

static void CanAppBuffOffHanlder(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	CanDeinit(CAN_APP_CONTROLLER);
 80018bc:	2000      	movs	r0, #0
 80018be:	f001 fc9b 	bl	80031f8 <CanDeinit>
	CanInit(CanAppHandler[0].controller, CanAppHandler[0].baud, canAppCb, &firlterList);
 80018c2:	2000      	movs	r0, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <CanAppBuffOffHanlder+0x1c>)
 80018c8:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <CanAppBuffOffHanlder+0x20>)
 80018ca:	f001 fc15 	bl	80030f8 <CanInit>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08006b20 	.word	0x08006b20
 80018d8:	08001935 	.word	0x08001935

080018dc <CanAppSendMsg>:

void CanAppSendMsg(can_frame_t *pFrame)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    uint8_t tryCnt = 3;;
 80018e4:	2303      	movs	r3, #3
 80018e6:	73fb      	strb	r3, [r7, #15]
    pFrame->id = selfId;
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <CanAppSendMsg+0x50>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	605a      	str	r2, [r3, #4]
    while(tryCnt--)
 80018f0:	e013      	b.n	800191a <CanAppSendMsg+0x3e>
    {
        if(CanSend_MSG(CAN_APP_CONTROLLER, pFrame))
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	2000      	movs	r0, #0
 80018f6:	f001 fcb7 	bl	8003268 <CanSend_MSG>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <CanAppSendMsg+0x38>
        {
            if(xSemaphoreTake(xSemphore, pdMS_TO_TICKS(100)) == pdPASS)
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <CanAppSendMsg+0x54>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2164      	movs	r1, #100	; 0x64
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fd46 	bl	8004398 <xQueueSemaphoreTake>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	d103      	bne.n	800191a <CanAppSendMsg+0x3e>
            {
                return;
 8001912:	e007      	b.n	8001924 <CanAppSendMsg+0x48>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(10));
 8001914:	200a      	movs	r0, #10
 8001916:	f003 f827 	bl	8004968 <vTaskDelay>
    while(tryCnt--)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	73fa      	strb	r2, [r7, #15]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e6      	bne.n	80018f2 <CanAppSendMsg+0x16>
        }
    }
    ERROR_DEBUG("[CanApp] Send msg failed\r\n");
}
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001cc 	.word	0x200001cc
 8001930:	200001c8 	.word	0x200001c8

08001934 <canAppCb>:

static void canAppCb(CanControllerIdx_t controller, uint8_t it_flag)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	460a      	mov	r2, r1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	71bb      	strb	r3, [r7, #6]
	CanAppEvt_t evt;
	switch(it_flag)
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d815      	bhi.n	8001976 <canAppCb+0x42>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <canAppCb+0x1c>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001965 	.word	0x08001965
 8001954:	0800196b 	.word	0x0800196b
 8001958:	08001977 	.word	0x08001977
 800195c:	08001971 	.word	0x08001971
 8001960:	08001977 	.word	0x08001977
	{
		case CAN_RX_DATA:
			evt = CanAppEvtGetMsg;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
			break;
 8001968:	e006      	b.n	8001978 <canAppCb+0x44>
		case CAN_TX_COMPLETE:
			evt = CanAppTransComplete;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
			break;
 800196e:	e003      	b.n	8001978 <canAppCb+0x44>
		case CAN_WAKEUP:
			break;
		case CAN_BUSSOFF_ERR:
			evt = CanAppBusOff;
 8001970:	2302      	movs	r3, #2
 8001972:	73fb      	strb	r3, [r7, #15]
			break;
 8001974:	e000      	b.n	8001978 <canAppCb+0x44>
		case CAN_PASSIVE_ERR:
			break;
		default:
			break;
 8001976:	bf00      	nop
	}
	xQueueSendFromISR(xQueue, &evt, NULL);
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <canAppCb+0x5c>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f107 010f 	add.w	r1, r7, #15
 8001980:	2300      	movs	r3, #0
 8001982:	2200      	movs	r2, #0
 8001984:	f002 fbba 	bl	80040fc <xQueueGenericSendFromISR>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001c4 	.word	0x200001c4

08001994 <xTask>:

static void xTask(void *pParamter)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	uint8_t event;
	for(;;)
	{
		if(pdPASS == xQueueReceive(xQueue, &event, pdMS_TO_TICKS(500)))
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <xTask+0x38>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f107 010f 	add.w	r1, r7, #15
 80019a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fc53 	bl	8004254 <xQueueReceive>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d1f3      	bne.n	800199c <xTask+0x8>
		{
			if(event >= CanAppEvtNum)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d806      	bhi.n	80019c8 <xTask+0x34>
			{
				continue;
			}
			CanAppEvtHandler[event]();
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <xTask+0x3c>)
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	4798      	blx	r3
 80019c6:	e7e9      	b.n	800199c <xTask+0x8>
				continue;
 80019c8:	bf00      	nop
		if(pdPASS == xQueueReceive(xQueue, &event, pdMS_TO_TICKS(500)))
 80019ca:	e7e7      	b.n	800199c <xTask+0x8>
 80019cc:	200001c4 	.word	0x200001c4
 80019d0:	08006ad4 	.word	0x08006ad4

080019d4 <CanAppInit>:
		}
	}
}

void CanAppInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af02      	add	r7, sp, #8
	selfId = 1;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <CanAppInit+0x54>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]
	xQueue = xQueueCreate(3, 1);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2101      	movs	r1, #1
 80019e4:	2003      	movs	r0, #3
 80019e6:	f002 fa93 	bl	8003f10 <xQueueGenericCreate>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <CanAppInit+0x58>)
 80019ee:	601a      	str	r2, [r3, #0]
	xSemphore = xSemaphoreCreateBinary();
 80019f0:	2203      	movs	r2, #3
 80019f2:	2100      	movs	r1, #0
 80019f4:	2001      	movs	r0, #1
 80019f6:	f002 fa8b 	bl	8003f10 <xQueueGenericCreate>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <CanAppInit+0x5c>)
 80019fe:	601a      	str	r2, [r3, #0]
	xTaskCreate(xTask, "CanApp", 128, NULL, 4, NULL);
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2304      	movs	r3, #4
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	4909      	ldr	r1, [pc, #36]	; (8001a34 <CanAppInit+0x60>)
 8001a0e:	480a      	ldr	r0, [pc, #40]	; (8001a38 <CanAppInit+0x64>)
 8001a10:	f002 fe96 	bl	8004740 <xTaskCreate>
	CanInit(CanAppHandler[0].controller, CanAppHandler[0].baud, canAppCb, &firlterList);
 8001a14:	2000      	movs	r0, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <CanAppInit+0x68>)
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <CanAppInit+0x6c>)
 8001a1c:	f001 fb6c 	bl	80030f8 <CanInit>
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200001cc 	.word	0x200001cc
 8001a2c:	200001c4 	.word	0x200001c4
 8001a30:	200001c8 	.word	0x200001c8
 8001a34:	08006a98 	.word	0x08006a98
 8001a38:	08001995 	.word	0x08001995
 8001a3c:	08006b20 	.word	0x08006b20
 8001a40:	08001935 	.word	0x08001935

08001a44 <vApplicationDaemonTaskStartupHook>:
#include "displayTask.h"
#include "keyDetect.h"
#include "maxtrixApp.h"

void vApplicationDaemonTaskStartupHook( void )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	sysclock_init();
 8001a48:	f001 fe9c 	bl	8003784 <sysclock_init>
	gpioInit();
 8001a4c:	f001 fdfe 	bl	800364c <gpioInit>
    CreateDisplayTask();
 8001a50:	f003 ff92 	bl	8005978 <CreateDisplayTask>
    CanAppInit();
 8001a54:	f7ff ffbe 	bl	80019d4 <CanAppInit>
    keyDetectInit();
 8001a58:	f001 f9ce 	bl	8002df8 <keyDetectInit>
    RGBSetupRGBMatrixPorts();
 8001a5c:	f001 f8ec 	bl	8002c38 <RGBSetupRGBMatrixPorts>
    maxtriAppInit();
 8001a60:	f000 ff72 	bl	8002948 <maxtriAppInit>
    maxtrixAppDisplayBootImage();
 8001a64:	f000 f9c8 	bl	8001df8 <maxtrixAppDisplayBootImage>
    
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <vApplicationIdleHook>:

void vApplicationIdleHook( void )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    DisplayRefalsh();
 8001a7c:	f003 ffa6 	bl	80059cc <DisplayRefalsh>

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <main>:
#include "rand.h"
#include "FreeRTOS.h"
#include "task.h"

int main()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 8001a88:	f002 ff92 	bl	80049b0 <vTaskStartScheduler>
    return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <maxtrixAppSetGameLevel>:
	num8,
	num9,
};

uint8_t maxtrixAppSetGameLevel(uint8_t level)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
	if(level <= 20)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b14      	cmp	r3, #20
 8001aa2:	f200 80de 	bhi.w	8001c62 <maxtrixAppSetGameLevel+0x1ce>
	{
		uint8_t xoffset = 0, xoffset1 = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	77fb      	strb	r3, [r7, #31]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75bb      	strb	r3, [r7, #22]
		uint32_t i;
		uint8_t j;
		uint32_t color;
		uint8_t *pLevel1 = (uint8_t *)pNumber[(level) / 10];
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <maxtrixAppSetGameLevel+0x1d8>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <maxtrixAppSetGameLevel+0x1dc>)
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	613b      	str	r3, [r7, #16]
		uint8_t *pLevel2 = (uint8_t *)pNumber[(level) % 10];
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	4b69      	ldr	r3, [pc, #420]	; (8001c6c <maxtrixAppSetGameLevel+0x1d8>)
 8001ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8001acc:	08d9      	lsrs	r1, r3, #3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <maxtrixAppSetGameLevel+0x1dc>)
 8001ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae2:	60fb      	str	r3, [r7, #12]
		showMode = showGameLevel;
 8001ae4:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <maxtrixAppSetGameLevel+0x1e0>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
		RGBClearBuff();
 8001aea:	f001 f90f 	bl	8002d0c <RGBClearBuff>
		do
		{
			color = rand();
 8001aee:	f001 fe27 	bl	8003740 <rand>
 8001af2:	4603      	mov	r3, r0
 8001af4:	60bb      	str	r3, [r7, #8]
		}
		while((color & 0xFF) <= 0x7F && ((color & 0xFF00) <= 0x7F00) && ((color & 0xFF000) <= 0x7F000));
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b7f      	cmp	r3, #127	; 0x7f
 8001afc:	d80b      	bhi.n	8001b16 <maxtrixAppSetGameLevel+0x82>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001b04:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 8001b08:	d805      	bhi.n	8001b16 <maxtrixAppSetGameLevel+0x82>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001b10:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001b14:	d9eb      	bls.n	8001aee <maxtrixAppSetGameLevel+0x5a>
		for(i = 0; i < sizeof(gameLevel); i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e01f      	b.n	8001b5c <maxtrixAppSetGameLevel+0xc8>
		{
			for(j = 0; j < 8; j++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	75fb      	strb	r3, [r7, #23]
 8001b20:	e016      	b.n	8001b50 <maxtrixAppSetGameLevel+0xbc>
			{
				if((gameLevel[i]) & (0x01 << j))
 8001b22:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <maxtrixAppSetGameLevel+0x1e4>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	fa42 f303 	asr.w	r3, r2, r3
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <maxtrixAppSetGameLevel+0xb6>
				{
					GRBSetCell(8 * i + j, color);
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	00da      	lsls	r2, r3, #3
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	4413      	add	r3, r2
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f90f 	bl	8002d68 <GRBSetCell>
			for(j = 0; j < 8; j++)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d9e5      	bls.n	8001b22 <maxtrixAppSetGameLevel+0x8e>
		for(i = 0; i < sizeof(gameLevel); i++)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2bff      	cmp	r3, #255	; 0xff
 8001b60:	d9dc      	bls.n	8001b1c <maxtrixAppSetGameLevel+0x88>

			}
		}
		do
		{
			color = rand();
 8001b62:	f001 fded 	bl	8003740 <rand>
 8001b66:	4603      	mov	r3, r0
 8001b68:	60bb      	str	r3, [r7, #8]
		}
		while((color & 0xFF) <= 0x7F && ((color & 0xFF00) <= 0x7F00) && ((color & 0xFF000) <= 0x7F000));
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b70:	d80b      	bhi.n	8001b8a <maxtrixAppSetGameLevel+0xf6>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001b78:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 8001b7c:	d805      	bhi.n	8001b8a <maxtrixAppSetGameLevel+0xf6>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001b84:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001b88:	d9eb      	bls.n	8001b62 <maxtrixAppSetGameLevel+0xce>
		if(level == 1)
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <maxtrixAppSetGameLevel+0x102>
		{
			xoffset = 46;
 8001b90:	232e      	movs	r3, #46	; 0x2e
 8001b92:	77fb      	strb	r3, [r7, #31]
 8001b94:	e036      	b.n	8001c04 <maxtrixAppSetGameLevel+0x170>
		}
		else if(level <= 9)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d802      	bhi.n	8001ba2 <maxtrixAppSetGameLevel+0x10e>
		{
			xoffset = 44;
 8001b9c:	232c      	movs	r3, #44	; 0x2c
 8001b9e:	77fb      	strb	r3, [r7, #31]
 8001ba0:	e030      	b.n	8001c04 <maxtrixAppSetGameLevel+0x170>
		}
		else if(level > 9)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d92d      	bls.n	8001c04 <maxtrixAppSetGameLevel+0x170>
		{
			xoffset = 48;
 8001ba8:	2330      	movs	r3, #48	; 0x30
 8001baa:	77fb      	strb	r3, [r7, #31]
			xoffset1 = 38;
 8001bac:	2326      	movs	r3, #38	; 0x26
 8001bae:	75bb      	strb	r3, [r7, #22]
			for(i = 0; i < sizeof(num0); i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	e023      	b.n	8001bfe <maxtrixAppSetGameLevel+0x16a>
			{

				for(j = 0; j < 8; j++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
 8001bba:	e01a      	b.n	8001bf2 <maxtrixAppSetGameLevel+0x15e>
				{
					if((pLevel1[i]) & (0x01 << j))
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	fa42 f303 	asr.w	r3, r2, r3
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <maxtrixAppSetGameLevel+0x158>
					{

						GRBSetCell(8 * i + j + 10 * 64 + xoffset1, color);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	00da      	lsls	r2, r3, #3
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	441a      	add	r2, r3
 8001bdc:	7dbb      	ldrb	r3, [r7, #22]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 f8be 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	2b07      	cmp	r3, #7
 8001bf6:	d9e1      	bls.n	8001bbc <maxtrixAppSetGameLevel+0x128>
			for(i = 0; i < sizeof(num0); i++)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2bff      	cmp	r3, #255	; 0xff
 8001c02:	d9d8      	bls.n	8001bb6 <maxtrixAppSetGameLevel+0x122>
					}
				}
			}
		}
		for(i = 0; i < sizeof(num0); i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	e023      	b.n	8001c52 <maxtrixAppSetGameLevel+0x1be>
		{

			for(j = 0; j < 8; j++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
 8001c0e:	e01a      	b.n	8001c46 <maxtrixAppSetGameLevel+0x1b2>
			{
				if((pLevel2[i]) & (0x01 << j))
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	fa42 f303 	asr.w	r3, r2, r3
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <maxtrixAppSetGameLevel+0x1ac>
				{

					GRBSetCell(8 * i + j + 10 * 64 + xoffset, color);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	00da      	lsls	r2, r3, #3
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	441a      	add	r2, r3
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 f894 	bl	8002d68 <GRBSetCell>
			for(j = 0; j < 8; j++)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	3301      	adds	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	d9e1      	bls.n	8001c10 <maxtrixAppSetGameLevel+0x17c>
		for(i = 0; i < sizeof(num0); i++)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2bff      	cmp	r3, #255	; 0xff
 8001c56:	d9d8      	bls.n	8001c0a <maxtrixAppSetGameLevel+0x176>
				}
			}
		}
		gGameLevel = level;
 8001c58:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <maxtrixAppSetGameLevel+0x1e8>)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	7013      	strb	r3, [r2, #0]
		return 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <maxtrixAppSetGameLevel+0x1d0>
	}
	return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	cccccccd 	.word	0xcccccccd
 8001c70:	20000004 	.word	0x20000004
 8001c74:	200001d6 	.word	0x200001d6
 8001c78:	08008628 	.word	0x08008628
 8001c7c:	20000000 	.word	0x20000000

08001c80 <maxtrixAppGameLevelIncrease>:

void maxtrixAppGameLevelIncrease(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	gGameLevel++;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <maxtrixAppGameLevelIncrease+0x2c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <maxtrixAppGameLevelIncrease+0x2c>)
 8001c8e:	701a      	strb	r2, [r3, #0]
	if(gGameLevel > 20)
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <maxtrixAppGameLevelIncrease+0x2c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b14      	cmp	r3, #20
 8001c96:	d902      	bls.n	8001c9e <maxtrixAppGameLevelIncrease+0x1e>
	{
		gGameLevel = 1;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <maxtrixAppGameLevelIncrease+0x2c>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
	}
	maxtrixAppSetGameLevel(gGameLevel);
 8001c9e:	4b03      	ldr	r3, [pc, #12]	; (8001cac <maxtrixAppGameLevelIncrease+0x2c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fef6 	bl	8001a94 <maxtrixAppSetGameLevel>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000000 	.word	0x20000000

08001cb0 <maxtrixAppGetGameLevel>:

uint8_t maxtrixAppGetGameLevel(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return gGameLevel;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <maxtrixAppGetGameLevel+0x10>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <maxtrixAppSetGameMode>:

uint8_t maxtrixAppSetGameMode(uint8_t cnt)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint8_t j;
	showMode = showGameMode;
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <maxtrixAppSetGameMode+0x120>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
	gGameMode = cnt;
 8001cd4:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <maxtrixAppSetGameMode+0x124>)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	7013      	strb	r3, [r2, #0]
	uint8_t *pMode = (uint8_t *)singleMode;
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <maxtrixAppSetGameMode+0x128>)
 8001cdc:	60fb      	str	r3, [r7, #12]
	if(cnt > 1)
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d901      	bls.n	8001ce8 <maxtrixAppSetGameMode+0x24>
	{
		pMode = (uint8_t *)mulitMode;
 8001ce4:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <maxtrixAppSetGameMode+0x12c>)
 8001ce6:	60fb      	str	r3, [r7, #12]
	}
	RGBClearBuff();
 8001ce8:	f001 f810 	bl	8002d0c <RGBClearBuff>
	uint32_t color;
	do
	{
		color = rand();
 8001cec:	f001 fd28 	bl	8003740 <rand>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60bb      	str	r3, [r7, #8]
	}
	while((color & 0xFF) <= 0x7F && ((color & 0xFF00) <= 0x7F00) && ((color & 0xFF000) <= 0x7F000));
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfa:	d80b      	bhi.n	8001d14 <maxtrixAppSetGameMode+0x50>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d02:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 8001d06:	d805      	bhi.n	8001d14 <maxtrixAppSetGameMode+0x50>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001d0e:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001d12:	d9eb      	bls.n	8001cec <maxtrixAppSetGameMode+0x28>
	for(i = 0; i < sizeof(gameMode); i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e01f      	b.n	8001d5a <maxtrixAppSetGameMode+0x96>
	{
		for(j = 0; j < 8; j++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	74fb      	strb	r3, [r7, #19]
 8001d1e:	e016      	b.n	8001d4e <maxtrixAppSetGameMode+0x8a>
		{

			if((gameMode[i]) & (0x01 << j))
 8001d20:	4a34      	ldr	r2, [pc, #208]	; (8001df4 <maxtrixAppSetGameMode+0x130>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	fa42 f303 	asr.w	r3, r2, r3
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <maxtrixAppSetGameMode+0x84>
			{
				GRBSetCell(8 * i + j, color);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	00da      	lsls	r2, r3, #3
 8001d3c:	7cfb      	ldrb	r3, [r7, #19]
 8001d3e:	4413      	add	r3, r2
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 f810 	bl	8002d68 <GRBSetCell>
		for(j = 0; j < 8; j++)
 8001d48:	7cfb      	ldrb	r3, [r7, #19]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	74fb      	strb	r3, [r7, #19]
 8001d4e:	7cfb      	ldrb	r3, [r7, #19]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	d9e5      	bls.n	8001d20 <maxtrixAppSetGameMode+0x5c>
	for(i = 0; i < sizeof(gameMode); i++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2bff      	cmp	r3, #255	; 0xff
 8001d5e:	d9dc      	bls.n	8001d1a <maxtrixAppSetGameMode+0x56>

		}
	}
	do
	{
		color = rand();
 8001d60:	f001 fcee 	bl	8003740 <rand>
 8001d64:	4603      	mov	r3, r0
 8001d66:	60bb      	str	r3, [r7, #8]
	}
	while((color & 0xFF) <= 0x7F && ((color & 0xFF00) <= 0x7F00) && ((color & 0xFF000) <= 0x7F000));
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d6e:	d80b      	bhi.n	8001d88 <maxtrixAppSetGameMode+0xc4>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d76:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 8001d7a:	d805      	bhi.n	8001d88 <maxtrixAppSetGameMode+0xc4>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001d82:	f5b3 2ffe 	cmp.w	r3, #520192	; 0x7f000
 8001d86:	d9eb      	bls.n	8001d60 <maxtrixAppSetGameMode+0x9c>
	for(i = 0; i < sizeof(singleMode); i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e021      	b.n	8001dd2 <maxtrixAppSetGameMode+0x10e>
	{
		for(j = 0; j < 8; j++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	74fb      	strb	r3, [r7, #19]
 8001d92:	e018      	b.n	8001dc6 <maxtrixAppSetGameMode+0x102>
		{

			if((pMode[i]) & (0x01 << j))
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	7cfb      	ldrb	r3, [r7, #19]
 8001da0:	fa42 f303 	asr.w	r3, r2, r3
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <maxtrixAppSetGameMode+0xfc>
			{
				GRBSetCell(8 * i + j + 64 * 10 + 37,  color);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	4413      	add	r3, r2
 8001db4:	f203 23a5 	addw	r3, r3, #677	; 0x2a5
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 ffd4 	bl	8002d68 <GRBSetCell>
		for(j = 0; j < 8; j++)
 8001dc0:	7cfb      	ldrb	r3, [r7, #19]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	74fb      	strb	r3, [r7, #19]
 8001dc6:	7cfb      	ldrb	r3, [r7, #19]
 8001dc8:	2b07      	cmp	r3, #7
 8001dca:	d9e3      	bls.n	8001d94 <maxtrixAppSetGameMode+0xd0>
	for(i = 0; i < sizeof(singleMode); i++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2bff      	cmp	r3, #255	; 0xff
 8001dd6:	d9da      	bls.n	8001d8e <maxtrixAppSetGameMode+0xca>
			}

		}
	}
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200001d6 	.word	0x200001d6
 8001de8:	20000001 	.word	0x20000001
 8001dec:	08008428 	.word	0x08008428
 8001df0:	08008528 	.word	0x08008528
 8001df4:	08008328 	.word	0x08008328

08001df8 <maxtrixAppDisplayBootImage>:
	}
	return 1;
}

void maxtrixAppDisplayBootImage(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
	uint32_t color = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
	showMode = showImage;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <maxtrixAppDisplayBootImage+0x70>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < MATRIX_SIZE; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	e022      	b.n	8001e58 <maxtrixAppDisplayBootImage+0x60>
	{
		color = (IMAGE[i * 3]) | (IMAGE[i * 3 + 1] << 8) | ((IMAGE[i * 3 + 2] << 16));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <maxtrixAppDisplayBootImage+0x74>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <maxtrixAppDisplayBootImage+0x74>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4319      	orrs	r1, r3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <maxtrixAppDisplayBootImage+0x74>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	430b      	orrs	r3, r1
 8001e44:	603b      	str	r3, [r7, #0]
		GRBSetCell(i, color);
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 ff8d 	bl	8002d68 <GRBSetCell>
		color = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
	for(i = 0; i < MATRIX_SIZE; i++)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3301      	adds	r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e5e:	d3d8      	bcc.n	8001e12 <maxtrixAppDisplayBootImage+0x1a>
	}
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200001d6 	.word	0x200001d6
 8001e6c:	08006b28 	.word	0x08006b28

08001e70 <maxtrixAppGetGameMode>:

uint8_t maxtrixAppGetGameMode(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	return gGameMode;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <maxtrixAppGetGameMode+0x10>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000001 	.word	0x20000001

08001e84 <maxtrixAppGetShowMode>:

showMode_t maxtrixAppGetShowMode(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	return showMode;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <maxtrixAppGetShowMode+0x10>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	200001d6 	.word	0x200001d6

08001e98 <maxtrixAppSetGameScoreRefresh>:

void maxtrixAppSetGameScoreRefresh(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t j;

	RGBClearBuff();
 8001e9e:	f000 ff35 	bl	8002d0c <RGBClearBuff>
	uint32_t color = 0xFF0000;
 8001ea2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
	if(gGameMode == 1)
 8001ea8:	4bae      	ldr	r3, [pc, #696]	; (8002164 <maxtrixAppSetGameScoreRefresh+0x2cc>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 818d 	bne.w	80021cc <maxtrixAppSetGameScoreRefresh+0x334>
	{
		uint8_t hundreds = gScore[0] / 100;
 8001eb2:	4bad      	ldr	r3, [pc, #692]	; (8002168 <maxtrixAppSetGameScoreRefresh+0x2d0>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4aad      	ldr	r2, [pc, #692]	; (800216c <maxtrixAppSetGameScoreRefresh+0x2d4>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t tens = hundreds / 10;
 8001ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ec6:	4aaa      	ldr	r2, [pc, #680]	; (8002170 <maxtrixAppSetGameScoreRefresh+0x2d8>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t units = tens % 10;
 8001ed2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001ed6:	4ba6      	ldr	r3, [pc, #664]	; (8002170 <maxtrixAppSetGameScoreRefresh+0x2d8>)
 8001ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8001edc:	08d9      	lsrs	r1, r3, #3
 8001ede:	460b      	mov	r3, r1
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		uint8_t *pLevel1 = (uint8_t *)pNumber[hundreds];
 8001eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ef0:	4aa0      	ldr	r2, [pc, #640]	; (8002174 <maxtrixAppSetGameScoreRefresh+0x2dc>)
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61fb      	str	r3, [r7, #28]
		uint8_t *pLevel2 = (uint8_t *)pNumber[tens];
 8001ef8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001efc:	4a9d      	ldr	r2, [pc, #628]	; (8002174 <maxtrixAppSetGameScoreRefresh+0x2dc>)
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
		uint8_t *pLevel3 = (uint8_t *)pNumber[units];
 8001f04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f08:	4a9a      	ldr	r2, [pc, #616]	; (8002174 <maxtrixAppSetGameScoreRefresh+0x2dc>)
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	617b      	str	r3, [r7, #20]
		for(i = 0; i < sizeof(scoreImage); i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f14:	e027      	b.n	8001f66 <maxtrixAppSetGameScoreRefresh+0xce>
		{
			for(j = 0; j < 8; j++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f1c:	e01c      	b.n	8001f58 <maxtrixAppSetGameScoreRefresh+0xc0>
			{
				if((scoreImage[i]) & (0x01 << j))
 8001f1e:	4a96      	ldr	r2, [pc, #600]	; (8002178 <maxtrixAppSetGameScoreRefresh+0x2e0>)
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f2c:	fa42 f303 	asr.w	r3, r2, r3
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <maxtrixAppSetGameScoreRefresh+0xb6>
				{
					GRBSetCell(8 * i + j + 64 * 10 + 5, color);
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	00da      	lsls	r2, r3, #3
 8001f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f40:	4413      	add	r3, r2
 8001f42:	f203 2385 	addw	r3, r3, #645	; 0x285
 8001f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 ff0d 	bl	8002d68 <GRBSetCell>
			for(j = 0; j < 8; j++)
 8001f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f52:	3301      	adds	r3, #1
 8001f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f5c:	2b07      	cmp	r3, #7
 8001f5e:	d9de      	bls.n	8001f1e <maxtrixAppSetGameScoreRefresh+0x86>
		for(i = 0; i < sizeof(scoreImage); i++)
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	3301      	adds	r3, #1
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	2bff      	cmp	r3, #255	; 0xff
 8001f6a:	d9d4      	bls.n	8001f16 <maxtrixAppSetGameScoreRefresh+0x7e>
				}
			}
		}
		if(gScore[0] < 10)
 8001f6c:	4b7e      	ldr	r3, [pc, #504]	; (8002168 <maxtrixAppSetGameScoreRefresh+0x2d0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d832      	bhi.n	8001fda <maxtrixAppSetGameScoreRefresh+0x142>
		{
			for(i = 0; i < sizeof(num0); i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f78:	e02b      	b.n	8001fd2 <maxtrixAppSetGameScoreRefresh+0x13a>
			{
				if(i == 125)
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	2b7d      	cmp	r3, #125	; 0x7d
 8001f7e:	f000 8412 	beq.w	80027a6 <maxtrixAppSetGameScoreRefresh+0x90e>
				{
					break;
				}
				for(j = 0; j < 8; j++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f88:	e01c      	b.n	8001fc4 <maxtrixAppSetGameScoreRefresh+0x12c>
				{
					if((pLevel3[i]) & (0x01 << j))
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f98:	fa42 f303 	asr.w	r3, r2, r3
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <maxtrixAppSetGameScoreRefresh+0x122>
					{
						GRBSetCell(8 * i + j + 64 * 10 + 42,  color);
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	00da      	lsls	r2, r3, #3
 8001fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fac:	4413      	add	r3, r2
 8001fae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8001fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fed7 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8001fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	d9de      	bls.n	8001f8a <maxtrixAppSetGameScoreRefresh+0xf2>
			for(i = 0; i < sizeof(num0); i++)
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	3301      	adds	r3, #1
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	2bff      	cmp	r3, #255	; 0xff
 8001fd6:	d9d0      	bls.n	8001f7a <maxtrixAppSetGameScoreRefresh+0xe2>

				}
			}
		}
	}
}
 8001fd8:	e3e6      	b.n	80027a8 <maxtrixAppSetGameScoreRefresh+0x910>
		else if(gScore[0] < 100)
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <maxtrixAppSetGameScoreRefresh+0x2d0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b63      	cmp	r3, #99	; 0x63
 8001fe0:	d85c      	bhi.n	800209c <maxtrixAppSetGameScoreRefresh+0x204>
			for(i = 0; i < sizeof(num0); i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe6:	e027      	b.n	8002038 <maxtrixAppSetGameScoreRefresh+0x1a0>
				for(j = 0; j < 8; j++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001fee:	e01c      	b.n	800202a <maxtrixAppSetGameScoreRefresh+0x192>
					if((pLevel2[i]) & (0x01 << j))
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	4413      	add	r3, r2
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ffe:	fa42 f303 	asr.w	r3, r2, r3
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <maxtrixAppSetGameScoreRefresh+0x188>
						GRBSetCell(8 * i + j + 64 * 10 + 38,  color);
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	00da      	lsls	r2, r3, #3
 800200e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002012:	4413      	add	r3, r2
 8002014:	f203 23a6 	addw	r3, r3, #678	; 0x2a6
 8002018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fea4 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002024:	3301      	adds	r3, #1
 8002026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800202a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800202e:	2b07      	cmp	r3, #7
 8002030:	d9de      	bls.n	8001ff0 <maxtrixAppSetGameScoreRefresh+0x158>
			for(i = 0; i < sizeof(num0); i++)
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	3301      	adds	r3, #1
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d9d4      	bls.n	8001fe8 <maxtrixAppSetGameScoreRefresh+0x150>
			for(i = 0; i < sizeof(num0); i++)
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	e027      	b.n	8002094 <maxtrixAppSetGameScoreRefresh+0x1fc>
				for(j = 0; j < 8; j++)
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800204a:	e01c      	b.n	8002086 <maxtrixAppSetGameScoreRefresh+0x1ee>
					if((pLevel3[i]) & (0x01 << j))
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800205a:	fa42 f303 	asr.w	r3, r2, r3
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <maxtrixAppSetGameScoreRefresh+0x1e4>
						GRBSetCell(8 * i + j + 64 * 10 + 42,  color);
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	00da      	lsls	r2, r3, #3
 800206a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800206e:	4413      	add	r3, r2
 8002070:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8002074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fe76 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 800207c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002080:	3301      	adds	r3, #1
 8002082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800208a:	2b07      	cmp	r3, #7
 800208c:	d9de      	bls.n	800204c <maxtrixAppSetGameScoreRefresh+0x1b4>
			for(i = 0; i < sizeof(num0); i++)
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002090:	3301      	adds	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d9d4      	bls.n	8002044 <maxtrixAppSetGameScoreRefresh+0x1ac>
}
 800209a:	e385      	b.n	80027a8 <maxtrixAppSetGameScoreRefresh+0x910>
			for(i = 0; i < sizeof(num0); i++)
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a0:	e027      	b.n	80020f2 <maxtrixAppSetGameScoreRefresh+0x25a>
				for(j = 0; j < 8; j++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020a8:	e01c      	b.n	80020e4 <maxtrixAppSetGameScoreRefresh+0x24c>
					if((pLevel1[i]) & (0x01 << j))
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020b8:	fa42 f303 	asr.w	r3, r2, r3
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <maxtrixAppSetGameScoreRefresh+0x242>
						GRBSetCell(8 * i + j + 64 * 10 + 34,  color);
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	00da      	lsls	r2, r3, #3
 80020c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020cc:	4413      	add	r3, r2
 80020ce:	f203 23a2 	addw	r3, r3, #674	; 0x2a2
 80020d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fe47 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 80020da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020de:	3301      	adds	r3, #1
 80020e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d9de      	bls.n	80020aa <maxtrixAppSetGameScoreRefresh+0x212>
			for(i = 0; i < sizeof(num0); i++)
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	3301      	adds	r3, #1
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	2bff      	cmp	r3, #255	; 0xff
 80020f6:	d9d4      	bls.n	80020a2 <maxtrixAppSetGameScoreRefresh+0x20a>
			for(i = 0; i < sizeof(num0); i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fc:	e027      	b.n	800214e <maxtrixAppSetGameScoreRefresh+0x2b6>
				for(j = 0; j < 8; j++)
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002104:	e01c      	b.n	8002140 <maxtrixAppSetGameScoreRefresh+0x2a8>
					if((pLevel2[i]) & (0x01 << j))
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002114:	fa42 f303 	asr.w	r3, r2, r3
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <maxtrixAppSetGameScoreRefresh+0x29e>
						GRBSetCell(8 * i + j + 64 * 10 + 50,  color);
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	00da      	lsls	r2, r3, #3
 8002124:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002128:	4413      	add	r3, r2
 800212a:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 800212e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fe19 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800213a:	3301      	adds	r3, #1
 800213c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002144:	2b07      	cmp	r3, #7
 8002146:	d9de      	bls.n	8002106 <maxtrixAppSetGameScoreRefresh+0x26e>
			for(i = 0; i < sizeof(num0); i++)
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	3301      	adds	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	2bff      	cmp	r3, #255	; 0xff
 8002152:	d9d4      	bls.n	80020fe <maxtrixAppSetGameScoreRefresh+0x266>
			for(i = 0; i < sizeof(num0); i++)
 8002154:	2300      	movs	r3, #0
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002158:	e034      	b.n	80021c4 <maxtrixAppSetGameScoreRefresh+0x32c>
				for(j = 0; j < 8; j++)
 800215a:	2300      	movs	r3, #0
 800215c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002160:	e029      	b.n	80021b6 <maxtrixAppSetGameScoreRefresh+0x31e>
 8002162:	bf00      	nop
 8002164:	20000001 	.word	0x20000001
 8002168:	200001d4 	.word	0x200001d4
 800216c:	51eb851f 	.word	0x51eb851f
 8002170:	cccccccd 	.word	0xcccccccd
 8002174:	20000004 	.word	0x20000004
 8002178:	08008728 	.word	0x08008728
					if((pLevel3[i]) & (0x01 << j))
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800218a:	fa42 f303 	asr.w	r3, r2, r3
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <maxtrixAppSetGameScoreRefresh+0x314>
						GRBSetCell(8 * i + j + 64 * 10 + 52,  color);
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	00da      	lsls	r2, r3, #3
 800219a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800219e:	4413      	add	r3, r2
 80021a0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fdde 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 80021ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021b0:	3301      	adds	r3, #1
 80021b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d9de      	bls.n	800217c <maxtrixAppSetGameScoreRefresh+0x2e4>
			for(i = 0; i < sizeof(num0); i++)
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	3301      	adds	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	2bff      	cmp	r3, #255	; 0xff
 80021c8:	d9c7      	bls.n	800215a <maxtrixAppSetGameScoreRefresh+0x2c2>
}
 80021ca:	e2ed      	b.n	80027a8 <maxtrixAppSetGameScoreRefresh+0x910>
		uint8_t hundreds = gScore[0] / 100;
 80021cc:	4bba      	ldr	r3, [pc, #744]	; (80024b8 <maxtrixAppSetGameScoreRefresh+0x620>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4aba      	ldr	r2, [pc, #744]	; (80024bc <maxtrixAppSetGameScoreRefresh+0x624>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	74fb      	strb	r3, [r7, #19]
		uint8_t tens = hundreds / 10;
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	4ab8      	ldr	r2, [pc, #736]	; (80024c0 <maxtrixAppSetGameScoreRefresh+0x628>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	74bb      	strb	r3, [r7, #18]
		uint8_t units = tens % 10;
 80021e6:	7cba      	ldrb	r2, [r7, #18]
 80021e8:	4bb5      	ldr	r3, [pc, #724]	; (80024c0 <maxtrixAppSetGameScoreRefresh+0x628>)
 80021ea:	fba3 1302 	umull	r1, r3, r3, r2
 80021ee:	08d9      	lsrs	r1, r3, #3
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	747b      	strb	r3, [r7, #17]
		uint8_t *pLevel1 = (uint8_t *)pNumber[hundreds];
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	4ab1      	ldr	r2, [pc, #708]	; (80024c4 <maxtrixAppSetGameScoreRefresh+0x62c>)
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	60fb      	str	r3, [r7, #12]
		uint8_t *pLevel2 = (uint8_t *)pNumber[tens];
 8002206:	7cbb      	ldrb	r3, [r7, #18]
 8002208:	4aae      	ldr	r2, [pc, #696]	; (80024c4 <maxtrixAppSetGameScoreRefresh+0x62c>)
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	60bb      	str	r3, [r7, #8]
		uint8_t *pLevel3 = (uint8_t *)pNumber[units];
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	4aac      	ldr	r2, [pc, #688]	; (80024c4 <maxtrixAppSetGameScoreRefresh+0x62c>)
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	607b      	str	r3, [r7, #4]
		for(i = 0; i < sizeof(scoreImage); i++)
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221e:	e026      	b.n	800226e <maxtrixAppSetGameScoreRefresh+0x3d6>
			for(j = 0; j < 8; j++)
 8002220:	2300      	movs	r3, #0
 8002222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002226:	e01b      	b.n	8002260 <maxtrixAppSetGameScoreRefresh+0x3c8>
				if((scoreImage[i]) & (0x01 << j))
 8002228:	4aa7      	ldr	r2, [pc, #668]	; (80024c8 <maxtrixAppSetGameScoreRefresh+0x630>)
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002236:	fa42 f303 	asr.w	r3, r2, r3
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <maxtrixAppSetGameScoreRefresh+0x3be>
					GRBSetCell(8 * i + j + 64 * 2 + 5, color);
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	00da      	lsls	r2, r3, #3
 8002246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800224a:	4413      	add	r3, r2
 800224c:	3385      	adds	r3, #133	; 0x85
 800224e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fd89 	bl	8002d68 <GRBSetCell>
			for(j = 0; j < 8; j++)
 8002256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800225a:	3301      	adds	r3, #1
 800225c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002264:	2b07      	cmp	r3, #7
 8002266:	d9df      	bls.n	8002228 <maxtrixAppSetGameScoreRefresh+0x390>
		for(i = 0; i < sizeof(scoreImage); i++)
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	3301      	adds	r3, #1
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	2bff      	cmp	r3, #255	; 0xff
 8002272:	d9d5      	bls.n	8002220 <maxtrixAppSetGameScoreRefresh+0x388>
		if(gScore[0] < 10)
 8002274:	4b90      	ldr	r3, [pc, #576]	; (80024b8 <maxtrixAppSetGameScoreRefresh+0x620>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b09      	cmp	r3, #9
 800227a:	d82d      	bhi.n	80022d8 <maxtrixAppSetGameScoreRefresh+0x440>
			for(i = 0; i < sizeof(num0); i++)
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002280:	e026      	b.n	80022d0 <maxtrixAppSetGameScoreRefresh+0x438>
				for(j = 0; j < 8; j++)
 8002282:	2300      	movs	r3, #0
 8002284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002288:	e01b      	b.n	80022c2 <maxtrixAppSetGameScoreRefresh+0x42a>
					if((pLevel3[i]) & (0x01 << j))
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002298:	fa42 f303 	asr.w	r3, r2, r3
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d009      	beq.n	80022b8 <maxtrixAppSetGameScoreRefresh+0x420>
						GRBSetCell(8 * i + j + 64 * 2 + 42,  color);
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	00da      	lsls	r2, r3, #3
 80022a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022ac:	4413      	add	r3, r2
 80022ae:	33aa      	adds	r3, #170	; 0xaa
 80022b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fd58 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 80022b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022bc:	3301      	adds	r3, #1
 80022be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022c6:	2b07      	cmp	r3, #7
 80022c8:	d9df      	bls.n	800228a <maxtrixAppSetGameScoreRefresh+0x3f2>
			for(i = 0; i < sizeof(num0); i++)
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	3301      	adds	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	2bff      	cmp	r3, #255	; 0xff
 80022d4:	d9d5      	bls.n	8002282 <maxtrixAppSetGameScoreRefresh+0x3ea>
 80022d6:	e0e5      	b.n	80024a4 <maxtrixAppSetGameScoreRefresh+0x60c>
		else if(gScore[0] < 100)
 80022d8:	4b77      	ldr	r3, [pc, #476]	; (80024b8 <maxtrixAppSetGameScoreRefresh+0x620>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b63      	cmp	r3, #99	; 0x63
 80022de:	d85a      	bhi.n	8002396 <maxtrixAppSetGameScoreRefresh+0x4fe>
			for(i = 0; i < sizeof(num0); i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e4:	e026      	b.n	8002334 <maxtrixAppSetGameScoreRefresh+0x49c>
				for(j = 0; j < 8; j++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ec:	e01b      	b.n	8002326 <maxtrixAppSetGameScoreRefresh+0x48e>
					if((pLevel2[i]) & (0x01 << j))
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022fc:	fa42 f303 	asr.w	r3, r2, r3
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <maxtrixAppSetGameScoreRefresh+0x484>
						GRBSetCell(8 * i + j + 64 * 2 + 38,  color);
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	00da      	lsls	r2, r3, #3
 800230c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002310:	4413      	add	r3, r2
 8002312:	33a6      	adds	r3, #166	; 0xa6
 8002314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fd26 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 800231c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002320:	3301      	adds	r3, #1
 8002322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800232a:	2b07      	cmp	r3, #7
 800232c:	d9df      	bls.n	80022ee <maxtrixAppSetGameScoreRefresh+0x456>
			for(i = 0; i < sizeof(num0); i++)
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	3301      	adds	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2bff      	cmp	r3, #255	; 0xff
 8002338:	d9d5      	bls.n	80022e6 <maxtrixAppSetGameScoreRefresh+0x44e>
			for(i = 0; i < sizeof(num0); i++)
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233e:	e026      	b.n	800238e <maxtrixAppSetGameScoreRefresh+0x4f6>
				for(j = 0; j < 8; j++)
 8002340:	2300      	movs	r3, #0
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002346:	e01b      	b.n	8002380 <maxtrixAppSetGameScoreRefresh+0x4e8>
					if((pLevel3[i]) & (0x01 << j))
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002356:	fa42 f303 	asr.w	r3, r2, r3
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <maxtrixAppSetGameScoreRefresh+0x4de>
						GRBSetCell(8 * i + j + 64 * 2 + 42,  color);
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	00da      	lsls	r2, r3, #3
 8002366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800236a:	4413      	add	r3, r2
 800236c:	33aa      	adds	r3, #170	; 0xaa
 800236e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fcf9 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800237a:	3301      	adds	r3, #1
 800237c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002384:	2b07      	cmp	r3, #7
 8002386:	d9df      	bls.n	8002348 <maxtrixAppSetGameScoreRefresh+0x4b0>
			for(i = 0; i < sizeof(num0); i++)
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	3301      	adds	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	2bff      	cmp	r3, #255	; 0xff
 8002392:	d9d5      	bls.n	8002340 <maxtrixAppSetGameScoreRefresh+0x4a8>
 8002394:	e086      	b.n	80024a4 <maxtrixAppSetGameScoreRefresh+0x60c>
			for(i = 0; i < sizeof(num0); i++)
 8002396:	2300      	movs	r3, #0
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239a:	e026      	b.n	80023ea <maxtrixAppSetGameScoreRefresh+0x552>
				for(j = 0; j < 8; j++)
 800239c:	2300      	movs	r3, #0
 800239e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023a2:	e01b      	b.n	80023dc <maxtrixAppSetGameScoreRefresh+0x544>
					if((pLevel1[i]) & (0x01 << j))
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023b2:	fa42 f303 	asr.w	r3, r2, r3
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <maxtrixAppSetGameScoreRefresh+0x53a>
						GRBSetCell(8 * i + j + 64 * 2 + 34,  color);
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	00da      	lsls	r2, r3, #3
 80023c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023c6:	4413      	add	r3, r2
 80023c8:	33a2      	adds	r3, #162	; 0xa2
 80023ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fccb 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 80023d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023d6:	3301      	adds	r3, #1
 80023d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	d9df      	bls.n	80023a4 <maxtrixAppSetGameScoreRefresh+0x50c>
			for(i = 0; i < sizeof(num0); i++)
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	3301      	adds	r3, #1
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2bff      	cmp	r3, #255	; 0xff
 80023ee:	d9d5      	bls.n	800239c <maxtrixAppSetGameScoreRefresh+0x504>
			for(i = 0; i < sizeof(num0); i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f4:	e026      	b.n	8002444 <maxtrixAppSetGameScoreRefresh+0x5ac>
				for(j = 0; j < 8; j++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023fc:	e01b      	b.n	8002436 <maxtrixAppSetGameScoreRefresh+0x59e>
					if((pLevel2[i]) & (0x01 << j))
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800240c:	fa42 f303 	asr.w	r3, r2, r3
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <maxtrixAppSetGameScoreRefresh+0x594>
						GRBSetCell(8 * i + j + 64 * 2 + 50,  color);
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002420:	4413      	add	r3, r2
 8002422:	33b2      	adds	r3, #178	; 0xb2
 8002424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fc9e 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 800242c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002430:	3301      	adds	r3, #1
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800243a:	2b07      	cmp	r3, #7
 800243c:	d9df      	bls.n	80023fe <maxtrixAppSetGameScoreRefresh+0x566>
			for(i = 0; i < sizeof(num0); i++)
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3301      	adds	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d9d5      	bls.n	80023f6 <maxtrixAppSetGameScoreRefresh+0x55e>
			for(i = 0; i < sizeof(num0); i++)
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244e:	e026      	b.n	800249e <maxtrixAppSetGameScoreRefresh+0x606>
				for(j = 0; j < 8; j++)
 8002450:	2300      	movs	r3, #0
 8002452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002456:	e01b      	b.n	8002490 <maxtrixAppSetGameScoreRefresh+0x5f8>
					if((pLevel3[i]) & (0x01 << j))
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002466:	fa42 f303 	asr.w	r3, r2, r3
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <maxtrixAppSetGameScoreRefresh+0x5ee>
						GRBSetCell(8 * i + j + 64 * 2 + 52,  color);
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	00da      	lsls	r2, r3, #3
 8002476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800247a:	4413      	add	r3, r2
 800247c:	33b4      	adds	r3, #180	; 0xb4
 800247e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fc71 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800248a:	3301      	adds	r3, #1
 800248c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002494:	2b07      	cmp	r3, #7
 8002496:	d9df      	bls.n	8002458 <maxtrixAppSetGameScoreRefresh+0x5c0>
			for(i = 0; i < sizeof(num0); i++)
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	3301      	adds	r3, #1
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	2bff      	cmp	r3, #255	; 0xff
 80024a2:	d9d5      	bls.n	8002450 <maxtrixAppSetGameScoreRefresh+0x5b8>
		color = 0x00FF00;
 80024a4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
		for(i = 0; i < sizeof(num0); i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	e031      	b.n	8002514 <maxtrixAppSetGameScoreRefresh+0x67c>
			for(j = 0; j < 8; j++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024b6:	e026      	b.n	8002506 <maxtrixAppSetGameScoreRefresh+0x66e>
 80024b8:	200001d4 	.word	0x200001d4
 80024bc:	51eb851f 	.word	0x51eb851f
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	20000004 	.word	0x20000004
 80024c8:	08008728 	.word	0x08008728
				if((scoreImage[i]) & (0x01 << j))
 80024cc:	4ab8      	ldr	r2, [pc, #736]	; (80027b0 <maxtrixAppSetGameScoreRefresh+0x918>)
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024da:	fa42 f303 	asr.w	r3, r2, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <maxtrixAppSetGameScoreRefresh+0x664>
					GRBSetCell(8 * i + j + 64 * 18 + 5, color);
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	00da      	lsls	r2, r3, #3
 80024ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024ee:	4413      	add	r3, r2
 80024f0:	f203 4385 	addw	r3, r3, #1157	; 0x485
 80024f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fc36 	bl	8002d68 <GRBSetCell>
			for(j = 0; j < 8; j++)
 80024fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002500:	3301      	adds	r3, #1
 8002502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800250a:	2b07      	cmp	r3, #7
 800250c:	d9de      	bls.n	80024cc <maxtrixAppSetGameScoreRefresh+0x634>
		for(i = 0; i < sizeof(num0); i++)
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	3301      	adds	r3, #1
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2bff      	cmp	r3, #255	; 0xff
 8002518:	d9ca      	bls.n	80024b0 <maxtrixAppSetGameScoreRefresh+0x618>
		hundreds = gScore[0] / 100;
 800251a:	4ba6      	ldr	r3, [pc, #664]	; (80027b4 <maxtrixAppSetGameScoreRefresh+0x91c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4aa6      	ldr	r2, [pc, #664]	; (80027b8 <maxtrixAppSetGameScoreRefresh+0x920>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	74fb      	strb	r3, [r7, #19]
		tens = hundreds / 10;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	4aa4      	ldr	r2, [pc, #656]	; (80027bc <maxtrixAppSetGameScoreRefresh+0x924>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	74bb      	strb	r3, [r7, #18]
		units = tens % 10;
 8002534:	7cba      	ldrb	r2, [r7, #18]
 8002536:	4ba1      	ldr	r3, [pc, #644]	; (80027bc <maxtrixAppSetGameScoreRefresh+0x924>)
 8002538:	fba3 1302 	umull	r1, r3, r3, r2
 800253c:	08d9      	lsrs	r1, r3, #3
 800253e:	460b      	mov	r3, r1
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	747b      	strb	r3, [r7, #17]
		pLevel1 = (uint8_t *)pNumber[hundreds];
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	4a9c      	ldr	r2, [pc, #624]	; (80027c0 <maxtrixAppSetGameScoreRefresh+0x928>)
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	60fb      	str	r3, [r7, #12]
		pLevel2 = (uint8_t *)pNumber[tens];
 8002554:	7cbb      	ldrb	r3, [r7, #18]
 8002556:	4a9a      	ldr	r2, [pc, #616]	; (80027c0 <maxtrixAppSetGameScoreRefresh+0x928>)
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	60bb      	str	r3, [r7, #8]
		pLevel3 = (uint8_t *)pNumber[units];
 800255e:	7c7b      	ldrb	r3, [r7, #17]
 8002560:	4a97      	ldr	r2, [pc, #604]	; (80027c0 <maxtrixAppSetGameScoreRefresh+0x928>)
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	607b      	str	r3, [r7, #4]
		if(gScore[1] < 10)
 8002568:	4b92      	ldr	r3, [pc, #584]	; (80027b4 <maxtrixAppSetGameScoreRefresh+0x91c>)
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d82e      	bhi.n	80025ce <maxtrixAppSetGameScoreRefresh+0x736>
			for(i = 0; i < sizeof(num0); i++)
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002574:	e027      	b.n	80025c6 <maxtrixAppSetGameScoreRefresh+0x72e>
				for(j = 0; j < 8; j++)
 8002576:	2300      	movs	r3, #0
 8002578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800257c:	e01c      	b.n	80025b8 <maxtrixAppSetGameScoreRefresh+0x720>
					if((pLevel3[i]) & (0x01 << j))
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800258c:	fa42 f303 	asr.w	r3, r2, r3
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <maxtrixAppSetGameScoreRefresh+0x716>
						GRBSetCell(8 * i + j + 64 * 18 + 42,  color);
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	00da      	lsls	r2, r3, #3
 800259c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025a0:	4413      	add	r3, r2
 80025a2:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 80025a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fbdd 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 80025ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025b2:	3301      	adds	r3, #1
 80025b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d9de      	bls.n	800257e <maxtrixAppSetGameScoreRefresh+0x6e6>
			for(i = 0; i < sizeof(num0); i++)
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	3301      	adds	r3, #1
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	2bff      	cmp	r3, #255	; 0xff
 80025ca:	d9d4      	bls.n	8002576 <maxtrixAppSetGameScoreRefresh+0x6de>
}
 80025cc:	e0ec      	b.n	80027a8 <maxtrixAppSetGameScoreRefresh+0x910>
		else if(gScore[1] < 100)
 80025ce:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <maxtrixAppSetGameScoreRefresh+0x91c>)
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	2b63      	cmp	r3, #99	; 0x63
 80025d4:	d85c      	bhi.n	8002690 <maxtrixAppSetGameScoreRefresh+0x7f8>
			for(i = 0; i < sizeof(num0); i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025da:	e027      	b.n	800262c <maxtrixAppSetGameScoreRefresh+0x794>
				for(j = 0; j < 8; j++)
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025e2:	e01c      	b.n	800261e <maxtrixAppSetGameScoreRefresh+0x786>
					if((pLevel2[i]) & (0x01 << j))
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025f2:	fa42 f303 	asr.w	r3, r2, r3
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <maxtrixAppSetGameScoreRefresh+0x77c>
						GRBSetCell(8 * i + j + 64 * 18 + 38,  color);
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	00da      	lsls	r2, r3, #3
 8002602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002606:	4413      	add	r3, r2
 8002608:	f203 43a6 	addw	r3, r3, #1190	; 0x4a6
 800260c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fbaa 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002618:	3301      	adds	r3, #1
 800261a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800261e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002622:	2b07      	cmp	r3, #7
 8002624:	d9de      	bls.n	80025e4 <maxtrixAppSetGameScoreRefresh+0x74c>
			for(i = 0; i < sizeof(num0); i++)
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	3301      	adds	r3, #1
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d9d4      	bls.n	80025dc <maxtrixAppSetGameScoreRefresh+0x744>
			for(i = 0; i < sizeof(num0); i++)
 8002632:	2300      	movs	r3, #0
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002636:	e027      	b.n	8002688 <maxtrixAppSetGameScoreRefresh+0x7f0>
				for(j = 0; j < 8; j++)
 8002638:	2300      	movs	r3, #0
 800263a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800263e:	e01c      	b.n	800267a <maxtrixAppSetGameScoreRefresh+0x7e2>
					if((pLevel3[i]) & (0x01 << j))
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800264e:	fa42 f303 	asr.w	r3, r2, r3
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <maxtrixAppSetGameScoreRefresh+0x7d8>
						GRBSetCell(8 * i + j + 64 * 18 + 42,  color);
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	00da      	lsls	r2, r3, #3
 800265e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002662:	4413      	add	r3, r2
 8002664:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8002668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fb7c 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002670:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002674:	3301      	adds	r3, #1
 8002676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800267a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800267e:	2b07      	cmp	r3, #7
 8002680:	d9de      	bls.n	8002640 <maxtrixAppSetGameScoreRefresh+0x7a8>
			for(i = 0; i < sizeof(num0); i++)
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	3301      	adds	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2bff      	cmp	r3, #255	; 0xff
 800268c:	d9d4      	bls.n	8002638 <maxtrixAppSetGameScoreRefresh+0x7a0>
}
 800268e:	e08b      	b.n	80027a8 <maxtrixAppSetGameScoreRefresh+0x910>
			for(i = 0; i < sizeof(num0); i++)
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002694:	e027      	b.n	80026e6 <maxtrixAppSetGameScoreRefresh+0x84e>
				for(j = 0; j < 8; j++)
 8002696:	2300      	movs	r3, #0
 8002698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800269c:	e01c      	b.n	80026d8 <maxtrixAppSetGameScoreRefresh+0x840>
					if((pLevel1[i]) & (0x01 << j))
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026ac:	fa42 f303 	asr.w	r3, r2, r3
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <maxtrixAppSetGameScoreRefresh+0x836>
						GRBSetCell(8 * i + j + 64 * 18 + 34,  color);
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	00da      	lsls	r2, r3, #3
 80026bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 43a2 	addw	r3, r3, #1186	; 0x4a2
 80026c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fb4d 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 80026ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026d2:	3301      	adds	r3, #1
 80026d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d9de      	bls.n	800269e <maxtrixAppSetGameScoreRefresh+0x806>
			for(i = 0; i < sizeof(num0); i++)
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	3301      	adds	r3, #1
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2bff      	cmp	r3, #255	; 0xff
 80026ea:	d9d4      	bls.n	8002696 <maxtrixAppSetGameScoreRefresh+0x7fe>
			for(i = 0; i < sizeof(num0); i++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f0:	e027      	b.n	8002742 <maxtrixAppSetGameScoreRefresh+0x8aa>
				for(j = 0; j < 8; j++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026f8:	e01c      	b.n	8002734 <maxtrixAppSetGameScoreRefresh+0x89c>
					if((pLevel2[i]) & (0x01 << j))
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002708:	fa42 f303 	asr.w	r3, r2, r3
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <maxtrixAppSetGameScoreRefresh+0x892>
						GRBSetCell(8 * i + j + 64 * 18 + 50,  color);
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	00da      	lsls	r2, r3, #3
 8002718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800271c:	4413      	add	r3, r2
 800271e:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
 8002722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fb1f 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 800272a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800272e:	3301      	adds	r3, #1
 8002730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002738:	2b07      	cmp	r3, #7
 800273a:	d9de      	bls.n	80026fa <maxtrixAppSetGameScoreRefresh+0x862>
			for(i = 0; i < sizeof(num0); i++)
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	3301      	adds	r3, #1
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	2bff      	cmp	r3, #255	; 0xff
 8002746:	d9d4      	bls.n	80026f2 <maxtrixAppSetGameScoreRefresh+0x85a>
			for(i = 0; i < sizeof(num0); i++)
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274c:	e027      	b.n	800279e <maxtrixAppSetGameScoreRefresh+0x906>
				for(j = 0; j < 8; j++)
 800274e:	2300      	movs	r3, #0
 8002750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002754:	e01c      	b.n	8002790 <maxtrixAppSetGameScoreRefresh+0x8f8>
					if((pLevel3[i]) & (0x01 << j))
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	4413      	add	r3, r2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002764:	fa42 f303 	asr.w	r3, r2, r3
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <maxtrixAppSetGameScoreRefresh+0x8ee>
						GRBSetCell(8 * i + j + 64 * 18 + 52,  color);
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	00da      	lsls	r2, r3, #3
 8002774:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002778:	4413      	add	r3, r2
 800277a:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800277e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f000 faf1 	bl	8002d68 <GRBSetCell>
				for(j = 0; j < 8; j++)
 8002786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800278a:	3301      	adds	r3, #1
 800278c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002790:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002794:	2b07      	cmp	r3, #7
 8002796:	d9de      	bls.n	8002756 <maxtrixAppSetGameScoreRefresh+0x8be>
			for(i = 0; i < sizeof(num0); i++)
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	3301      	adds	r3, #1
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	2bff      	cmp	r3, #255	; 0xff
 80027a2:	d9d4      	bls.n	800274e <maxtrixAppSetGameScoreRefresh+0x8b6>
}
 80027a4:	e000      	b.n	80027a8 <maxtrixAppSetGameScoreRefresh+0x910>
					break;
 80027a6:	bf00      	nop
}
 80027a8:	bf00      	nop
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	08008728 	.word	0x08008728
 80027b4:	200001d4 	.word	0x200001d4
 80027b8:	51eb851f 	.word	0x51eb851f
 80027bc:	cccccccd 	.word	0xcccccccd
 80027c0:	20000004 	.word	0x20000004

080027c4 <maxtrixAppGameStart>:

void maxtrixAppGameStart(void)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af02      	add	r7, sp, #8
	gScore[0] = 0;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <maxtrixAppGameStart+0x6c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
	gScore[1] = 0;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <maxtrixAppGameStart+0x6c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	705a      	strb	r2, [r3, #1]
	showMode = showScores;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <maxtrixAppGameStart+0x70>)
 80027d8:	2203      	movs	r2, #3
 80027da:	701a      	strb	r2, [r3, #0]
	gGameStatus = true;
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <maxtrixAppGameStart+0x74>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
	maxtrixAppSetGameScoreRefresh();
 80027e2:	f7ff fb59 	bl	8001e98 <maxtrixAppSetGameScoreRefresh>
	xTimerChangePeriod(xTimers, 4000 - 200*(maxtrixAppGetGameLevel()-1), 0);
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <maxtrixAppGameStart+0x78>)
 80027e8:	681c      	ldr	r4, [r3, #0]
 80027ea:	f7ff fa61 	bl	8001cb0 <maxtrixAppGetGameLevel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	3b01      	subs	r3, #1
 80027f2:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80027fe:	461a      	mov	r2, r3
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	2104      	movs	r1, #4
 8002808:	4620      	mov	r0, r4
 800280a:	f002 fd47 	bl	800529c <xTimerGenericCommand>
	xTimerStart(xTimers, 0);
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <maxtrixAppGameStart+0x78>)
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	f002 f9a5 	bl	8004b60 <xTaskGetTickCount>
 8002816:	4602      	mov	r2, r0
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2300      	movs	r3, #0
 800281e:	2101      	movs	r1, #1
 8002820:	4620      	mov	r0, r4
 8002822:	f002 fd3b 	bl	800529c <xTimerGenericCommand>
}
 8002826:	bf00      	nop
 8002828:	3704      	adds	r7, #4
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	bf00      	nop
 8002830:	200001d4 	.word	0x200001d4
 8002834:	200001d6 	.word	0x200001d6
 8002838:	200001d0 	.word	0x200001d0
 800283c:	200001d8 	.word	0x200001d8

08002840 <maxtrixAppGameStop>:

void maxtrixAppGameStop(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af02      	add	r7, sp, #8
	gGameStatus = 0;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <maxtrixAppGameStop+0x28>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
	maxtrixAppDisplayBootImage();
 800284c:	f7ff fad4 	bl	8001df8 <maxtrixAppDisplayBootImage>
	xTimerStop(xTimers, 100);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <maxtrixAppGameStop+0x2c>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	2364      	movs	r3, #100	; 0x64
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	2200      	movs	r2, #0
 800285c:	2103      	movs	r1, #3
 800285e:	f002 fd1d 	bl	800529c <xTimerGenericCommand>
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200001d0 	.word	0x200001d0
 800286c:	200001d8 	.word	0x200001d8

08002870 <maxtrixAppGetGameStatus>:

bool maxtrixAppGetGameStatus(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
	return gGameStatus;
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <maxtrixAppGetGameStatus+0x10>)
 8002876:	781b      	ldrb	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	200001d0 	.word	0x200001d0

08002884 <vTimerCallback>:
		gScore[player]++;
	}
}

static void vTimerCallback(void *p)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    can_frame_t frame;
    salverId1 = 0;
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <vTimerCallback+0xb8>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
    salverId2 = 0;
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <vTimerCallback+0xbc>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
    frame.id = 1;
 8002898:	2301      	movs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
    frame.length = 8;
 800289c:	7abb      	ldrb	r3, [r7, #10]
 800289e:	2208      	movs	r2, #8
 80028a0:	f362 0303 	bfi	r3, r2, #0, #4
 80028a4:	72bb      	strb	r3, [r7, #10]
    srand(xTaskGetTickCount());
 80028a6:	f002 f95b 	bl	8004b60 <xTaskGetTickCount>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 ff5b 	bl	8003768 <srand>
    if(gGameMode == 2)
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <vTimerCallback+0xc0>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d124      	bne.n	8002904 <vTimerCallback+0x80>
    {
        salverId1 = rand()%8 + 1;
 80028ba:	f000 ff41 	bl	8003740 <rand>
 80028be:	4603      	mov	r3, r0
 80028c0:	425a      	negs	r2, r3
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	f002 0207 	and.w	r2, r2, #7
 80028ca:	bf58      	it	pl
 80028cc:	4253      	negpl	r3, r2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <vTimerCallback+0xb8>)
 80028d6:	701a      	strb	r2, [r3, #0]
        salverId2 = rand()%8 + 1;
 80028d8:	f000 ff32 	bl	8003740 <rand>
 80028dc:	4603      	mov	r3, r0
 80028de:	425a      	negs	r2, r3
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	f002 0207 	and.w	r2, r2, #7
 80028e8:	bf58      	it	pl
 80028ea:	4253      	negpl	r3, r2
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <vTimerCallback+0xbc>)
 80028f4:	701a      	strb	r2, [r3, #0]
        frame.dataByte0 = salverId1;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <vTimerCallback+0xb8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	74fb      	strb	r3, [r7, #19]
        frame.dataByte1 = salverId2;
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <vTimerCallback+0xbc>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	74bb      	strb	r3, [r7, #18]
 8002902:	e011      	b.n	8002928 <vTimerCallback+0xa4>
    }
    else
    {
        salverId1 = rand()%8 + 1;
 8002904:	f000 ff1c 	bl	8003740 <rand>
 8002908:	4603      	mov	r3, r0
 800290a:	425a      	negs	r2, r3
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	f002 0207 	and.w	r2, r2, #7
 8002914:	bf58      	it	pl
 8002916:	4253      	negpl	r3, r2
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <vTimerCallback+0xb8>)
 8002920:	701a      	strb	r2, [r3, #0]
        frame.dataByte0 = salverId1;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <vTimerCallback+0xb8>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	74fb      	strb	r3, [r7, #19]
    }
	CanAppSendMsg(&frame);
 8002928:	f107 0308 	add.w	r3, r7, #8
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe ffd5 	bl	80018dc <CanAppSendMsg>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200001dc 	.word	0x200001dc
 8002940:	200001dd 	.word	0x200001dd
 8002944:	20000001 	.word	0x20000001

08002948 <maxtriAppInit>:
	}
	maxtrixAppSetGameScoreRefresh();
}

void maxtriAppInit(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af02      	add	r7, sp, #8
	xTimers = xTimerCreate("maxtAppTimer", pdMS_TO_TICKS(4000), pdTRUE, (void*)0, vTimerCallback);
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <maxtriAppInit+0x28>)
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	2201      	movs	r2, #1
 8002956:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <maxtriAppInit+0x2c>)
 800295c:	f002 fc5c 	bl	8005218 <xTimerCreate>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <maxtriAppInit+0x30>)
 8002964:	601a      	str	r2, [r3, #0]
	if(xTimers == NULL)
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <maxtriAppInit+0x30>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
	{
		return;
	}
}
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	08002885 	.word	0x08002885
 8002974:	08006aa0 	.word	0x08006aa0
 8002978:	200001d8 	.word	0x200001d8

0800297c <NMI_Handler>:
#include "stm32f10x_it.h" 


 
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HardFault_Handler>:
 
void HardFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800298c:	e7fe      	b.n	800298c <HardFault_Handler+0x4>

0800298e <MemManage_Handler>:
  {
  }
}
 
void MemManage_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002992:	e7fe      	b.n	8002992 <MemManage_Handler+0x4>

08002994 <BusFault_Handler>:
  }
}

 
void BusFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002998:	e7fe      	b.n	8002998 <BusFault_Handler+0x4>

0800299a <UsageFault_Handler>:
  {
  }
}
 
void UsageFault_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800299e:	e7fe      	b.n	800299e <UsageFault_Handler+0x4>

080029a0 <DebugMon_Handler>:
//void SVC_Handler(void)
//{
//}
 
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <RGBProcessor>:
//RGB_t RGBDisplayTmp[MATRIX_SIZE];
// ----- Timing definitions -------------------------------------------------


void RGBProcessor(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	//memcpy(RGBDisplayTmp, RGB, sizeof(RGB_t));
	RGBDisplayBuffer(RGB);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <RGBProcessor+0x10>)
 80029b2:	f000 f805 	bl	80029c0 <RGBDisplayBuffer>
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20004860 	.word	0x20004860

080029c0 <RGBDisplayBuffer>:
/**
 * Displays the buffer on the display using binary encoding (PWM equivalent).
 */

void RGBDisplayBuffer(RGB_t buffer[])
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	for(int s = 0; s < scan; s++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e058      	b.n	8002a80 <RGBDisplayBuffer+0xc0>
	{
		RGBSetRow(s);
 80029ce:	69f8      	ldr	r0, [r7, #28]
 80029d0:	f000 f862 	bl	8002a98 <RGBSetRow>
		int plane, x;
		int offset1 = MATRIX_WIDTH * s;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	019b      	lsls	r3, r3, #6
 80029d8:	613b      	str	r3, [r7, #16]
		int offset2 = MATRIX_WIDTH * (s + scan);
 80029da:	2210      	movs	r2, #16
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	60fb      	str	r3, [r7, #12]
		for(plane = 0; plane < 8; plane++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e044      	b.n	8002a74 <RGBDisplayBuffer+0xb4>
		{
			for(x = 0; x < MATRIX_WIDTH; x++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e034      	b.n	8002a5a <RGBDisplayBuffer+0x9a>
			{
				RGBSetRGB(buffer[offset1 + x], buffer[offset2 + x], plane);
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	4413      	add	r3, r2
 80029f6:	461a      	mov	r2, r3
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	440a      	add	r2, r1
 8002a08:	4611      	mov	r1, r2
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	0052      	lsls	r2, r2, #1
 8002a0e:	440a      	add	r2, r1
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	440a      	add	r2, r1
 8002a14:	69b9      	ldr	r1, [r7, #24]
 8002a16:	b2cc      	uxtb	r4, r1
 8002a18:	7811      	ldrb	r1, [r2, #0]
 8002a1a:	7850      	ldrb	r0, [r2, #1]
 8002a1c:	0200      	lsls	r0, r0, #8
 8002a1e:	4301      	orrs	r1, r0
 8002a20:	7892      	ldrb	r2, [r2, #2]
 8002a22:	0412      	lsls	r2, r2, #16
 8002a24:	430a      	orrs	r2, r1
 8002a26:	2100      	movs	r1, #0
 8002a28:	f362 0117 	bfi	r1, r2, #0, #24
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	7858      	ldrb	r0, [r3, #1]
 8002a30:	0200      	lsls	r0, r0, #8
 8002a32:	4302      	orrs	r2, r0
 8002a34:	789b      	ldrb	r3, [r3, #2]
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f362 0317 	bfi	r3, r2, #0, #24
 8002a40:	4622      	mov	r2, r4
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f864 	bl	8002b10 <RGBSetRGB>
				CLK_TOGGLE;
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <RGBDisplayBuffer+0xd0>)
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <RGBDisplayBuffer+0xd0>)
 8002a50:	2210      	movs	r2, #16
 8002a52:	615a      	str	r2, [r3, #20]
			for(x = 0; x < MATRIX_WIDTH; x++)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b3f      	cmp	r3, #63	; 0x3f
 8002a5e:	ddc7      	ble.n	80029f0 <RGBDisplayBuffer+0x30>
			}
			RGBShowLine(waits[plane]);
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <RGBDisplayBuffer+0xd4>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f8c1 	bl	8002bf0 <RGBShowLine>
		for(plane = 0; plane < 8; plane++)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	ddb7      	ble.n	80029ea <RGBDisplayBuffer+0x2a>
	for(int s = 0; s < scan; s++)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	2210      	movs	r2, #16
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	dba2      	blt.n	80029ce <RGBDisplayBuffer+0xe>
		}
	}
}
 8002a88:	bf00      	nop
 8002a8a:	3724      	adds	r7, #36	; 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	40011800 	.word	0x40011800
 8002a94:	08009228 	.word	0x08009228

08002a98 <RGBSetRow>:

/**
 * sets the row on the row gpio ports
 */
void RGBSetRow(int row)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	// todo: perhaps a lookup table could give us a tiny boost here.

	if(row & 0b0001)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <RGBSetRow+0x1a>
		MTX_PORT_SELSET->BSRR = MTX_PA;
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <RGBSetRow+0x74>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	611a      	str	r2, [r3, #16]
 8002ab0:	e002      	b.n	8002ab8 <RGBSetRow+0x20>
	else
		MTX_PORT_SELSET->BRR = MTX_PA;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <RGBSetRow+0x74>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	615a      	str	r2, [r3, #20]

	if(row & 0b0010)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <RGBSetRow+0x32>
		MTX_PORT_SELSET->BSRR = MTX_PB;
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <RGBSetRow+0x74>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	611a      	str	r2, [r3, #16]
 8002ac8:	e002      	b.n	8002ad0 <RGBSetRow+0x38>
	else
		MTX_PORT_SELSET->BRR = MTX_PB;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <RGBSetRow+0x74>)
 8002acc:	2202      	movs	r2, #2
 8002ace:	615a      	str	r2, [r3, #20]

	if(row & 0b0100)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <RGBSetRow+0x4a>
		MTX_PORT_SELSET->BSRR = MTX_PC;
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <RGBSetRow+0x74>)
 8002adc:	2204      	movs	r2, #4
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	e002      	b.n	8002ae8 <RGBSetRow+0x50>
	else
		MTX_PORT_SELSET->BRR = MTX_PC;
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <RGBSetRow+0x74>)
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	615a      	str	r2, [r3, #20]

	if(row & 0b1000)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <RGBSetRow+0x62>
		MTX_PORT_SELSET->BSRR = MTX_PD;
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <RGBSetRow+0x74>)
 8002af4:	2208      	movs	r2, #8
 8002af6:	611a      	str	r2, [r3, #16]
	else
		MTX_PORT_SELSET->BRR = MTX_PD;
}
 8002af8:	e002      	b.n	8002b00 <RGBSetRow+0x68>
		MTX_PORT_SELSET->BRR = MTX_PD;
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <RGBSetRow+0x74>)
 8002afc:	2208      	movs	r2, #8
 8002afe:	615a      	str	r2, [r3, #20]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40011800 	.word	0x40011800

08002b10 <RGBSetRGB>:

/**
 * loads rgb1 and rgb2 gpio ports with the given bitplane
 */
void RGBSetRGB(RGB_t rgb1, RGB_t rgb2, uint8_t plane)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	// using bitshifting seems to be faster due to gcc optimization
	// than using a bitmask lookup table here.

	if(rgb1.r & (1 << plane))
 8002b1e:	7b3b      	ldrb	r3, [r7, #12]
 8002b20:	461a      	mov	r2, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	fa42 f303 	asr.w	r3, r2, r3
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <RGBSetRGB+0x28>
		MTX_PORT0->BSRR = MTX_PR0;
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <RGBSetRGB+0xd8>)
 8002b32:	2208      	movs	r2, #8
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e002      	b.n	8002b3e <RGBSetRGB+0x2e>
	else
		MTX_PORT0->BRR  = MTX_PR0;
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <RGBSetRGB+0xd8>)
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	615a      	str	r2, [r3, #20]

	if(rgb1.g & (1 << plane))
 8002b3e:	7b7b      	ldrb	r3, [r7, #13]
 8002b40:	461a      	mov	r2, r3
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	fa42 f303 	asr.w	r3, r2, r3
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <RGBSetRGB+0x48>
		MTX_PORT0->BSRR = MTX_PG0;
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <RGBSetRGB+0xd8>)
 8002b52:	2210      	movs	r2, #16
 8002b54:	611a      	str	r2, [r3, #16]
 8002b56:	e002      	b.n	8002b5e <RGBSetRGB+0x4e>
	else
		MTX_PORT0->BRR  = MTX_PG0;
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <RGBSetRGB+0xd8>)
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	615a      	str	r2, [r3, #20]

	if(rgb1.b & (1 << plane))
 8002b5e:	7bbb      	ldrb	r3, [r7, #14]
 8002b60:	461a      	mov	r2, r3
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	fa42 f303 	asr.w	r3, r2, r3
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <RGBSetRGB+0x68>
		MTX_PORT0->BSRR = MTX_PB0;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <RGBSetRGB+0xd8>)
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e002      	b.n	8002b7e <RGBSetRGB+0x6e>
	else
		MTX_PORT0->BRR  = MTX_PB0;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <RGBSetRGB+0xd8>)
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	615a      	str	r2, [r3, #20]

	if(rgb2.r & (1 << plane))
 8002b7e:	7a3b      	ldrb	r3, [r7, #8]
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	fa42 f303 	asr.w	r3, r2, r3
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <RGBSetRGB+0x88>
		MTX_PORT1->BSRR = MTX_PR1;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <RGBSetRGB+0xdc>)
 8002b92:	2220      	movs	r2, #32
 8002b94:	611a      	str	r2, [r3, #16]
 8002b96:	e002      	b.n	8002b9e <RGBSetRGB+0x8e>
	else
		MTX_PORT1->BRR  = MTX_PR1;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <RGBSetRGB+0xdc>)
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	615a      	str	r2, [r3, #20]

	if(rgb2.g & (1 << plane))
 8002b9e:	7a7b      	ldrb	r3, [r7, #9]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	fa42 f303 	asr.w	r3, r2, r3
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <RGBSetRGB+0xa8>
		MTX_PORT1->BSRR = MTX_PG1;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <RGBSetRGB+0xdc>)
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e002      	b.n	8002bbe <RGBSetRGB+0xae>
	else
		MTX_PORT1->BRR  = MTX_PG1;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <RGBSetRGB+0xdc>)
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	615a      	str	r2, [r3, #20]

	if(rgb2.b & (1 << plane))
 8002bbe:	7abb      	ldrb	r3, [r7, #10]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	fa42 f303 	asr.w	r3, r2, r3
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <RGBSetRGB+0xc8>
		MTX_PORT1->BSRR = MTX_PB1;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <RGBSetRGB+0xdc>)
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	611a      	str	r2, [r3, #16]
	else
		MTX_PORT1->BRR  = MTX_PB1;
}
 8002bd6:	e002      	b.n	8002bde <RGBSetRGB+0xce>
		MTX_PORT1->BRR  = MTX_PB1;
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <RGBSetRGB+0xdc>)
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	615a      	str	r2, [r3, #20]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40011400 	.word	0x40011400
 8002bec:	40010c00 	.word	0x40010c00

08002bf0 <RGBShowLine>:

/**
 * strobes / shows a line for a n*nop amount of time.
 */
void RGBShowLine(int amount)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	STROBE;
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <RGBShowLine+0x40>)
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <RGBShowLine+0x40>)
 8002c00:	2220      	movs	r2, #32
 8002c02:	615a      	str	r2, [r3, #20]
	DISP_ON;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <RGBShowLine+0x40>)
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	615a      	str	r2, [r3, #20]
	for(int c = 0; c < amount; c++) asm("nop");
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e003      	b.n	8002c18 <RGBShowLine+0x28>
 8002c10:	bf00      	nop
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	dbf7      	blt.n	8002c10 <RGBShowLine+0x20>
	DISP_OFF;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <RGBShowLine+0x40>)
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	611a      	str	r2, [r3, #16]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40011800 	.word	0x40011800
 8002c34:	00000000 	.word	0x00000000

08002c38 <RGBSetupRGBMatrixPorts>:
	       (!alive && neighbors == 3) ? NEW :
	       COPY;
}

void RGBSetupRGBMatrixPorts()
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(MTX_RCCP0 | MTX_RCCP1 | MTX_RCCPS, ENABLE);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2068      	movs	r0, #104	; 0x68
 8002c42:	f7fe fdc3 	bl	80017cc <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002c46:	2303      	movs	r3, #3
 8002c48:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002c4a:	2310      	movs	r3, #16
 8002c4c:	70fb      	strb	r3, [r7, #3]

	GPIO_InitStructure.GPIO_Pin = MTX_PR0 | MTX_PG0 | MTX_PB0;
 8002c4e:	2398      	movs	r3, #152	; 0x98
 8002c50:	803b      	strh	r3, [r7, #0]
	GPIO_Init(MTX_PORT0, &GPIO_InitStructure);
 8002c52:	463b      	mov	r3, r7
 8002c54:	4619      	mov	r1, r3
 8002c56:	4828      	ldr	r0, [pc, #160]	; (8002cf8 <RGBSetupRGBMatrixPorts+0xc0>)
 8002c58:	f7fe fc55 	bl	8001506 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = MTX_PR1 | MTX_PG1 | MTX_PB1;
 8002c5c:	23e0      	movs	r3, #224	; 0xe0
 8002c5e:	803b      	strh	r3, [r7, #0]
	GPIO_Init(MTX_PORT1, &GPIO_InitStructure);
 8002c60:	463b      	mov	r3, r7
 8002c62:	4619      	mov	r1, r3
 8002c64:	4825      	ldr	r0, [pc, #148]	; (8002cfc <RGBSetupRGBMatrixPorts+0xc4>)
 8002c66:	f7fe fc4e 	bl	8001506 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = MTX_PA | MTX_PB | MTX_PC | MTX_PD;
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	803b      	strh	r3, [r7, #0]
	GPIO_Init(MTX_PORT_SELSET, &GPIO_InitStructure);
 8002c6e:	463b      	mov	r3, r7
 8002c70:	4619      	mov	r1, r3
 8002c72:	4823      	ldr	r0, [pc, #140]	; (8002d00 <RGBSetupRGBMatrixPorts+0xc8>)
 8002c74:	f7fe fc47 	bl	8001506 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = MTX_PSTB | MTX_POE | MTX_PCLK;
 8002c78:	2370      	movs	r3, #112	; 0x70
 8002c7a:	803b      	strh	r3, [r7, #0]
	GPIO_Init(MTX_PORT_CONTROL, &GPIO_InitStructure);
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	481f      	ldr	r0, [pc, #124]	; (8002d00 <RGBSetupRGBMatrixPorts+0xc8>)
 8002c82:	f7fe fc40 	bl	8001506 <GPIO_Init>
	for(int i = 0; i < 256; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	e025      	b.n	8002cd8 <RGBSetupRGBMatrixPorts+0xa0>
	{
		gammaTable[i] = 255 * pow((i / 256.0), 1.6);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fd fc21 	bl	80004d4 <__aeabi_i2d>
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <RGBSetupRGBMatrixPorts+0xcc>)
 8002c98:	f7fd fdac 	bl	80007f4 <__aeabi_ddiv>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	a310      	add	r3, pc, #64	; (adr r3, 8002ce8 <RGBSetupRGBMatrixPorts+0xb0>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f002 fecf 	bl	8005a4c <pow>
 8002cae:	a310      	add	r3, pc, #64	; (adr r3, 8002cf0 <RGBSetupRGBMatrixPorts+0xb8>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fc74 	bl	80005a0 <__aeabi_dmul>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	f7fd ff1e 	bl	8000b00 <__aeabi_d2uiz>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b2d9      	uxtb	r1, r3
 8002cc8:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <RGBSetupRGBMatrixPorts+0xd0>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	460a      	mov	r2, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	ddd6      	ble.n	8002c8c <RGBSetupRGBMatrixPorts+0x54>
	}

}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	9999999a 	.word	0x9999999a
 8002cec:	3ff99999 	.word	0x3ff99999
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	406fe000 	.word	0x406fe000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40010c00 	.word	0x40010c00
 8002d00:	40011800 	.word	0x40011800
 8002d04:	40700000 	.word	0x40700000
 8002d08:	20004760 	.word	0x20004760

08002d0c <RGBClearBuff>:
	//RGB[x+y*64].r |= Color>>16;
}


void RGBClearBuff(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
	uint32_t num;
	for(num = 0; num < MATRIX_SIZE; num++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	e01c      	b.n	8002d52 <RGBClearBuff+0x46>
	{
		RGB[num].r = 0x00;
 8002d18:	4912      	ldr	r1, [pc, #72]	; (8002d64 <RGBClearBuff+0x58>)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
		RGB[num].g = 0x00;
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <RGBClearBuff+0x58>)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	3301      	adds	r3, #1
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
		RGB[num].b = 0x00;
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <RGBClearBuff+0x58>)
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	3302      	adds	r3, #2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < MATRIX_SIZE; num++)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d58:	d3de      	bcc.n	8002d18 <RGBClearBuff+0xc>
	}
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	20004860 	.word	0x20004860

08002d68 <GRBSetCell>:
		}
	}
}

void GRBSetCell(uint32_t cellNum, uint32_t color)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
	if(cellNum >= MATRIX_SIZE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d78:	d300      	bcc.n	8002d7c <GRBSetCell+0x14>
	{
		while(1)
 8002d7a:	e7fe      	b.n	8002d7a <GRBSetCell+0x12>
			;
	}
	RGB[cellNum].r = gammaTable[(uint8_t)(color & 0xFF)];
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <GRBSetCell+0x74>)
 8002d84:	5c98      	ldrb	r0, [r3, r2]
 8002d86:	4916      	ldr	r1, [pc, #88]	; (8002de0 <GRBSetCell+0x78>)
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	4602      	mov	r2, r0
 8002d94:	701a      	strb	r2, [r3, #0]
	RGB[cellNum].b = gammaTable[(uint8_t)((color >> 8) & 0xff)];
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <GRBSetCell+0x74>)
 8002da0:	5c98      	ldrb	r0, [r3, r2]
 8002da2:	490f      	ldr	r1, [pc, #60]	; (8002de0 <GRBSetCell+0x78>)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	3302      	adds	r3, #2
 8002db0:	4602      	mov	r2, r0
 8002db2:	701a      	strb	r2, [r3, #0]
	RGB[cellNum].g = gammaTable[(uint8_t)((color >> 16) & 0xff)];
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <GRBSetCell+0x74>)
 8002dbe:	5c98      	ldrb	r0, [r3, r2]
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <GRBSetCell+0x78>)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4602      	mov	r2, r0
 8002dd0:	701a      	strb	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20004760 	.word	0x20004760
 8002de0:	20004860 	.word	0x20004860

08002de4 <vTimerCallback>:
};

static TimerHandle_t xTimers;

static void vTimerCallback(TimerHandle_t xTimer)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	keyStatusDetect();
 8002dec:	f000 f82e 	bl	8002e4c <keyStatusDetect>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <keyDetectInit>:

void keyDetectInit(void)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af02      	add	r7, sp, #8
	xTimers = xTimerCreate("keyDetecter", pdMS_TO_TICKS(TIME_PERIDIC), pdTRUE, (void*)0, vTimerCallback);
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <keyDetectInit+0x48>)
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	2201      	movs	r2, #1
 8002e06:	2114      	movs	r1, #20
 8002e08:	480e      	ldr	r0, [pc, #56]	; (8002e44 <keyDetectInit+0x4c>)
 8002e0a:	f002 fa05 	bl	8005218 <xTimerCreate>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <keyDetectInit+0x50>)
 8002e12:	601a      	str	r2, [r3, #0]
	if(xTimers == NULL)
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <keyDetectInit+0x50>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <keyDetectInit+0x3e>
	{
		return;
	}
	if(pdPASS !=  xTimerStart(xTimers, 0))
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <keyDetectInit+0x50>)
 8002e1e:	681c      	ldr	r4, [r3, #0]
 8002e20:	f001 fe9e 	bl	8004b60 <xTaskGetTickCount>
 8002e24:	4602      	mov	r2, r0
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f002 fa34 	bl	800529c <xTimerGenericCommand>
 8002e34:	e000      	b.n	8002e38 <keyDetectInit+0x40>
		return;
 8002e36:	bf00      	nop
	{
	}
}
 8002e38:	3704      	adds	r7, #4
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08002de5 	.word	0x08002de5
 8002e44:	08006ab0 	.word	0x08006ab0
 8002e48:	200001e0 	.word	0x200001e0

08002e4c <keyStatusDetect>:

static void keyStatusDetect(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t keyNum;
	for(keyNum = keyIdx_1; keyNum < keyIdxNum; keyNum++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	e0a6      	b.n	8002fa6 <keyStatusDetect+0x15a>
	{
		status = GPIO_ReadInputDataBit(keyStatus[keyNum].pKey->pGPO, keyStatus[keyNum].pKey->pin);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	4a57      	ldr	r2, [pc, #348]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	4413      	add	r3, r2
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	4413      	add	r3, r2
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	889b      	ldrh	r3, [r3, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fe fc04 	bl	800167e <GPIO_ReadInputDataBit>
 8002e76:	4603      	mov	r3, r0
 8002e78:	71bb      	strb	r3, [r7, #6]
		if(GPIO_ReadInputDataBit(keyStatus[keyNum].pKey->pGPO, keyStatus[keyNum].pKey->pin) != keyStatus[keyNum].status)
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	4413      	add	r3, r2
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4413      	add	r3, r2
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	889b      	ldrh	r3, [r3, #4]
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fe fbf3 	bl	800167e <GPIO_ReadInputDataBit>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	4a46      	ldr	r2, [pc, #280]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4413      	add	r3, r2
 8002ea4:	330e      	adds	r3, #14
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4299      	cmp	r1, r3
 8002eaa:	d03c      	beq.n	8002f26 <keyStatusDetect+0xda>
		{
			keyStatus[keyNum].time += TIME_PERIDIC;
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	4941      	ldr	r1, [pc, #260]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	440a      	add	r2, r1
 8002eb6:	320f      	adds	r2, #15
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	3214      	adds	r2, #20
 8002ebc:	b2d1      	uxtb	r1, r2
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	330f      	adds	r3, #15
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
			if(keyStatus[keyNum].time >= 60)
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	4a3a      	ldr	r2, [pc, #232]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	4413      	add	r3, r2
 8002ed2:	330f      	adds	r3, #15
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b3b      	cmp	r3, #59	; 0x3b
 8002ed8:	d962      	bls.n	8002fa0 <keyStatusDetect+0x154>
			{
				keyStatus[keyNum].status = status;
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	4a36      	ldr	r2, [pc, #216]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4413      	add	r3, r2
 8002ee2:	330e      	adds	r3, #14
 8002ee4:	79ba      	ldrb	r2, [r7, #6]
 8002ee6:	701a      	strb	r2, [r3, #0]
				keyStatus[keyNum].time = 0;
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4413      	add	r3, r2
 8002ef0:	330f      	adds	r3, #15
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
				if(keyStatus[keyNum].status == 0)
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	4413      	add	r3, r2
 8002efe:	330e      	adds	r3, #14
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d14c      	bne.n	8002fa0 <keyStatusDetect+0x154>
				{
					if(keyStatus[keyNum].perssHandler)
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d044      	beq.n	8002fa0 <keyStatusDetect+0x154>
					{
						keyStatus[keyNum].perssHandler();
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3304      	adds	r3, #4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4798      	blx	r3
 8002f24:	e03c      	b.n	8002fa0 <keyStatusDetect+0x154>
				}
			}
		}
		else
		{
			if(keyStatus[keyNum].status == 0)
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	4413      	add	r3, r2
 8002f2e:	330e      	adds	r3, #14
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d134      	bne.n	8002fa0 <keyStatusDetect+0x154>
			{
				keyStatus[keyNum].time = 0;
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	4413      	add	r3, r2
 8002f3e:	330f      	adds	r3, #15
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
				keyStatus[keyNum].consecutiveTime += TIME_PERIDIC;
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	79fa      	ldrb	r2, [r7, #7]
 8002f48:	491b      	ldr	r1, [pc, #108]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	440a      	add	r2, r1
 8002f4e:	320c      	adds	r2, #12
 8002f50:	8812      	ldrh	r2, [r2, #0]
 8002f52:	3214      	adds	r2, #20
 8002f54:	b291      	uxth	r1, r2
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	4413      	add	r3, r2
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	460a      	mov	r2, r1
 8002f60:	801a      	strh	r2, [r3, #0]
				if(keyStatus[keyNum].consecutiveTime >= 1000)
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	4413      	add	r3, r2
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f72:	d315      	bcc.n	8002fa0 <keyStatusDetect+0x154>
				{
                    keyStatus[keyNum].consecutiveTime = 0;
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	4413      	add	r3, r2
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	2200      	movs	r2, #0
 8002f80:	801a      	strh	r2, [r3, #0]
					if(keyStatus[keyNum].consetcutivePressHandler)
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	4413      	add	r3, r2
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <keyStatusDetect+0x154>
					{
						keyStatus[keyNum].consetcutivePressHandler();
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <keyStatusDetect+0x16c>)
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4413      	add	r3, r2
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4798      	blx	r3
	for(keyNum = keyIdx_1; keyNum < keyIdxNum; keyNum++)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	71fb      	strb	r3, [r7, #7]
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	f67f af55 	bls.w	8002e58 <keyStatusDetect+0xc>
					}
				}
			}
		}
	}
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000002c 	.word	0x2000002c

08002fbc <key1PressHandler>:

static void key1PressHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	if(maxtrixAppGetShowMode() == showGameLevel)
 8002fc0:	f7fe ff60 	bl	8001e84 <maxtrixAppGetShowMode>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d102      	bne.n	8002fd0 <key1PressHandler+0x14>
	{
		maxtrixAppGameLevelIncrease();
 8002fca:	f7fe fe59 	bl	8001c80 <maxtrixAppGameLevelIncrease>
	}
	else
	{
		maxtrixAppSetGameLevel(maxtrixAppGetGameLevel());
	}
}
 8002fce:	e005      	b.n	8002fdc <key1PressHandler+0x20>
		maxtrixAppSetGameLevel(maxtrixAppGetGameLevel());
 8002fd0:	f7fe fe6e 	bl	8001cb0 <maxtrixAppGetGameLevel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fd5c 	bl	8001a94 <maxtrixAppSetGameLevel>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <key2PressHandler>:

static void key2PressHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	if(maxtrixAppGetShowMode() != showGameMode)
 8002fe4:	f7fe ff4e 	bl	8001e84 <maxtrixAppGetShowMode>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d006      	beq.n	8002ffc <key2PressHandler+0x1c>
	{
		maxtrixAppSetGameMode(maxtrixAppGetGameMode());
 8002fee:	f7fe ff3f 	bl	8001e70 <maxtrixAppGetGameMode>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fe65 	bl	8001cc4 <maxtrixAppSetGameMode>
        else
        {
            maxtrixAppSetGameMode(2);
        }
	}    
}
 8002ffa:	e00b      	b.n	8003014 <key2PressHandler+0x34>
        if(maxtrixAppGetGameMode() != 1)
 8002ffc:	f7fe ff38 	bl	8001e70 <maxtrixAppGetGameMode>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d003      	beq.n	800300e <key2PressHandler+0x2e>
            maxtrixAppSetGameMode(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f7fe fe5c 	bl	8001cc4 <maxtrixAppSetGameMode>
}
 800300c:	e002      	b.n	8003014 <key2PressHandler+0x34>
            maxtrixAppSetGameMode(2);
 800300e:	2002      	movs	r0, #2
 8003010:	f7fe fe58 	bl	8001cc4 <maxtrixAppSetGameMode>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <key3PressHandler>:

static void key3PressHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	if(!maxtrixAppGetGameStatus())
 800301c:	f7ff fc28 	bl	8002870 <maxtrixAppGetGameStatus>
 8003020:	4603      	mov	r3, r0
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <key3PressHandler+0x1a>
	{
		maxtrixAppGameStart();
 800302c:	f7ff fbca 	bl	80027c4 <maxtrixAppGameStart>
		return;
 8003030:	e001      	b.n	8003036 <key3PressHandler+0x1e>
	}
	maxtrixAppGameStop();
 8003032:	f7ff fc05 	bl	8002840 <maxtrixAppGameStop>
}
 8003036:	bd80      	pop	{r7, pc}

08003038 <key4PressHandler>:

static void key4PressHandler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
    
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <key1ConsecutivePressHandler>:

static void key1ConsecutivePressHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
	maxtrixAppGameLevelIncrease();
 8003048:	f7fe fe1a 	bl	8001c80 <maxtrixAppGameLevelIncrease>
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}

08003050 <filterConfig>:
static const uint8_t baudList[CAN_Baud_Num] = {6, 12, 24, 48};

static CanHandler_t handler[canControllerIdxNum];

static void filterConfig(const canFIrlterList_t *pFirlterList)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	uint8_t i;
	CAN_FilterInitTypeDef CAN_FilterInitStructure;
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	823b      	strh	r3, [r7, #16]
	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
 800305c:	2301      	movs	r3, #1
 800305e:	74fb      	strb	r3, [r7, #19]
	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
 8003060:	2301      	movs	r3, #1
 8003062:	753b      	strb	r3, [r7, #20]
	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
 8003064:	2301      	movs	r3, #1
 8003066:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < pFirlterList->num; i++)
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]
 800306c:	e035      	b.n	80030da <filterConfig+0x8a>
	{
		if(pFirlterList->pFilter[i].type == CAN_ID_STANDRD)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10c      	bne.n	800309e <filterConfig+0x4e>
		{
			CAN_FilterInitStructure.CAN_FilterIdHigh = pFirlterList->pFilter[i].id << 5;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	b29b      	uxth	r3, r3
 8003092:	015b      	lsls	r3, r3, #5
 8003094:	b29b      	uxth	r3, r3
 8003096:	813b      	strh	r3, [r7, #8]
			CAN_FilterInitStructure.CAN_FilterIdLow = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	e013      	b.n	80030c6 <filterConfig+0x76>
		}
		else
		{
			CAN_FilterInitStructure.CAN_FilterIdHigh = (pFirlterList->pFilter[i].id >> 16) & 0x1FFF;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	813b      	strh	r3, [r7, #8]
			CAN_FilterInitStructure.CAN_FilterIdLow = pFirlterList->pFilter[i].id;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	817b      	strh	r3, [r7, #10]
		}
		CAN_FilterInitStructure.CAN_FilterNumber = i;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	74bb      	strb	r3, [r7, #18]
		//CAN_FilterInitStructure.CAN_FilterFIFOAssignment = i / 2;
		CAN_FilterInit(&CAN_FilterInitStructure);
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fe68 	bl	8000da4 <CAN_FilterInit>
	for(i = 0; i < pFirlterList->num; i++)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	3301      	adds	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	791b      	ldrb	r3, [r3, #4]
 80030de:	7dfa      	ldrb	r2, [r7, #23]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d3c4      	bcc.n	800306e <filterConfig+0x1e>
	}
	CAN_FilterInit(&CAN_FilterInitStructure);
 80030e4:	f107 0308 	add.w	r3, r7, #8
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fe5b 	bl	8000da4 <CAN_FilterInit>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <CanInit>:

void CanInit(CanControllerIdx_t controller, CanBaud_t baud, pHanlderCb cb, const canFIrlterList_t *pFirlterList)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60ba      	str	r2, [r7, #8]
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	460b      	mov	r3, r1
 8003108:	73bb      	strb	r3, [r7, #14]
	if(controller >= canControllerIdxNum)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d000      	beq.n	8003112 <CanInit+0x1a>
	{
		ERROR_DEBUG("[CAN] Can controller out of rannge\r\n");
		while(1)
 8003110:	e7fe      	b.n	8003110 <CanInit+0x18>
			;
	}
	if(baud >= CAN_Baud_Num)
 8003112:	7bbb      	ldrb	r3, [r7, #14]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d900      	bls.n	800311a <CanInit+0x22>
	{
		ERROR_DEBUG("[CAN] Baud outof range\r\n");
		while(1)
 8003118:	e7fe      	b.n	8003118 <CanInit+0x20>
			;
	}

	CAN_TypeDef *pCan = (CAN_TypeDef *)pCanController[controller];
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	4a34      	ldr	r2, [pc, #208]	; (80031f0 <CanInit+0xf8>)
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef  NVIC_InitStructure;

	CAN_InitStructure.CAN_TTCM = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	77bb      	strb	r3, [r7, #30]
	CAN_InitStructure.CAN_ABOM = DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	77fb      	strb	r3, [r7, #31]
	CAN_InitStructure.CAN_AWUM = DISABLE;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3020 	strb.w	r3, [r7, #32]
	CAN_InitStructure.CAN_NART = ENABLE;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CAN_InitStructure.CAN_RFLM = DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	CAN_InitStructure.CAN_TXFP = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
 8003144:	2300      	movs	r3, #0
 8003146:	76bb      	strb	r3, [r7, #26]
	CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
 8003148:	2300      	movs	r3, #0
 800314a:	76fb      	strb	r3, [r7, #27]
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
 800314c:	2302      	movs	r3, #2
 800314e:	773b      	strb	r3, [r7, #28]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq;
 8003150:	2301      	movs	r3, #1
 8003152:	777b      	strb	r3, [r7, #29]
	CAN_InitStructure.CAN_Prescaler = (uint16_t)baudList[canControllerIdxNum];
 8003154:	230c      	movs	r3, #12
 8003156:	b29b      	uxth	r3, r3
 8003158:	833b      	strh	r3, [r7, #24]

	CAN_Init(pCan, &CAN_InitStructure);
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	4619      	mov	r1, r3
 8003160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003162:	f7fd fd4f 	bl	8000c04 <CAN_Init>
	if(pFirlterList != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <CanInit+0x7a>
	{
		filterConfig(pFirlterList);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff6f 	bl	8003050 <filterConfig>
	}
	switch((uint32_t)controller)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d000      	beq.n	800317a <CanInit+0x82>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_SCE_IRQn;
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
			NVIC_Init(&NVIC_InitStructure);
			break;
		default:
			break;
 8003178:	e01b      	b.n	80031b2 <CanInit+0xba>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
 800317a:	2314      	movs	r3, #20
 800317c:	753b      	strb	r3, [r7, #20]
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 800317e:	2302      	movs	r3, #2
 8003180:	757b      	strb	r3, [r7, #21]
			NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
			NVIC_Init(&NVIC_InitStructure);
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fcd8 	bl	8000b40 <NVIC_Init>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_TX_IRQn;
 8003190:	2313      	movs	r3, #19
 8003192:	753b      	strb	r3, [r7, #20]
			NVIC_Init(&NVIC_InitStructure);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd fcd1 	bl	8000b40 <NVIC_Init>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_SCE_IRQn;
 800319e:	2316      	movs	r3, #22
 80031a0:	753b      	strb	r3, [r7, #20]
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	757b      	strb	r3, [r7, #21]
			NVIC_Init(&NVIC_InitStructure);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fcc8 	bl	8000b40 <NVIC_Init>
			break;
 80031b0:	bf00      	nop

	}

	CAN_ITConfig(pCan, CAN_IT_TME, ENABLE);
 80031b2:	2201      	movs	r2, #1
 80031b4:	2101      	movs	r1, #1
 80031b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031b8:	f7fe f838 	bl	800122c <CAN_ITConfig>
	CAN_ITConfig(pCan, CAN_IT_FMP0, ENABLE);
 80031bc:	2201      	movs	r2, #1
 80031be:	2102      	movs	r1, #2
 80031c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c2:	f7fe f833 	bl	800122c <CAN_ITConfig>
	CAN_ITConfig(pCan, CAN_IT_BOF, ENABLE);
 80031c6:	2201      	movs	r2, #1
 80031c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ce:	f7fe f82d 	bl	800122c <CAN_ITConfig>
	handler[controller].cb = cb;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	4907      	ldr	r1, [pc, #28]	; (80031f4 <CanInit+0xfc>)
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	3314      	adds	r3, #20
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	601a      	str	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	3728      	adds	r7, #40	; 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2000009c 	.word	0x2000009c
 80031f4:	200001e4 	.word	0x200001e4

080031f8 <CanDeinit>:

void CanDeinit(CanControllerIdx_t controller)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
	if(controller >= canControllerIdxNum)
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d000      	beq.n	800320a <CanDeinit+0x12>
	{
		ERROR_DEBUG("[CAN] Can controller out of rannge\r\n");
		while(1)
 8003208:	e7fe      	b.n	8003208 <CanDeinit+0x10>
			;
	}
	CAN_TypeDef *pCan = (CAN_TypeDef *)pCanController[controller];
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <CanDeinit+0x64>)
 800320e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003212:	60fb      	str	r3, [r7, #12]
	if(pCan != NULL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01c      	beq.n	8003254 <CanDeinit+0x5c>
	{
		if(pCan == CAN1)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a10      	ldr	r2, [pc, #64]	; (8003260 <CanDeinit+0x68>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10a      	bne.n	8003238 <CanDeinit+0x40>
		{
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8003222:	2100      	movs	r1, #0
 8003224:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003228:	f7fe fb0c 	bl	8001844 <RCC_APB1PeriphResetCmd>
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800322c:	2101      	movs	r1, #1
 800322e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003232:	f7fe fb07 	bl	8001844 <RCC_APB1PeriphResetCmd>
		{
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
		}
	}
}
 8003236:	e00d      	b.n	8003254 <CanDeinit+0x5c>
		else if(pCan == CAN2)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <CanDeinit+0x6c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <CanDeinit+0x5c>
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8003240:	2100      	movs	r1, #0
 8003242:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003246:	f7fe fafd 	bl	8001844 <RCC_APB1PeriphResetCmd>
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 800324a:	2101      	movs	r1, #1
 800324c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003250:	f7fe faf8 	bl	8001844 <RCC_APB1PeriphResetCmd>
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2000009c 	.word	0x2000009c
 8003260:	40006400 	.word	0x40006400
 8003264:	40006800 	.word	0x40006800

08003268 <CanSend_MSG>:
bool CanSend_MSG(CanControllerIdx_t controller, const can_frame_t *pFrame)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]

	if(controller >= canControllerIdxNum)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <CanSend_MSG+0x16>
	{
		ERROR_DEBUG("[CAN] Can controller out of rannge\r\n");
		return false;
 800327a:	2300      	movs	r3, #0
 800327c:	e04c      	b.n	8003318 <CanSend_MSG+0xb0>
	}
	if(pFrame == NULL)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <CanSend_MSG+0x20>
	{
		ERROR_DEBUG("[CAN] Send message is null\r\n");
		return false;
 8003284:	2300      	movs	r3, #0
 8003286:	e047      	b.n	8003318 <CanSend_MSG+0xb0>
	}
	else
	{
		CanTxMsg TxMessage;
		TxMessage.Data[0] = pFrame->dataByte0;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	7adb      	ldrb	r3, [r3, #11]
 800328c:	75fb      	strb	r3, [r7, #23]
		TxMessage.Data[1] = pFrame->dataByte1;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	7a9b      	ldrb	r3, [r3, #10]
 8003292:	763b      	strb	r3, [r7, #24]
		TxMessage.Data[2] = pFrame->dataByte2;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	7a5b      	ldrb	r3, [r3, #9]
 8003298:	767b      	strb	r3, [r7, #25]
		TxMessage.Data[3] = pFrame->dataByte3;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	7a1b      	ldrb	r3, [r3, #8]
 800329e:	76bb      	strb	r3, [r7, #26]
		TxMessage.Data[4] = pFrame->dataByte4;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	7bdb      	ldrb	r3, [r3, #15]
 80032a4:	76fb      	strb	r3, [r7, #27]
		TxMessage.Data[5] = pFrame->dataByte5;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	7b9b      	ldrb	r3, [r3, #14]
 80032aa:	773b      	strb	r3, [r7, #28]
		TxMessage.Data[6] = pFrame->dataByte6;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	7b5b      	ldrb	r3, [r3, #13]
 80032b0:	777b      	strb	r3, [r7, #29]
		TxMessage.Data[7] = pFrame->dataByte7;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	7b1b      	ldrb	r3, [r3, #12]
 80032b6:	77bb      	strb	r3, [r7, #30]
		TxMessage.DLC = pFrame->length;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	75bb      	strb	r3, [r7, #22]
		if(pFrame->format == CAN_ID_STANDRD)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	789b      	ldrb	r3, [r3, #2]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <CanSend_MSG+0x76>
		{
			TxMessage.StdId = pFrame->id;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
			TxMessage.IDE = CAN_Id_Standard;
 80032d8:	2300      	movs	r3, #0
 80032da:	753b      	strb	r3, [r7, #20]
 80032dc:	e004      	b.n	80032e8 <CanSend_MSG+0x80>
		}
		else
		{
			TxMessage.ExtId = pFrame->id;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	613b      	str	r3, [r7, #16]
			TxMessage.IDE = CAN_RTR_Remote;
 80032e4:	2302      	movs	r3, #2
 80032e6:	753b      	strb	r3, [r7, #20]
		}
		if(pFrame->type == CAN_TYPE_DATA)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	789b      	ldrb	r3, [r3, #2]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <CanSend_MSG+0x94>
		{
			TxMessage.RTR = CAN_RTR_Data;
 80032f6:	2300      	movs	r3, #0
 80032f8:	757b      	strb	r3, [r7, #21]
 80032fa:	e001      	b.n	8003300 <CanSend_MSG+0x98>
		}
		else
		{
			TxMessage.RTR = CAN_RTR_Remote;
 80032fc:	2302      	movs	r3, #2
 80032fe:	757b      	strb	r3, [r7, #21]
		}
		if(CAN_TxStatus_NoMailBox == CAN_Transmit(CAN1, &TxMessage))
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	4619      	mov	r1, r3
 8003306:	4806      	ldr	r0, [pc, #24]	; (8003320 <CanSend_MSG+0xb8>)
 8003308:	f7fd fe06 	bl	8000f18 <CAN_Transmit>
 800330c:	4603      	mov	r3, r0
 800330e:	2b04      	cmp	r3, #4
 8003310:	d101      	bne.n	8003316 <CanSend_MSG+0xae>
		{
			ERROR_DEBUG("[CAN] There has no transmit mailbox\r\n");
			return false;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <CanSend_MSG+0xb0>
		}
		return true;
 8003316:	2301      	movs	r3, #1
	}
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40006400 	.word	0x40006400

08003324 <CanGet_MSG>:

bool CanGet_MSG(CanControllerIdx_t controller, can_frame_t *pFrame)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
	if(controller >= canControllerIdxNum || pFrame == NULL)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <CanGet_MSG+0x18>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <CanGet_MSG+0x1c>
	{
		return false;
 800333c:	2300      	movs	r3, #0
 800333e:	e022      	b.n	8003386 <CanGet_MSG+0x62>
	}
	if(handler[controller].isHaveMsg)
 8003340:	79fa      	ldrb	r2, [r7, #7]
 8003342:	4913      	ldr	r1, [pc, #76]	; (8003390 <CanGet_MSG+0x6c>)
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d017      	beq.n	8003384 <CanGet_MSG+0x60>
	{
		handler[controller].isHaveMsg = false;
 8003354:	79fa      	ldrb	r2, [r7, #7]
 8003356:	490e      	ldr	r1, [pc, #56]	; (8003390 <CanGet_MSG+0x6c>)
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
		memcpy(pFrame, &handler[controller].Frame, sizeof(can_frame_t));
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <CanGet_MSG+0x6c>)
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	2210      	movs	r2, #16
 8003378:	4619      	mov	r1, r3
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f002 fb5a 	bl	8005a34 <memcpy>
		return true;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <CanGet_MSG+0x62>
	}
	else
	{
		return false;
 8003384:	2300      	movs	r3, #0
	}
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200001e4 	.word	0x200001e4

08003394 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0

	if(CAN_GetITStatus(CAN1, CAN_IT_FMP0) != RESET)
 800339a:	2102      	movs	r1, #2
 800339c:	482b      	ldr	r0, [pc, #172]	; (800344c <CAN1_RX0_IRQHandler+0xb8>)
 800339e:	f7fd ff63 	bl	8001268 <CAN_GetITStatus>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d04d      	beq.n	8003444 <CAN1_RX0_IRQHandler+0xb0>
	{
		CanRxMsg RxMessage;

		CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
 80033a8:	2102      	movs	r1, #2
 80033aa:	4828      	ldr	r0, [pc, #160]	; (800344c <CAN1_RX0_IRQHandler+0xb8>)
 80033ac:	f7fe f826 	bl	80013fc <CAN_ClearITPendingBit>

		CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	461a      	mov	r2, r3
 80033b4:	2100      	movs	r1, #0
 80033b6:	4825      	ldr	r0, [pc, #148]	; (800344c <CAN1_RX0_IRQHandler+0xb8>)
 80033b8:	f7fd fe7b 	bl	80010b2 <CAN_Receive>
		handler[0].Frame.dataByte0 = RxMessage.Data[0];
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033c0:	73da      	strb	r2, [r3, #15]
		handler[0].Frame.dataByte1 = RxMessage.Data[1];
 80033c2:	7c3a      	ldrb	r2, [r7, #16]
 80033c4:	4b22      	ldr	r3, [pc, #136]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033c6:	739a      	strb	r2, [r3, #14]
		handler[0].Frame.dataByte2 = RxMessage.Data[2];
 80033c8:	7c7a      	ldrb	r2, [r7, #17]
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033cc:	735a      	strb	r2, [r3, #13]
		handler[0].Frame.dataByte3 = RxMessage.Data[3];
 80033ce:	7cba      	ldrb	r2, [r7, #18]
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033d2:	731a      	strb	r2, [r3, #12]
		handler[0].Frame.dataByte4 = RxMessage.Data[4];
 80033d4:	7cfa      	ldrb	r2, [r7, #19]
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033d8:	74da      	strb	r2, [r3, #19]
		handler[0].Frame.dataByte5 = RxMessage.Data[5];
 80033da:	7d3a      	ldrb	r2, [r7, #20]
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033de:	749a      	strb	r2, [r3, #18]
		handler[0].Frame.dataByte6 = RxMessage.Data[6];
 80033e0:	7d7a      	ldrb	r2, [r7, #21]
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033e4:	745a      	strb	r2, [r3, #17]
		handler[0].Frame.dataByte7 = RxMessage.Data[7];
 80033e6:	7dba      	ldrb	r2, [r7, #22]
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033ea:	741a      	strb	r2, [r3, #16]
		if(RxMessage.IDE == CAN_Id_Extended)
 80033ec:	7b3b      	ldrb	r3, [r7, #12]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d108      	bne.n	8003404 <CAN1_RX0_IRQHandler+0x70>
		{
			handler[0].Frame.format = CAN_ID_EXTEND;
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 80033f4:	7993      	ldrb	r3, [r2, #6]
 80033f6:	f043 0320 	orr.w	r3, r3, #32
 80033fa:	7193      	strb	r3, [r2, #6]
			handler[0].Frame.id = RxMessage.ExtId;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 8003400:	6093      	str	r3, [r2, #8]
 8003402:	e002      	b.n	800340a <CAN1_RX0_IRQHandler+0x76>
		}
		else
		{
			handler[0].Frame.id = RxMessage.StdId;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 8003408:	6093      	str	r3, [r2, #8]
		}
		if(RxMessage.RTR == CAN_RTR_Remote)
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d104      	bne.n	800341a <CAN1_RX0_IRQHandler+0x86>
		{
			handler[0].Frame.type = CAN_TYPE_REMOTE;
 8003410:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 8003412:	7993      	ldrb	r3, [r2, #6]
 8003414:	f043 0310 	orr.w	r3, r3, #16
 8003418:	7193      	strb	r3, [r2, #6]
		}
		handler[0].Frame.length = RxMessage.DLC;
 800341a:	7bbb      	ldrb	r3, [r7, #14]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	b2d9      	uxtb	r1, r3
 8003422:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 8003424:	7993      	ldrb	r3, [r2, #6]
 8003426:	f361 0303 	bfi	r3, r1, #0, #4
 800342a:	7193      	strb	r3, [r2, #6]
		if(handler[0].cb)
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <CAN1_RX0_IRQHandler+0xaa>
		{
			handler[0].cb(canControllerIdx1, CAN_RX_DATA);
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	2100      	movs	r1, #0
 800343a:	2000      	movs	r0, #0
 800343c:	4798      	blx	r3
		}
		handler[0].isHaveMsg = true;
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <CAN1_RX0_IRQHandler+0xbc>)
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
	}

}
 8003444:	bf00      	nop
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40006400 	.word	0x40006400
 8003450:	200001e4 	.word	0x200001e4

08003454 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	if(CAN_GetITStatus(CAN1, CAN_IT_TME) != RESET)
 8003458:	2101      	movs	r1, #1
 800345a:	480a      	ldr	r0, [pc, #40]	; (8003484 <CAN1_TX_IRQHandler+0x30>)
 800345c:	f7fd ff04 	bl	8001268 <CAN_GetITStatus>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <CAN1_TX_IRQHandler+0x2c>
	{
		CAN_ClearITPendingBit(CAN1, CAN_IT_TME);
 8003466:	2101      	movs	r1, #1
 8003468:	4806      	ldr	r0, [pc, #24]	; (8003484 <CAN1_TX_IRQHandler+0x30>)
 800346a:	f7fd ffc7 	bl	80013fc <CAN_ClearITPendingBit>
		if(handler[canControllerIdx1].cb)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <CAN1_TX_IRQHandler+0x34>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <CAN1_TX_IRQHandler+0x2c>
		{
			handler[canControllerIdx1].cb(canControllerIdx1, CAN_TX_COMPLETE);
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <CAN1_TX_IRQHandler+0x34>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2101      	movs	r1, #1
 800347c:	2000      	movs	r0, #0
 800347e:	4798      	blx	r3
		}

	}

}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40006400 	.word	0x40006400
 8003488:	200001e4 	.word	0x200001e4

0800348c <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	71fb      	strb	r3, [r7, #7]
	if(CAN_GetITStatus(CAN1, CAN_IT_BOF) == SET)
 80034a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <CAN1_SCE_IRQHandler+0x3c>)
 80034a8:	f7fd fede 	bl	8001268 <CAN_GetITStatus>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <CAN1_SCE_IRQHandler+0x1e>
	{
		error = CAN_BUSSOFF_ERR;
 80034b2:	2303      	movs	r3, #3
 80034b4:	71fb      	strb	r3, [r7, #7]
	}
	if(handler[canControllerIdx1].cb)
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <CAN1_SCE_IRQHandler+0x40>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <CAN1_SCE_IRQHandler+0x32>
	{
		handler[canControllerIdx1].cb(canControllerIdx1, error);
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <CAN1_SCE_IRQHandler+0x40>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	79fa      	ldrb	r2, [r7, #7]
 80034c4:	4611      	mov	r1, r2
 80034c6:	2000      	movs	r0, #0
 80034c8:	4798      	blx	r3
	}
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40006400 	.word	0x40006400
 80034d8:	200001e4 	.word	0x200001e4

080034dc <CAN2_TX_IRQHandler>:


void CAN2_TX_IRQHandler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0

}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0

}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <CAN2_SCE_IRQHandler>:
void CAN2_SCE_IRQHandler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <gpioInit_A>:
#include "gpioInit.h"

static void gpioInit_A(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
 8003512:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003516:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003518:	2310      	movs	r3, #16
 800351a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800351c:	2303      	movs	r3, #3
 800351e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4803      	ldr	r0, [pc, #12]	; (8003534 <gpioInit_A+0x28>)
 8003526:	f7fd ffee 	bl	8001506 <GPIO_Init>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40010800 	.word	0x40010800

08003538 <gpioInit_B>:

static void gpioInit_B(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 ;
 800353e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8003542:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003544:	2303      	movs	r3, #3
 8003546:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003548:	2318      	movs	r3, #24
 800354a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	4619      	mov	r1, r3
 8003550:	4808      	ldr	r0, [pc, #32]	; (8003574 <gpioInit_B+0x3c>)
 8003552:	f7fd ffd8 	bl	8001506 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8003556:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800355a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800355c:	2304      	movs	r3, #4
 800355e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4803      	ldr	r0, [pc, #12]	; (8003574 <gpioInit_B+0x3c>)
 8003566:	f7fd ffce 	bl	8001506 <GPIO_Init>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40010c00 	.word	0x40010c00

08003578 <gpioInit_C>:

static void gpioInit_C(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800357e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003582:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003584:	2304      	movs	r3, #4
 8003586:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <gpioInit_C+0x3c>)
 800358e:	f7fd ffba 	bl	8001506 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8003592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003596:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003598:	2302      	movs	r3, #2
 800359a:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800359c:	2310      	movs	r3, #16
 800359e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <gpioInit_C+0x3c>)
 80035a6:	f7fd ffae 	bl	8001506 <GPIO_Init>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000

080035b8 <gpioInit_D>:
static void gpioInit_D(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 80035be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80035c2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80035c4:	2304      	movs	r3, #4
 80035c6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	480d      	ldr	r0, [pc, #52]	; (8003604 <gpioInit_D+0x4c>)
 80035ce:	f7fd ff9a 	bl	8001506 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 80035d2:	2301      	movs	r3, #1
 80035d4:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80035d6:	2348      	movs	r3, #72	; 0x48
 80035d8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4809      	ldr	r0, [pc, #36]	; (8003604 <gpioInit_D+0x4c>)
 80035e0:	f7fd ff91 	bl	8001506 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 80035e4:	2302      	movs	r3, #2
 80035e6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80035e8:	2318      	movs	r3, #24
 80035ea:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80035ec:	2303      	movs	r3, #3
 80035ee:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <gpioInit_D+0x4c>)
 80035f6:	f7fd ff86 	bl	8001506 <GPIO_Init>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40011400 	.word	0x40011400

08003608 <gpioInit_E>:
static void gpioInit_E(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <gpioInit_F>:
static void gpioInit_F(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <gpioInit_G>:
static void gpioInit_G(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0

}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <gpioRemap>:

static void gpioRemap(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	GPIO_PinRemapConfig(GPIO_Remap2_CAN1, ENABLE);
 8003630:	2101      	movs	r1, #1
 8003632:	f44f 10eb 	mov.w	r0, #1925120	; 0x1d6000
 8003636:	f7fe f83b 	bl	80016b0 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig(GPIO_PartialRemap2_TIM2, ENABLE);
 800363a:	2101      	movs	r1, #1
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <gpioRemap+0x1c>)
 800363e:	f7fe f837 	bl	80016b0 <GPIO_PinRemapConfig>
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	00180200 	.word	0x00180200

0800364c <gpioInit>:
void gpioInit(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
    gpioRemap();
 8003650:	f7ff ffec 	bl	800362c <gpioRemap>
	gpioInit_A();
 8003654:	f7ff ff5a 	bl	800350c <gpioInit_A>
	gpioInit_B();
 8003658:	f7ff ff6e 	bl	8003538 <gpioInit_B>
	gpioInit_C();
 800365c:	f7ff ff8c 	bl	8003578 <gpioInit_C>
	gpioInit_D();
 8003660:	f7ff ffaa 	bl	80035b8 <gpioInit_D>
	gpioInit_E();
 8003664:	f7ff ffd0 	bl	8003608 <gpioInit_E>
	gpioInit_F();
 8003668:	f7ff ffd4 	bl	8003614 <gpioInit_F>
	gpioInit_G();
 800366c:	f7ff ffd8 	bl	8003620 <gpioInit_G>

}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}

08003674 <__random_r>:
                .rand_deg = DEG_3,
                .rand_sep = SEP_3,
                .end_ptr = &randtbl[sizeof(randtbl) / sizeof(randtbl[0])]
        };
static int __random_r(struct random_data *buf, int32_t *result)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
    int32_t *state;
    if (buf == NULL || result == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <__random_r+0x16>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <__random_r+0x1c>
    {
        return -1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e050      	b.n	8003732 <__random_r+0xbe>
    }
    state = buf->state;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	617b      	str	r3, [r7, #20]
    if (buf->rand_type == TYPE_0)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d112      	bne.n	80036c4 <__random_r+0x50>
    {
        int32_t val = ((state[0] * 1103515245U) + 12345U) & 0x7fffffff;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <__random_r+0xc8>)
 80036a6:	fb03 f302 	mul.w	r3, r3, r2
 80036aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80036ae:	3339      	adds	r3, #57	; 0x39
 80036b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036b4:	613b      	str	r3, [r7, #16]
        state[0] = val;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	601a      	str	r2, [r3, #0]
        *result = val;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e035      	b.n	8003730 <__random_r+0xbc>
    }
    else
    {
        int32_t *fptr = buf->fptr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61fb      	str	r3, [r7, #28]
        int32_t *rptr = buf->rptr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        int32_t *end_ptr = buf->end_ptr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	60fb      	str	r3, [r7, #12]
        uint32_t val;
        val = *fptr += (uint32_t) *rptr;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	461a      	mov	r2, r3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60bb      	str	r3, [r7, #8]
        /* Chucking least random bit.  */
        *result = val >> 1;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	461a      	mov	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	601a      	str	r2, [r3, #0]
        ++fptr;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3304      	adds	r3, #4
 80036fc:	61fb      	str	r3, [r7, #28]
        if (fptr >= end_ptr)
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	429a      	cmp	r2, r3
 8003704:	d305      	bcc.n	8003712 <__random_r+0x9e>
        {
            fptr = state;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	61fb      	str	r3, [r7, #28]
            ++rptr;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3304      	adds	r3, #4
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e008      	b.n	8003724 <__random_r+0xb0>
        }
        else
        {
            ++rptr;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3304      	adds	r3, #4
 8003716:	61bb      	str	r3, [r7, #24]
            if (rptr >= end_ptr)
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d301      	bcc.n	8003724 <__random_r+0xb0>
                rptr = state;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	61bb      	str	r3, [r7, #24]
        }
        buf->fptr = fptr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	601a      	str	r2, [r3, #0]
        buf->rptr = rptr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	605a      	str	r2, [r3, #4]
    }
    return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	41c64e6d 	.word	0x41c64e6d

08003740 <rand>:

int rand(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
    int32_t retval;
    (void) __random_r (&unsafe_state, &retval);
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4805      	ldr	r0, [pc, #20]	; (8003760 <rand+0x20>)
 800374c:	f7ff ff92 	bl	8003674 <__random_r>
    return (retval ^ next_factor);
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <rand+0x24>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4053      	eors	r3, r2
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000120 	.word	0x20000120
 8003764:	200001fc 	.word	0x200001fc

08003768 <srand>:

void srand(int32_t factor)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
    next_factor = factor;
 8003770:	4a03      	ldr	r2, [pc, #12]	; (8003780 <srand+0x18>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	200001fc 	.word	0x200001fc

08003784 <sysclock_init>:
#define RCC_APB1PeriphClock ( RCC_APB1Periph_TIM2 \
                              | RCC_APB1Periph_TIM4 \
                              | RCC_APB1Periph_CAN1 )

void sysclock_init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriphClock, ENABLE);
 8003788:	2101      	movs	r1, #1
 800378a:	2001      	movs	r0, #1
 800378c:	f7fe f800 	bl	8001790 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2PeriphClock, ENABLE);
 8003790:	2101      	movs	r1, #1
 8003792:	f240 10fd 	movw	r0, #509	; 0x1fd
 8003796:	f7fe f819 	bl	80017cc <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1PeriphClock, ENABLE);
 800379a:	2101      	movs	r1, #1
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <sysclock_init+0x24>)
 800379e:	f7fe f833 	bl	8001808 <RCC_APB1PeriphClockCmd>
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	02000005 	.word	0x02000005

080037ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f103 0208 	add.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 0208 	add.w	r2, r3, #8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0208 	add.w	r2, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d103      	bne.n	8003868 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e00c      	b.n	8003882 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3308      	adds	r3, #8
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e002      	b.n	8003876 <vListInsert+0x2e>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d9f6      	bls.n	8003870 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6852      	ldr	r2, [r2, #4]
 80038d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d103      	bne.n	80038ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
	...

0800390c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3b04      	subs	r3, #4
 800391c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b04      	subs	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b04      	subs	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800393c:	4a08      	ldr	r2, [pc, #32]	; (8003960 <pxPortInitialiseStack+0x54>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3b14      	subs	r3, #20
 8003946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b20      	subs	r3, #32
 8003952:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	08003965 	.word	0x08003965

08003964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800396a:	2300      	movs	r3, #0
 800396c:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800396e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003980:	bf00      	nop
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0fc      	beq.n	8003982 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
	...

080039a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <pxCurrentTCBConst2>)
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	6808      	ldr	r0, [r1, #0]
 80039a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039aa:	f380 8809 	msr	PSP, r0
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f380 8811 	msr	BASEPRI, r0
 80039ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80039be:	4770      	bx	lr

080039c0 <pxCurrentTCBConst2>:
 80039c0:	20004618 	.word	0x20004618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop

080039c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80039c8:	4806      	ldr	r0, [pc, #24]	; (80039e4 <prvPortStartFirstTask+0x1c>)
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f380 8808 	msr	MSP, r0
 80039d2:	b662      	cpsie	i
 80039d4:	b661      	cpsie	f
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	df00      	svc	0
 80039e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039e2:	bf00      	nop
 80039e4:	e000ed08 	.word	0xe000ed08

080039e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039ec:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <xPortStartScheduler+0x38>)
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <xPortStartScheduler+0x38>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <xPortStartScheduler+0x38>)
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <xPortStartScheduler+0x38>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a04:	f000 f888 	bl	8003b18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <xPortStartScheduler+0x3c>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a0e:	f7ff ffdb 	bl	80039c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a12:	f001 f969 	bl	8004ce8 <vTaskSwitchContext>
	prvTaskExitError();
 8003a16:	f7ff ffa5 	bl	8003964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	e000ed20 	.word	0xe000ed20
 8003a24:	2000013c 	.word	0x2000013c

08003a28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <vPortEnterCritical+0x2c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	4a03      	ldr	r2, [pc, #12]	; (8003a54 <vPortEnterCritical+0x2c>)
 8003a48:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	2000013c 	.word	0x2000013c

08003a58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <vPortExitCritical+0x2c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <vPortExitCritical+0x2c>)
 8003a66:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <vPortExitCritical+0x2c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <vPortExitCritical+0x22>
 8003a70:	2300      	movs	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	2000013c 	.word	0x2000013c
	...

08003a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a90:	f3ef 8009 	mrs	r0, PSP
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <pxCurrentTCBConst>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003aa0:	6010      	str	r0, [r2, #0]
 8003aa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003aa6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003aaa:	f380 8811 	msr	BASEPRI, r0
 8003aae:	f001 f91b 	bl	8004ce8 <vTaskSwitchContext>
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f380 8811 	msr	BASEPRI, r0
 8003aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	6808      	ldr	r0, [r1, #0]
 8003ac2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ac6:	f380 8809 	msr	PSP, r0
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	4770      	bx	lr

08003ad0 <pxCurrentTCBConst>:
 8003ad0:	20004618 	.word	0x20004618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop

08003ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
	__asm volatile
 8003ade:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003af0:	f001 f844 	bl	8004b7c <xTaskIncrementTick>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <SysTick_Handler+0x3c>)
 8003afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <vPortSetupTimerInterrupt+0x24>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <vPortSetupTimerInterrupt+0x28>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <vPortSetupTimerInterrupt+0x2c>)
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <vPortSetupTimerInterrupt+0x30>)
 8003b2c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b2e:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <vPortSetupTimerInterrupt+0x24>)
 8003b30:	2207      	movs	r2, #7
 8003b32:	601a      	str	r2, [r3, #0]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e010 	.word	0xe000e010
 8003b40:	e000e018 	.word	0xe000e018
 8003b44:	e000e014 	.word	0xe000e014
 8003b48:	0001193f 	.word	0x0001193f

08003b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003b58:	f000 ff66 	bl	8004a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <pvPortMalloc+0x114>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b64:	f000 f8c0 	bl	8003ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <pvPortMalloc+0x118>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d16d      	bne.n	8003c50 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	3308      	adds	r3, #8
 8003b94:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d059      	beq.n	8003c50 <pvPortMalloc+0x104>
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <pvPortMalloc+0x11c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d854      	bhi.n	8003c50 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ba6:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <pvPortMalloc+0x120>)
 8003ba8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <pvPortMalloc+0x120>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bb0:	e004      	b.n	8003bbc <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d203      	bcs.n	8003bce <pvPortMalloc+0x82>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f1      	bne.n	8003bb2 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <pvPortMalloc+0x114>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d03b      	beq.n	8003c50 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90f      	bls.n	8003c1a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	1ad2      	subs	r2, r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f000 f8c9 	bl	8003dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <pvPortMalloc+0x11c>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <pvPortMalloc+0x11c>)
 8003c26:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <pvPortMalloc+0x11c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <pvPortMalloc+0x124>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d203      	bcs.n	8003c3c <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <pvPortMalloc+0x11c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <pvPortMalloc+0x124>)
 8003c3a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <pvPortMalloc+0x118>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c50:	f000 fef8 	bl	8004a44 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8003c54:	68fb      	ldr	r3, [r7, #12]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20004608 	.word	0x20004608
 8003c64:	20004614 	.word	0x20004614
 8003c68:	2000460c 	.word	0x2000460c
 8003c6c:	20004600 	.word	0x20004600
 8003c70:	20004610 	.word	0x20004610

08003c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d027      	beq.n	8003cd6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c86:	2308      	movs	r3, #8
 8003c88:	425b      	negs	r3, r3
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vPortFree+0x6c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d019      	beq.n	8003cd6 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d115      	bne.n	8003cd6 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <vPortFree+0x6c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cba:	f000 feb5 	bl	8004a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <vPortFree+0x70>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <vPortFree+0x70>)
 8003cca:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ccc:	68b8      	ldr	r0, [r7, #8]
 8003cce:	f000 f86d 	bl	8003dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003cd2:	f000 feb7 	bl	8004a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20004614 	.word	0x20004614
 8003ce4:	2000460c 	.word	0x2000460c

08003ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cee:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <prvHeapInit+0xac>)
 8003cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3307      	adds	r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <prvHeapInit+0xac>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <prvHeapInit+0xb0>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <prvHeapInit+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d34:	2208      	movs	r2, #8
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <prvHeapInit+0xb4>)
 8003d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <prvHeapInit+0xb4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <prvHeapInit+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <prvHeapInit+0xb4>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <prvHeapInit+0xb8>)
 8003d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <prvHeapInit+0xbc>)
 8003d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <prvHeapInit+0xc0>)
 8003d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000200 	.word	0x20000200
 8003d98:	20004600 	.word	0x20004600
 8003d9c:	20004608 	.word	0x20004608
 8003da0:	20004610 	.word	0x20004610
 8003da4:	2000460c 	.word	0x2000460c
 8003da8:	20004614 	.word	0x20004614

08003dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <prvInsertBlockIntoFreeList+0xa8>)
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e002      	b.n	8003dc0 <prvInsertBlockIntoFreeList+0x14>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3f7      	bcc.n	8003dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d108      	bne.n	8003dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d118      	bne.n	8003e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d00d      	beq.n	8003e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e008      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d002      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20004600 	.word	0x20004600
 8003e58:	20004608 	.word	0x20004608

08003e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8003e6a:	f7ff fddd 	bl	8003a28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	441a      	add	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	441a      	add	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	22ff      	movs	r2, #255	; 0xff
 8003eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d114      	bne.n	8003eea <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01a      	beq.n	8003efe <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3310      	adds	r3, #16
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 ff85 	bl	8004ddc <xTaskRemoveFromEventList>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <xQueueGenericReset+0xb0>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	e009      	b.n	8003efe <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3310      	adds	r3, #16
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fc5c 	bl	80037ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3324      	adds	r3, #36	; 0x24
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fc57 	bl	80037ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003efe:	f7ff fdab 	bl	8003a58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d102      	bne.n	8003f2a <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e004      	b.n	8003f34 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3348      	adds	r3, #72	; 0x48
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fe07 	bl	8003b4c <pvPortMalloc>
 8003f3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	3348      	adds	r3, #72	; 0x48
 8003f4a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f4c:	79fa      	ldrb	r2, [r7, #7]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f805 	bl	8003f68 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f96:	2101      	movs	r1, #1
 8003f98:	69b8      	ldr	r0, [r7, #24]
 8003f9a:	f7ff ff5f 	bl	8003e5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fbe:	f7ff fd33 	bl	8003a28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <xQueueGenericSend+0x2c>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d129      	bne.n	8004028 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	6a38      	ldr	r0, [r7, #32]
 8003fda:	f000 fa7b 	bl	80044d4 <prvCopyDataToQueue>
 8003fde:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d010      	beq.n	800400a <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fef5 	bl	8004ddc <xTaskRemoveFromEventList>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ff8:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <xQueueGenericSend+0x150>)
 8003ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	e00a      	b.n	8004020 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <xQueueGenericSend+0x150>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004020:	f7ff fd1a 	bl	8003a58 <vPortExitCritical>
				return pdPASS;
 8004024:	2301      	movs	r3, #1
 8004026:	e063      	b.n	80040f0 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800402e:	f7ff fd13 	bl	8003a58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004032:	2300      	movs	r3, #0
 8004034:	e05c      	b.n	80040f0 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4618      	mov	r0, r3
 8004042:	f000 ff1f 	bl	8004e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800404a:	f7ff fd05 	bl	8003a58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800404e:	f000 fceb 	bl	8004a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004052:	f7ff fce9 	bl	8003a28 <vPortEnterCritical>
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800405c:	b25b      	sxtb	r3, r3
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d103      	bne.n	800406c <xQueueGenericSend+0xc4>
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004072:	b25b      	sxtb	r3, r3
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d103      	bne.n	8004082 <xQueueGenericSend+0xda>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004082:	f7ff fce9 	bl	8003a58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004086:	1d3a      	adds	r2, r7, #4
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff0e 	bl	8004eb0 <xTaskCheckForTimeOut>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d124      	bne.n	80040e4 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800409a:	6a38      	ldr	r0, [r7, #32]
 800409c:	f000 fb04 	bl	80046a8 <prvIsQueueFull>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	3310      	adds	r3, #16
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe60 	bl	8004d74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040b4:	6a38      	ldr	r0, [r7, #32]
 80040b6:	f000 fa8f 	bl	80045d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ba:	f000 fcc3 	bl	8004a44 <xTaskResumeAll>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af7c 	bne.w	8003fbe <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <xQueueGenericSend+0x150>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e772      	b.n	8003fbe <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040d8:	6a38      	ldr	r0, [r7, #32]
 80040da:	f000 fa7d 	bl	80045d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040de:	f000 fcb1 	bl	8004a44 <xTaskResumeAll>
 80040e2:	e76c      	b.n	8003fbe <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040e4:	6a38      	ldr	r0, [r7, #32]
 80040e6:	f000 fa77 	bl	80045d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ea:	f000 fcab 	bl	8004a44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ee:	2300      	movs	r3, #0
		}
	}
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3728      	adds	r7, #40	; 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	; 0x30
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 800410e:	f3ef 8211 	mrs	r2, BASEPRI
 8004112:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	61fa      	str	r2, [r7, #28]
 8004124:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004126:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <xQueueGenericSendFromISR+0x40>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d12c      	bne.n	8004196 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414c:	f000 f9c2 	bl	80044d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004150:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d112      	bne.n	8004180 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	3324      	adds	r3, #36	; 0x24
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fe38 	bl	8004ddc <xTaskRemoveFromEventList>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00e      	beq.n	8004190 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e007      	b.n	8004190 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004184:	3301      	adds	r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	b25a      	sxtb	r2, r3
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004190:	2301      	movs	r3, #1
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8004194:	e001      	b.n	800419a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08a      	sub	sp, #40	; 0x28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	623b      	str	r3, [r7, #32]
	__asm volatile
 80041bc:	f3ef 8211 	mrs	r2, BASEPRI
 80041c0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613a      	str	r2, [r7, #16]
 80041d2:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80041d4:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041d6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d929      	bls.n	800423c <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ee:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d112      	bne.n	8004228 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d015      	beq.n	8004236 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	3324      	adds	r3, #36	; 0x24
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fde4 	bl	8004ddc <xTaskRemoveFromEventList>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e006      	b.n	8004236 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	3301      	adds	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	b25a      	sxtb	r2, r3
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	e001      	b.n	8004240 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08a      	sub	sp, #40	; 0x28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004268:	f7ff fbde 	bl	8003a28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01f      	beq.n	80042b8 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	6a38      	ldr	r0, [r7, #32]
 800427c:	f000 f986 	bl	800458c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	1e5a      	subs	r2, r3, #1
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00f      	beq.n	80042b0 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	3310      	adds	r3, #16
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fda1 	bl	8004ddc <xTaskRemoveFromEventList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042a0:	4b3c      	ldr	r3, [pc, #240]	; (8004394 <xQueueReceive+0x140>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042b0:	f7ff fbd2 	bl	8003a58 <vPortExitCritical>
				return pdPASS;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e069      	b.n	800438c <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042be:	f7ff fbcb 	bl	8003a58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e062      	b.n	800438c <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fdd7 	bl	8004e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042da:	f7ff fbbd 	bl	8003a58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042de:	f000 fba3 	bl	8004a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042e2:	f7ff fba1 	bl	8003a28 <vPortEnterCritical>
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d103      	bne.n	80042fc <xQueueReceive+0xa8>
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004302:	b25b      	sxtb	r3, r3
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d103      	bne.n	8004312 <xQueueReceive+0xbe>
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004312:	f7ff fba1 	bl	8003a58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004316:	1d3a      	adds	r2, r7, #4
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fdc6 	bl	8004eb0 <xTaskCheckForTimeOut>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d123      	bne.n	8004372 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800432a:	6a38      	ldr	r0, [r7, #32]
 800432c:	f000 f9a6 	bl	800467c <prvIsQueueEmpty>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d017      	beq.n	8004366 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fd18 	bl	8004d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004344:	6a38      	ldr	r0, [r7, #32]
 8004346:	f000 f947 	bl	80045d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800434a:	f000 fb7b 	bl	8004a44 <xTaskResumeAll>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d189      	bne.n	8004268 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <xQueueReceive+0x140>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	e780      	b.n	8004268 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004366:	6a38      	ldr	r0, [r7, #32]
 8004368:	f000 f936 	bl	80045d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800436c:	f000 fb6a 	bl	8004a44 <xTaskResumeAll>
 8004370:	e77a      	b.n	8004268 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004372:	6a38      	ldr	r0, [r7, #32]
 8004374:	f000 f930 	bl	80045d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004378:	f000 fb64 	bl	8004a44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800437c:	6a38      	ldr	r0, [r7, #32]
 800437e:	f000 f97d 	bl	800467c <prvIsQueueEmpty>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	f43f af6f 	beq.w	8004268 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800438a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800438c:	4618      	mov	r0, r3
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	61bb      	str	r3, [r7, #24]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80043aa:	f7ff fb3d 	bl	8003a28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	617b      	str	r3, [r7, #20]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01b      	beq.n	80043f2 <xQueueSemaphoreTake+0x5a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00f      	beq.n	80043ea <xQueueSemaphoreTake+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3310      	adds	r3, #16
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fd04 	bl	8004ddc <xTaskRemoveFromEventList>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <xQueueSemaphoreTake+0x52>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <xQueueSemaphoreTake+0x138>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043ea:	f7ff fb35 	bl	8003a58 <vPortExitCritical>
				return pdPASS;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e069      	b.n	80044c6 <xQueueSemaphoreTake+0x12e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <xQueueSemaphoreTake+0x68>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043f8:	f7ff fb2e 	bl	8003a58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e062      	b.n	80044c6 <xQueueSemaphoreTake+0x12e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <xQueueSemaphoreTake+0x7c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd3a 	bl	8004e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004410:	2301      	movs	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004414:	f7ff fb20 	bl	8003a58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004418:	f000 fb06 	bl	8004a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800441c:	f7ff fb04 	bl	8003a28 <vPortEnterCritical>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004426:	b25b      	sxtb	r3, r3
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d103      	bne.n	8004436 <xQueueSemaphoreTake+0x9e>
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443c:	b25b      	sxtb	r3, r3
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d103      	bne.n	800444c <xQueueSemaphoreTake+0xb4>
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800444c:	f7ff fb04 	bl	8003a58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004450:	463a      	mov	r2, r7
 8004452:	f107 030c 	add.w	r3, r7, #12
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fd29 	bl	8004eb0 <xTaskCheckForTimeOut>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d123      	bne.n	80044ac <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004464:	69b8      	ldr	r0, [r7, #24]
 8004466:	f000 f909 	bl	800467c <prvIsQueueEmpty>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d017      	beq.n	80044a0 <xQueueSemaphoreTake+0x108>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	3324      	adds	r3, #36	; 0x24
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fc7b 	bl	8004d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800447e:	69b8      	ldr	r0, [r7, #24]
 8004480:	f000 f8aa 	bl	80045d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004484:	f000 fade 	bl	8004a44 <xTaskResumeAll>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d18d      	bne.n	80043aa <xQueueSemaphoreTake+0x12>
				{
					portYIELD_WITHIN_API();
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <xQueueSemaphoreTake+0x138>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	e784      	b.n	80043aa <xQueueSemaphoreTake+0x12>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044a0:	69b8      	ldr	r0, [r7, #24]
 80044a2:	f000 f899 	bl	80045d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a6:	f000 facd 	bl	8004a44 <xTaskResumeAll>
 80044aa:	e77e      	b.n	80043aa <xQueueSemaphoreTake+0x12>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80044ac:	69b8      	ldr	r0, [r7, #24]
 80044ae:	f000 f893 	bl	80045d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044b2:	f000 fac7 	bl	8004a44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044b6:	69b8      	ldr	r0, [r7, #24]
 80044b8:	f000 f8e0 	bl	800467c <prvIsQueueEmpty>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f43f af73 	beq.w	80043aa <xQueueSemaphoreTake+0x12>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000ed04 	.word	0xe000ed04

080044d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d043      	beq.n	800457a <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d119      	bne.n	800452c <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6898      	ldr	r0, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	461a      	mov	r2, r3
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	f001 fa96 	bl	8005a34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d32b      	bcc.n	800457a <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	e026      	b.n	800457a <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68d8      	ldr	r0, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	461a      	mov	r2, r3
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	f001 fa7c 	bl	8005a34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	425b      	negs	r3, r3
 8004546:	441a      	add	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d207      	bcs.n	8004568 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	425b      	negs	r3, r3
 8004562:	441a      	add	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d105      	bne.n	800457a <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3b01      	subs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004582:	693b      	ldr	r3, [r7, #16]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	441a      	add	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d303      	bcc.n	80045c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68d9      	ldr	r1, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	461a      	mov	r2, r3
 80045ca:	6838      	ldr	r0, [r7, #0]
 80045cc:	f001 fa32 	bl	8005a34 <memcpy>
	}
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045e0:	f7ff fa22 	bl	8003a28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045ec:	e011      	b.n	8004612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d012      	beq.n	800461c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fbee 	bl	8004ddc <xTaskRemoveFromEventList>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004606:	f000 fc99 	bl	8004f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	3b01      	subs	r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	dce9      	bgt.n	80045ee <prvUnlockQueue+0x16>
 800461a:	e000      	b.n	800461e <prvUnlockQueue+0x46>
					break;
 800461c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	22ff      	movs	r2, #255	; 0xff
 8004622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004626:	f7ff fa17 	bl	8003a58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800462a:	f7ff f9fd 	bl	8003a28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004636:	e011      	b.n	800465c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d012      	beq.n	8004666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3310      	adds	r3, #16
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fbc9 	bl	8004ddc <xTaskRemoveFromEventList>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004650:	f000 fc74 	bl	8004f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	3b01      	subs	r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800465c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004660:	2b00      	cmp	r3, #0
 8004662:	dce9      	bgt.n	8004638 <prvUnlockQueue+0x60>
 8004664:	e000      	b.n	8004668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	22ff      	movs	r2, #255	; 0xff
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004670:	f7ff f9f2 	bl	8003a58 <vPortExitCritical>
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004684:	f7ff f9d0 	bl	8003a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e001      	b.n	800469a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800469a:	f7ff f9dd 	bl	8003a58 <vPortExitCritical>

	return xReturn;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046b0:	f7ff f9ba 	bl	8003a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	429a      	cmp	r2, r3
 80046be:	d102      	bne.n	80046c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e001      	b.n	80046ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046ca:	f7ff f9c5 	bl	8003a58 <vPortExitCritical>

	return xReturn;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046e8:	f7ff f99e 	bl	8003a28 <vPortEnterCritical>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f2:	b25b      	sxtb	r3, r3
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d103      	bne.n	8004702 <vQueueWaitForMessageRestricted+0x2a>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004708:	b25b      	sxtb	r3, r3
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d103      	bne.n	8004718 <vQueueWaitForMessageRestricted+0x40>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004718:	f7ff f99e 	bl	8003a58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3324      	adds	r3, #36	; 0x24
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fb37 	bl	8004da0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f7ff ff50 	bl	80045d8 <prvUnlockQueue>
	}
 8004738:	bf00      	nop
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af04      	add	r7, sp, #16
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff f9f9 	bl	8003b4c <pvPortMalloc>
 800475a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00e      	beq.n	8004780 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004762:	204c      	movs	r0, #76	; 0x4c
 8004764:	f7ff f9f2 	bl	8003b4c <pvPortMalloc>
 8004768:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
 8004776:	e005      	b.n	8004784 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f7ff fa7b 	bl	8003c74 <vPortFree>
 800477e:	e001      	b.n	8004784 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d013      	beq.n	80047b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	2300      	movs	r3, #0
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	9302      	str	r3, [sp, #8]
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f80e 	bl	80047c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047a6:	69f8      	ldr	r0, [r7, #28]
 80047a8:	f000 f874 	bl	8004894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e002      	b.n	80047b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047b8:	69bb      	ldr	r3, [r7, #24]
	}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047da:	3b01      	subs	r3, #1
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e012      	b.n	8004816 <prvInitialiseNewTask+0x54>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	7819      	ldrb	r1, [r3, #0]
 80047f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4413      	add	r3, r2
 80047fe:	3334      	adds	r3, #52	; 0x34
 8004800:	460a      	mov	r2, r1
 8004802:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4413      	add	r3, r2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <prvInitialiseNewTask+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3301      	adds	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d9e9      	bls.n	80047f0 <prvInitialiseNewTask+0x2e>
 800481c:	e000      	b.n	8004820 <prvInitialiseNewTask+0x5e>
		{
			break;
 800481e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d901      	bls.n	8004832 <prvInitialiseNewTask+0x70>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800482e:	2304      	movs	r3, #4
 8004830:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	3304      	adds	r3, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe ffd4 	bl	80037ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	3318      	adds	r3, #24
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe ffcf 	bl	80037ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f1c3 0205 	rsb	r2, r3, #5
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	2200      	movs	r2, #0
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	6938      	ldr	r0, [r7, #16]
 8004876:	f7ff f849 	bl	800390c <pxPortInitialiseStack>
 800487a:	4602      	mov	r2, r0
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <prvInitialiseNewTask+0xca>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800488a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800489c:	f7ff f8c4 	bl	8003a28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048a0:	4b2a      	ldr	r3, [pc, #168]	; (800494c <prvAddNewTaskToReadyList+0xb8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a29      	ldr	r2, [pc, #164]	; (800494c <prvAddNewTaskToReadyList+0xb8>)
 80048a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048aa:	4b29      	ldr	r3, [pc, #164]	; (8004950 <prvAddNewTaskToReadyList+0xbc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048b2:	4a27      	ldr	r2, [pc, #156]	; (8004950 <prvAddNewTaskToReadyList+0xbc>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <prvAddNewTaskToReadyList+0xb8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d110      	bne.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048c0:	f000 fb62 	bl	8004f88 <prvInitialiseTaskLists>
 80048c4:	e00d      	b.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <prvAddNewTaskToReadyList+0xc0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <prvAddNewTaskToReadyList+0xbc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	429a      	cmp	r2, r3
 80048da:	d802      	bhi.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048dc:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <prvAddNewTaskToReadyList+0xbc>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <prvAddNewTaskToReadyList+0xc4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <prvAddNewTaskToReadyList+0xc4>)
 80048ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <prvAddNewTaskToReadyList+0xc8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <prvAddNewTaskToReadyList+0xc8>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <prvAddNewTaskToReadyList+0xcc>)
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe ff74 	bl	8003802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800491a:	f7ff f89d 	bl	8003a58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <prvAddNewTaskToReadyList+0xc0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00e      	beq.n	8004944 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <prvAddNewTaskToReadyList+0xbc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	429a      	cmp	r2, r3
 8004932:	d207      	bcs.n	8004944 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <prvAddNewTaskToReadyList+0xd0>)
 8004936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200046f0 	.word	0x200046f0
 8004950:	20004618 	.word	0x20004618
 8004954:	200046fc 	.word	0x200046fc
 8004958:	2000470c 	.word	0x2000470c
 800495c:	200046f8 	.word	0x200046f8
 8004960:	2000461c 	.word	0x2000461c
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800497a:	f000 f855 	bl	8004a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800497e:	2100      	movs	r1, #0
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fbbf 	bl	8005104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004986:	f000 f85d 	bl	8004a44 <xTaskResumeAll>
 800498a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <vTaskDelay+0x44>)
 8004994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <vTaskStartScheduler+0x60>)
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2300      	movs	r3, #0
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	4914      	ldr	r1, [pc, #80]	; (8004a14 <vTaskStartScheduler+0x64>)
 80049c4:	4814      	ldr	r0, [pc, #80]	; (8004a18 <vTaskStartScheduler+0x68>)
 80049c6:	f7ff febb 	bl	8004740 <xTaskCreate>
 80049ca:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d102      	bne.n	80049d8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80049d2:	f000 fbfd 	bl	80051d0 <xTimerCreateTimerTask>
 80049d6:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d114      	bne.n	8004a08 <vTaskStartScheduler+0x58>
	__asm volatile
 80049de:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <vTaskStartScheduler+0x6c>)
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <vTaskStartScheduler+0x70>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <vTaskStartScheduler+0x74>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a04:	f7fe fff0 	bl	80039e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20004714 	.word	0x20004714
 8004a14:	08006abc 	.word	0x08006abc
 8004a18:	08004f55 	.word	0x08004f55
 8004a1c:	20004710 	.word	0x20004710
 8004a20:	200046fc 	.word	0x200046fc
 8004a24:	200046f4 	.word	0x200046f4

08004a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20004718 	.word	0x20004718

08004a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a52:	f7fe ffe9 	bl	8003a28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a56:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <xTaskResumeAll+0xf8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <xTaskResumeAll+0xf8>)
 8004a5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a60:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <xTaskResumeAll+0xf8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d161      	bne.n	8004b2c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a68:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <xTaskResumeAll+0xfc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05d      	beq.n	8004b2c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a70:	e02e      	b.n	8004ad0 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a72:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <xTaskResumeAll+0x100>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3318      	adds	r3, #24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe ff1a 	bl	80038b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe ff15 	bl	80038b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	2201      	movs	r2, #1
 8004a94:	409a      	lsls	r2, r3
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <xTaskResumeAll+0x104>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <xTaskResumeAll+0x104>)
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <xTaskResumeAll+0x108>)
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f7fe fea3 	bl	8003802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <xTaskResumeAll+0x10c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8004aca:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <xTaskResumeAll+0x110>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <xTaskResumeAll+0x100>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1cc      	bne.n	8004a72 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ade:	f000 facf 	bl	8005080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <xTaskResumeAll+0x114>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004aee:	f000 f845 	bl	8004b7c <xTaskIncrementTick>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <xTaskResumeAll+0x110>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f1      	bne.n	8004aee <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <xTaskResumeAll+0x114>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xTaskResumeAll+0x110>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <xTaskResumeAll+0x118>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b2c:	f7fe ff94 	bl	8003a58 <vPortExitCritical>

	return xAlreadyYielded;
 8004b30:	68bb      	ldr	r3, [r7, #8]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20004718 	.word	0x20004718
 8004b40:	200046f0 	.word	0x200046f0
 8004b44:	200046b0 	.word	0x200046b0
 8004b48:	200046f8 	.word	0x200046f8
 8004b4c:	2000461c 	.word	0x2000461c
 8004b50:	20004618 	.word	0x20004618
 8004b54:	20004704 	.word	0x20004704
 8004b58:	20004700 	.word	0x20004700
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <xTaskGetTickCount+0x18>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b6c:	687b      	ldr	r3, [r7, #4]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	200046f4 	.word	0x200046f4

08004b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b86:	4b4d      	ldr	r3, [pc, #308]	; (8004cbc <xTaskIncrementTick+0x140>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 8083 	bne.w	8004c96 <xTaskIncrementTick+0x11a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b90:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <xTaskIncrementTick+0x144>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b98:	4a49      	ldr	r2, [pc, #292]	; (8004cc0 <xTaskIncrementTick+0x144>)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d110      	bne.n	8004bc6 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ba4:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <xTaskIncrementTick+0x148>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a45      	ldr	r2, [pc, #276]	; (8004cc4 <xTaskIncrementTick+0x148>)
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4a45      	ldr	r2, [pc, #276]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b44      	ldr	r3, [pc, #272]	; (8004ccc <xTaskIncrementTick+0x150>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	4a43      	ldr	r2, [pc, #268]	; (8004ccc <xTaskIncrementTick+0x150>)
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	f000 fa5d 	bl	8005080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bc6:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <xTaskIncrementTick+0x154>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d34d      	bcc.n	8004c6c <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <xTaskIncrementTick+0x148>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <xTaskIncrementTick+0x62>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <xTaskIncrementTick+0x64>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be4:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <xTaskIncrementTick+0x154>)
 8004be6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bea:	601a      	str	r2, [r3, #0]
					break;
 8004bec:	e03e      	b.n	8004c6c <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bee:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <xTaskIncrementTick+0x148>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d203      	bcs.n	8004c0e <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c06:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <xTaskIncrementTick+0x154>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6013      	str	r3, [r2, #0]
						break;
 8004c0c:	e02e      	b.n	8004c6c <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fe50 	bl	80038b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	3318      	adds	r3, #24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fe47 	bl	80038b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	2201      	movs	r2, #1
 8004c30:	409a      	lsls	r2, r3
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <xTaskIncrementTick+0x158>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <xTaskIncrementTick+0x158>)
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <xTaskIncrementTick+0x15c>)
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f7fe fdd5 	bl	8003802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <xTaskIncrementTick+0x160>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d3b4      	bcc.n	8004bd0 <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6a:	e7b1      	b.n	8004bd0 <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <xTaskIncrementTick+0x160>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4919      	ldr	r1, [pc, #100]	; (8004cd8 <xTaskIncrementTick+0x15c>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d901      	bls.n	8004c88 <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <xTaskIncrementTick+0x164>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <xTaskIncrementTick+0x128>
			{
				vApplicationTickHook();
 8004c90:	f7fc fef2 	bl	8001a78 <vApplicationTickHook>
 8004c94:	e006      	b.n	8004ca4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <xTaskIncrementTick+0x164>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <xTaskIncrementTick+0x164>)
 8004c9e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004ca0:	f7fc feea 	bl	8001a78 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <xTaskIncrementTick+0x168>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cb0:	697b      	ldr	r3, [r7, #20]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20004718 	.word	0x20004718
 8004cc0:	200046f4 	.word	0x200046f4
 8004cc4:	200046a8 	.word	0x200046a8
 8004cc8:	200046ac 	.word	0x200046ac
 8004ccc:	20004708 	.word	0x20004708
 8004cd0:	20004710 	.word	0x20004710
 8004cd4:	200046f8 	.word	0x200046f8
 8004cd8:	2000461c 	.word	0x2000461c
 8004cdc:	20004618 	.word	0x20004618
 8004ce0:	20004700 	.word	0x20004700
 8004ce4:	20004704 	.word	0x20004704

08004ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <vTaskSwitchContext+0x78>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <vTaskSwitchContext+0x7c>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cfc:	e02a      	b.n	8004d54 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <vTaskSwitchContext+0x7c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <vTaskSwitchContext+0x80>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f1c3 031f 	rsb	r3, r3, #31
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <vTaskSwitchContext+0x84>)
 8004d26:	4413      	add	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d104      	bne.n	8004d4a <vTaskSwitchContext+0x62>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <vTaskSwitchContext+0x88>)
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20004718 	.word	0x20004718
 8004d64:	20004704 	.word	0x20004704
 8004d68:	200046f8 	.word	0x200046f8
 8004d6c:	2000461c 	.word	0x2000461c
 8004d70:	20004618 	.word	0x20004618

08004d74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <vTaskPlaceOnEventList+0x28>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3318      	adds	r3, #24
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fe fd5e 	bl	8003848 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	6838      	ldr	r0, [r7, #0]
 8004d90:	f000 f9b8 	bl	8005104 <prvAddCurrentTaskToDelayedList>
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20004618 	.word	0x20004618

08004da0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dac:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <vTaskPlaceOnEventListRestricted+0x38>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3318      	adds	r3, #24
 8004db2:	4619      	mov	r1, r3
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7fe fd24 	bl	8003802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8004dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f000 f99b 	bl	8005104 <prvAddCurrentTaskToDelayedList>
	}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20004618 	.word	0x20004618

08004ddc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	3318      	adds	r3, #24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe fd61 	bl	80038b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <xTaskRemoveFromEventList+0x90>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11c      	bne.n	8004e38 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3304      	adds	r3, #4
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fd58 	bl	80038b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <xTaskRemoveFromEventList+0x94>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <xTaskRemoveFromEventList+0x94>)
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <xTaskRemoveFromEventList+0x98>)
 8004e28:	441a      	add	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fe fce6 	bl	8003802 <vListInsertEnd>
 8004e36:	e005      	b.n	8004e44 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3318      	adds	r3, #24
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	480e      	ldr	r0, [pc, #56]	; (8004e78 <xTaskRemoveFromEventList+0x9c>)
 8004e40:	f7fe fcdf 	bl	8003802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <xTaskRemoveFromEventList+0xa0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d905      	bls.n	8004e5e <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <xTaskRemoveFromEventList+0xa4>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e001      	b.n	8004e62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20004718 	.word	0x20004718
 8004e70:	200046f8 	.word	0x200046f8
 8004e74:	2000461c 	.word	0x2000461c
 8004e78:	200046b0 	.word	0x200046b0
 8004e7c:	20004618 	.word	0x20004618
 8004e80:	20004704 	.word	0x20004704

08004e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <vTaskInternalSetTimeOutState+0x24>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <vTaskInternalSetTimeOutState+0x28>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20004708 	.word	0x20004708
 8004eac:	200046f4 	.word	0x200046f4

08004eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8004eba:	f7fe fdb5 	bl	8003a28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <xTaskCheckForTimeOut+0x84>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d102      	bne.n	8004ede <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e023      	b.n	8004f26 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xTaskCheckForTimeOut+0x88>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d007      	beq.n	8004efa <xTaskCheckForTimeOut+0x4a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d802      	bhi.n	8004efa <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e015      	b.n	8004f26 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d90b      	bls.n	8004f1c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ffb7 	bl	8004e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e004      	b.n	8004f26 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f26:	f7fe fd97 	bl	8003a58 <vPortExitCritical>

	return xReturn;
 8004f2a:	697b      	ldr	r3, [r7, #20]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200046f4 	.word	0x200046f4
 8004f38:	20004708 	.word	0x20004708

08004f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <vTaskMissedYield+0x14>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20004704 	.word	0x20004704

08004f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f5c:	f000 f854 	bl	8005008 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvIdleTask+0x2c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d907      	bls.n	8004f78 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <prvIdleTask+0x30>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004f78:	f7fc fd78 	bl	8001a6c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004f7c:	e7ee      	b.n	8004f5c <prvIdleTask+0x8>
 8004f7e:	bf00      	nop
 8004f80:	2000461c 	.word	0x2000461c
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	e00c      	b.n	8004fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <prvInitialiseTaskLists+0x60>)
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fc02 	bl	80037ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3301      	adds	r3, #1
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d9ef      	bls.n	8004f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fb4:	480d      	ldr	r0, [pc, #52]	; (8004fec <prvInitialiseTaskLists+0x64>)
 8004fb6:	f7fe fbf9 	bl	80037ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fba:	480d      	ldr	r0, [pc, #52]	; (8004ff0 <prvInitialiseTaskLists+0x68>)
 8004fbc:	f7fe fbf6 	bl	80037ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fc0:	480c      	ldr	r0, [pc, #48]	; (8004ff4 <prvInitialiseTaskLists+0x6c>)
 8004fc2:	f7fe fbf3 	bl	80037ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fc6:	480c      	ldr	r0, [pc, #48]	; (8004ff8 <prvInitialiseTaskLists+0x70>)
 8004fc8:	f7fe fbf0 	bl	80037ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fcc:	480b      	ldr	r0, [pc, #44]	; (8004ffc <prvInitialiseTaskLists+0x74>)
 8004fce:	f7fe fbed 	bl	80037ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <prvInitialiseTaskLists+0x78>)
 8004fd4:	4a05      	ldr	r2, [pc, #20]	; (8004fec <prvInitialiseTaskLists+0x64>)
 8004fd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <prvInitialiseTaskLists+0x7c>)
 8004fda:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <prvInitialiseTaskLists+0x68>)
 8004fdc:	601a      	str	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	2000461c 	.word	0x2000461c
 8004fec:	20004680 	.word	0x20004680
 8004ff0:	20004694 	.word	0x20004694
 8004ff4:	200046b0 	.word	0x200046b0
 8004ff8:	200046c4 	.word	0x200046c4
 8004ffc:	200046dc 	.word	0x200046dc
 8005000:	200046a8 	.word	0x200046a8
 8005004:	200046ac 	.word	0x200046ac

08005008 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800500e:	e019      	b.n	8005044 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005010:	f7fe fd0a 	bl	8003a28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <prvCheckTasksWaitingTermination+0x4c>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fc49 	bl	80038b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <prvCheckTasksWaitingTermination+0x50>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <prvCheckTasksWaitingTermination+0x50>)
 800502e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <prvCheckTasksWaitingTermination+0x54>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3b01      	subs	r3, #1
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <prvCheckTasksWaitingTermination+0x54>)
 8005038:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800503a:	f7fe fd0d 	bl	8003a58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f80e 	bl	8005060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <prvCheckTasksWaitingTermination+0x54>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e1      	bne.n	8005010 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	200046c4 	.word	0x200046c4
 8005058:	200046f0 	.word	0x200046f0
 800505c:	200046d8 	.word	0x200046d8

08005060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fe01 	bl	8003c74 <vPortFree>
			vPortFree( pxTCB );
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe fdfe 	bl	8003c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <prvResetNextTaskUnblockTime+0x40>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <prvResetNextTaskUnblockTime+0x14>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <prvResetNextTaskUnblockTime+0x16>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <prvResetNextTaskUnblockTime+0x44>)
 800509c:	f04f 32ff 	mov.w	r2, #4294967295
 80050a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050a2:	e008      	b.n	80050b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <prvResetNextTaskUnblockTime+0x40>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <prvResetNextTaskUnblockTime+0x44>)
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	200046a8 	.word	0x200046a8
 80050c4:	20004710 	.word	0x20004710

080050c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <xTaskGetSchedulerState+0x34>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050d6:	2301      	movs	r3, #1
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	e008      	b.n	80050ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050dc:	4b08      	ldr	r3, [pc, #32]	; (8005100 <xTaskGetSchedulerState+0x38>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050e4:	2302      	movs	r3, #2
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	e001      	b.n	80050ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050ee:	687b      	ldr	r3, [r7, #4]
	}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200046fc 	.word	0x200046fc
 8005100:	20004718 	.word	0x20004718

08005104 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800510e:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005114:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3304      	adds	r3, #4
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fbcc 	bl	80038b8 <uxListRemove>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	2201      	movs	r2, #1
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43da      	mvns	r2, r3
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4013      	ands	r3, r2
 800513a:	4a20      	ldr	r2, [pc, #128]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800513c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d10a      	bne.n	800515c <prvAddCurrentTaskToDelayedList+0x58>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	481a      	ldr	r0, [pc, #104]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005156:	f7fe fb54 	bl	8003802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800515a:	e026      	b.n	80051aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4413      	add	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	d209      	bcs.n	8005188 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005174:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe fb61 	bl	8003848 <vListInsert>
}
 8005186:	e010      	b.n	80051aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f7fe fb57 	bl	8003848 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800519a:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d202      	bcs.n	80051aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6013      	str	r3, [r2, #0]
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200046f4 	.word	0x200046f4
 80051b8:	20004618 	.word	0x20004618
 80051bc:	200046f8 	.word	0x200046f8
 80051c0:	200046dc 	.word	0x200046dc
 80051c4:	200046ac 	.word	0x200046ac
 80051c8:	200046a8 	.word	0x200046a8
 80051cc:	20004710 	.word	0x20004710

080051d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051da:	f000 fa83 	bl	80056e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <xTimerCreateTimerTask+0x38>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <xTimerCreateTimerTask+0x3c>)
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	2303      	movs	r3, #3
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	2300      	movs	r3, #0
 80051f0:	2280      	movs	r2, #128	; 0x80
 80051f2:	4907      	ldr	r1, [pc, #28]	; (8005210 <xTimerCreateTimerTask+0x40>)
 80051f4:	4807      	ldr	r0, [pc, #28]	; (8005214 <xTimerCreateTimerTask+0x44>)
 80051f6:	f7ff faa3 	bl	8004740 <xTaskCreate>
 80051fa:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80051fc:	687b      	ldr	r3, [r7, #4]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	2000474c 	.word	0x2000474c
 800520c:	20004750 	.word	0x20004750
 8005210:	08006ac4 	.word	0x08006ac4
 8005214:	08005381 	.word	0x08005381

08005218 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005226:	2028      	movs	r0, #40	; 0x28
 8005228:	f7fe fc90 	bl	8003b4c <pvPortMalloc>
 800522c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f805 	bl	8005252 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005248:	697b      	ldr	r3, [r7, #20]
	}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	if( pxNewTimer != NULL )
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <prvInitialiseNewTimer+0x40>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005266:	f000 fa3d 	bl	80056e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe faac 	bl	80037ea <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052ae:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <xTimerGenericCommand+0x7c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02a      	beq.n	800530c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	dc18      	bgt.n	80052fa <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052c8:	f7ff fefe 	bl	80050c8 <xTaskGetSchedulerState>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d109      	bne.n	80052e6 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <xTimerGenericCommand+0x7c>)
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f107 0110 	add.w	r1, r7, #16
 80052da:	2300      	movs	r3, #0
 80052dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052de:	f7fe fe63 	bl	8003fa8 <xQueueGenericSend>
 80052e2:	61f8      	str	r0, [r7, #28]
 80052e4:	e012      	b.n	800530c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <xTimerGenericCommand+0x7c>)
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	f107 0110 	add.w	r1, r7, #16
 80052ee:	2300      	movs	r3, #0
 80052f0:	2200      	movs	r2, #0
 80052f2:	f7fe fe59 	bl	8003fa8 <xQueueGenericSend>
 80052f6:	61f8      	str	r0, [r7, #28]
 80052f8:	e008      	b.n	800530c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052fa:	4b07      	ldr	r3, [pc, #28]	; (8005318 <xTimerGenericCommand+0x7c>)
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	f107 0110 	add.w	r1, r7, #16
 8005302:	2300      	movs	r3, #0
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	f7fe fef9 	bl	80040fc <xQueueGenericSendFromISR>
 800530a:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800530c:	69fb      	ldr	r3, [r7, #28]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000474c 	.word	0x2000474c

0800531c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <prvProcessExpiredTimer+0x60>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3304      	adds	r3, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fabf 	bl	80038b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d114      	bne.n	800536c <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	18d1      	adds	r1, r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8bc 	bl	80054cc <prvInsertTimerInActiveList>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	2100      	movs	r1, #0
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff ff99 	bl	800529c <xTimerGenericCommand>
 800536a:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	4798      	blx	r3
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20004744 	.word	0x20004744

08005380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8005388:	f7fc fb5c 	bl	8001a44 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800538c:	f107 0308 	add.w	r3, r7, #8
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f857 	bl	8005444 <prvGetNextExpireTime>
 8005396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f803 	bl	80053a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053a2:	f000 f8d5 	bl	8005550 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053a6:	e7f1      	b.n	800538c <prvTimerTask+0xc>

080053a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053b2:	f7ff fb39 	bl	8004a28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f866 	bl	800548c <prvSampleTimeNow>
 80053c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d130      	bne.n	800542a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <prvProcessTimerOrBlockTask+0x3c>
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d806      	bhi.n	80053e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053d6:	f7ff fb35 	bl	8004a44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053da:	68f9      	ldr	r1, [r7, #12]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ff9d 	bl	800531c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053e2:	e024      	b.n	800542e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053ea:	4b13      	ldr	r3, [pc, #76]	; (8005438 <prvProcessTimerOrBlockTask+0x90>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <prvProcessTimerOrBlockTask+0x94>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4619      	mov	r1, r3
 800540a:	f7ff f965 	bl	80046d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800540e:	f7ff fb19 	bl	8004a44 <xTaskResumeAll>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005418:	4b09      	ldr	r3, [pc, #36]	; (8005440 <prvProcessTimerOrBlockTask+0x98>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
}
 8005428:	e001      	b.n	800542e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800542a:	f7ff fb0b 	bl	8004a44 <xTaskResumeAll>
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20004748 	.word	0x20004748
 800543c:	2000474c 	.word	0x2000474c
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <prvGetNextExpireTime+0x44>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <prvGetNextExpireTime+0x44>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e001      	b.n	800547a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20004744 	.word	0x20004744

0800548c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005494:	f7ff fb64 	bl	8004b60 <xTaskGetTickCount>
 8005498:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <prvSampleTimeNow+0x3c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d205      	bcs.n	80054b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054a4:	f000 f8ca 	bl	800563c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e002      	b.n	80054b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054b6:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <prvSampleTimeNow+0x3c>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054bc:	68fb      	ldr	r3, [r7, #12]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20004754 	.word	0x20004754

080054cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d812      	bhi.n	8005518 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e01b      	b.n	800553e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <prvInsertTimerInActiveList+0x7c>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7fe f999 	bl	8003848 <vListInsert>
 8005516:	e012      	b.n	800553e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d206      	bcs.n	800552e <prvInsertTimerInActiveList+0x62>
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d302      	bcc.n	800552e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e007      	b.n	800553e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800552e:	4b07      	ldr	r3, [pc, #28]	; (800554c <prvInsertTimerInActiveList+0x80>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7fe f985 	bl	8003848 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800553e:	697b      	ldr	r3, [r7, #20]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20004748 	.word	0x20004748
 800554c:	20004744 	.word	0x20004744

08005550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005556:	e060      	b.n	800561a <prvProcessReceivedCommands+0xca>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db5d      	blt.n	800561a <prvProcessReceivedCommands+0xca>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe f9a2 	bl	80038b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff88 	bl	800548c <prvSampleTimeNow>
 800557c:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b09      	cmp	r3, #9
 8005582:	d849      	bhi.n	8005618 <prvProcessReceivedCommands+0xc8>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <prvProcessReceivedCommands+0x3c>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055b5 	.word	0x080055b5
 8005598:	0800561b 	.word	0x0800561b
 800559c:	080055f7 	.word	0x080055f7
 80055a0:	08005611 	.word	0x08005611
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055b5 	.word	0x080055b5
 80055ac:	0800561b 	.word	0x0800561b
 80055b0:	080055f7 	.word	0x080055f7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	18d1      	adds	r1, r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	69f8      	ldr	r0, [r7, #28]
 80055c2:	f7ff ff83 	bl	80054cc <prvInsertTimerInActiveList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d026      	beq.n	800561a <prvProcessReceivedCommands+0xca>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	69f8      	ldr	r0, [r7, #28]
 80055d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d11e      	bne.n	800561a <prvProcessReceivedCommands+0xca>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	441a      	add	r2, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	2100      	movs	r1, #0
 80055ec:	69f8      	ldr	r0, [r7, #28]
 80055ee:	f7ff fe55 	bl	800529c <xTimerGenericCommand>
 80055f2:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80055f4:	e011      	b.n	800561a <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	18d1      	adds	r1, r2, r3
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	69f8      	ldr	r0, [r7, #28]
 800560a:	f7ff ff5f 	bl	80054cc <prvInsertTimerInActiveList>
					break;
 800560e:	e004      	b.n	800561a <prvProcessReceivedCommands+0xca>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005610:	69f8      	ldr	r0, [r7, #28]
 8005612:	f7fe fb2f 	bl	8003c74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005616:	e000      	b.n	800561a <prvProcessReceivedCommands+0xca>

				default	:
					/* Don't expect to get here. */
					break;
 8005618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <prvProcessReceivedCommands+0xe8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f107 0108 	add.w	r1, r7, #8
 8005622:	2200      	movs	r2, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fe15 	bl	8004254 <xQueueReceive>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d193      	bne.n	8005558 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005630:	bf00      	nop
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	2000474c 	.word	0x2000474c

0800563c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005642:	e037      	b.n	80056b4 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005644:	4b25      	ldr	r3, [pc, #148]	; (80056dc <prvSwitchTimerLists+0xa0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800564e:	4b23      	ldr	r3, [pc, #140]	; (80056dc <prvSwitchTimerLists+0xa0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe f92b 	bl	80038b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	6938      	ldr	r0, [r7, #16]
 8005668:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d120      	bne.n	80056b4 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	429a      	cmp	r2, r3
 8005682:	d90e      	bls.n	80056a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005690:	4b12      	ldr	r3, [pc, #72]	; (80056dc <prvSwitchTimerLists+0xa0>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	3304      	adds	r3, #4
 8005698:	4619      	mov	r1, r3
 800569a:	4610      	mov	r0, r2
 800569c:	f7fe f8d4 	bl	8003848 <vListInsert>
 80056a0:	e008      	b.n	80056b4 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	2100      	movs	r1, #0
 80056ac:	6938      	ldr	r0, [r7, #16]
 80056ae:	f7ff fdf5 	bl	800529c <xTimerGenericCommand>
 80056b2:	60b8      	str	r0, [r7, #8]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <prvSwitchTimerLists+0xa0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1c2      	bne.n	8005644 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <prvSwitchTimerLists+0xa0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80056c4:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <prvSwitchTimerLists+0xa4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <prvSwitchTimerLists+0xa0>)
 80056ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056cc:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <prvSwitchTimerLists+0xa4>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6013      	str	r3, [r2, #0]
}
 80056d2:	bf00      	nop
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20004744 	.word	0x20004744
 80056e0:	20004748 	.word	0x20004748

080056e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056e8:	f7fe f99e 	bl	8003a28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <prvCheckForValidListAndQueue+0x40>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d113      	bne.n	800571c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80056f4:	480c      	ldr	r0, [pc, #48]	; (8005728 <prvCheckForValidListAndQueue+0x44>)
 80056f6:	f7fe f859 	bl	80037ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056fa:	480c      	ldr	r0, [pc, #48]	; (800572c <prvCheckForValidListAndQueue+0x48>)
 80056fc:	f7fe f856 	bl	80037ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <prvCheckForValidListAndQueue+0x4c>)
 8005702:	4a09      	ldr	r2, [pc, #36]	; (8005728 <prvCheckForValidListAndQueue+0x44>)
 8005704:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <prvCheckForValidListAndQueue+0x50>)
 8005708:	4a08      	ldr	r2, [pc, #32]	; (800572c <prvCheckForValidListAndQueue+0x48>)
 800570a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800570c:	2200      	movs	r2, #0
 800570e:	210c      	movs	r1, #12
 8005710:	2005      	movs	r0, #5
 8005712:	f7fe fbfd 	bl	8003f10 <xQueueGenericCreate>
 8005716:	4602      	mov	r2, r0
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <prvCheckForValidListAndQueue+0x40>)
 800571a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800571c:	f7fe f99c 	bl	8003a58 <vPortExitCritical>
}
 8005720:	bf00      	nop
 8005722:	bd80      	pop	{r7, pc}
 8005724:	2000474c 	.word	0x2000474c
 8005728:	2000471c 	.word	0x2000471c
 800572c:	20004730 	.word	0x20004730
 8005730:	20004744 	.word	0x20004744
 8005734:	20004748 	.word	0x20004748

08005738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005770 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800573c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800573e:	e003      	b.n	8005748 <LoopCopyDataInit>

08005740 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8005742:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005744:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005746:	3104      	adds	r1, #4

08005748 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005748:	480b      	ldr	r0, [pc, #44]	; (8005778 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800574c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800574e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005750:	d3f6      	bcc.n	8005740 <CopyDataInit>
	ldr	r2, =_sbss
 8005752:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8005754:	e002      	b.n	800575c <LoopFillZerobss>

08005756 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005756:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005758:	f842 3b04 	str.w	r3, [r2], #4

0800575c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800575e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005760:	d3f9      	bcc.n	8005756 <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 8005762:	f000 f813 	bl	800578c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005766:	f000 f941 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800576a:	f7fc f98b 	bl	8001a84 <main>
	bx	lr
 800576e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005770:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8005774:	080092d0 	.word	0x080092d0
	ldr	r0, =_sdata
 8005778:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800577c:	200001a8 	.word	0x200001a8
	ldr	r2, =_sbss
 8005780:	200001a8 	.word	0x200001a8
	ldr	r3, = _ebss
 8005784:	20006070 	.word	0x20006070

08005788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005788:	e7fe      	b.n	8005788 <ADC1_2_IRQHandler>
	...

0800578c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005790:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <SystemInit+0x70>)
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <SystemInit+0x70>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 800579c:	4917      	ldr	r1, [pc, #92]	; (80057fc <SystemInit+0x70>)
 800579e:	4b17      	ldr	r3, [pc, #92]	; (80057fc <SystemInit+0x70>)
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <SystemInit+0x74>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <SystemInit+0x70>)
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <SystemInit+0x70>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80057b8:	4a10      	ldr	r2, [pc, #64]	; (80057fc <SystemInit+0x70>)
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <SystemInit+0x70>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <SystemInit+0x70>)
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <SystemInit+0x70>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80057ce:	6053      	str	r3, [r2, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80057d0:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <SystemInit+0x70>)
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <SystemInit+0x70>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80057da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <SystemInit+0x70>)
 80057de:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80057e2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <SystemInit+0x70>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80057ea:	f000 f80d 	bl	8005808 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <SystemInit+0x78>)
 80057f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057f4:	609a      	str	r2, [r3, #8]
#endif 
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000
 8005800:	f0ff0000 	.word	0xf0ff0000
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800580c:	f000 f802 	bl	8005814 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}

08005814 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	2300      	movs	r3, #0
 8005820:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005822:	4a47      	ldr	r2, [pc, #284]	; (8005940 <SetSysClockTo72+0x12c>)
 8005824:	4b46      	ldr	r3, [pc, #280]	; (8005940 <SetSysClockTo72+0x12c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800582e:	4b44      	ldr	r3, [pc, #272]	; (8005940 <SetSysClockTo72+0x12c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3301      	adds	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <SetSysClockTo72+0x38>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800584a:	d1f0      	bne.n	800582e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800584c:	4b3c      	ldr	r3, [pc, #240]	; (8005940 <SetSysClockTo72+0x12c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005858:	2301      	movs	r3, #1
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	e001      	b.n	8005862 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800585e:	2300      	movs	r3, #0
 8005860:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d166      	bne.n	8005936 <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005868:	4a36      	ldr	r2, [pc, #216]	; (8005944 <SetSysClockTo72+0x130>)
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <SetSysClockTo72+0x130>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f043 0310 	orr.w	r3, r3, #16
 8005872:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8005874:	4a33      	ldr	r2, [pc, #204]	; (8005944 <SetSysClockTo72+0x130>)
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <SetSysClockTo72+0x130>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8005880:	4a30      	ldr	r2, [pc, #192]	; (8005944 <SetSysClockTo72+0x130>)
 8005882:	4b30      	ldr	r3, [pc, #192]	; (8005944 <SetSysClockTo72+0x130>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f043 0302 	orr.w	r3, r3, #2
 800588a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <SetSysClockTo72+0x12c>)
 800588e:	4b2c      	ldr	r3, [pc, #176]	; (8005940 <SetSysClockTo72+0x12c>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <SetSysClockTo72+0x12c>)
 8005896:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <SetSysClockTo72+0x12c>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800589c:	4a28      	ldr	r2, [pc, #160]	; (8005940 <SetSysClockTo72+0x12c>)
 800589e:	4b28      	ldr	r3, [pc, #160]	; (8005940 <SetSysClockTo72+0x12c>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a6:	6053      	str	r3, [r2, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 3) * 10 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 80058a8:	4925      	ldr	r1, [pc, #148]	; (8005940 <SetSysClockTo72+0x12c>)
 80058aa:	4b25      	ldr	r3, [pc, #148]	; (8005940 <SetSysClockTo72+0x12c>)
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <SetSysClockTo72+0x134>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	62cb      	str	r3, [r1, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV3 | RCC_CFGR2_PLL2MUL10 |
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <SetSysClockTo72+0x12c>)
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <SetSysClockTo72+0x12c>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f443 3384 	orr.w	r3, r3, #67584	; 0x10800
 80058be:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 80058c4:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <SetSysClockTo72+0x12c>)
 80058c6:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <SetSysClockTo72+0x12c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ce:	6013      	str	r3, [r2, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 80058d0:	bf00      	nop
 80058d2:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <SetSysClockTo72+0x12c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f9      	beq.n	80058d2 <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <SetSysClockTo72+0x12c>)
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <SetSysClockTo72+0x12c>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80058e8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <SetSysClockTo72+0x12c>)
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <SetSysClockTo72+0x12c>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80058f4:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80058f6:	4a12      	ldr	r2, [pc, #72]	; (8005940 <SetSysClockTo72+0x12c>)
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <SetSysClockTo72+0x12c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005900:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005902:	bf00      	nop
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <SetSysClockTo72+0x12c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f9      	beq.n	8005904 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005910:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <SetSysClockTo72+0x12c>)
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <SetSysClockTo72+0x12c>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800591c:	4a08      	ldr	r2, [pc, #32]	; (8005940 <SetSysClockTo72+0x12c>)
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <SetSysClockTo72+0x12c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8005928:	bf00      	nop
 800592a:	4b05      	ldr	r3, [pc, #20]	; (8005940 <SetSysClockTo72+0x12c>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b08      	cmp	r3, #8
 8005934:	d1f9      	bne.n	800592a <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	40021000 	.word	0x40021000
 8005944:	40022000 	.word	0x40022000
 8005948:	fffef000 	.word	0xfffef000

0800594c <xTask>:
#include "maxtrixApp.h"
static QueueSetHandle_t xQueue;
uint8_t currentGameMode = 1;
uint8_t currentGameLevel = 1;
static void xTask(void *pPara)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
    uint8_t trush;
    for(;;)
    {
		if(pdPASS == xQueueReceive(xQueue, &trush, pdMS_TO_TICKS(500)))
 8005954:	4b07      	ldr	r3, [pc, #28]	; (8005974 <xTask+0x28>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f107 010f 	add.w	r1, r7, #15
 800595c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fc77 	bl	8004254 <xQueueReceive>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d1f3      	bne.n	8005954 <xTask+0x8>
		{
            RGBProcessor();
 800596c:	f7fd f81e 	bl	80029ac <RGBProcessor>
		if(pdPASS == xQueueReceive(xQueue, &trush, pdMS_TO_TICKS(500)))
 8005970:	e7f0      	b.n	8005954 <xTask+0x8>
 8005972:	bf00      	nop
 8005974:	20004758 	.word	0x20004758

08005978 <CreateDisplayTask>:
		}
    }
}

bool CreateDisplayTask(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af02      	add	r7, sp, #8
	xQueue = xQueueCreate(5, 1);
 800597e:	2200      	movs	r2, #0
 8005980:	2101      	movs	r1, #1
 8005982:	2005      	movs	r0, #5
 8005984:	f7fe fac4 	bl	8003f10 <xQueueGenericCreate>
 8005988:	4602      	mov	r2, r0
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <CreateDisplayTask+0x48>)
 800598c:	601a      	str	r2, [r3, #0]
    if(xQueue == NULL)
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <CreateDisplayTask+0x48>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <CreateDisplayTask+0x22>
    {
        return false;
 8005996:	2300      	movs	r3, #0
 8005998:	e00f      	b.n	80059ba <CreateDisplayTask+0x42>
    }
	if(pdPASS !=  xTaskCreate(xTask, "Dispaly", 128, NULL, 3, NULL))
 800599a:	2300      	movs	r3, #0
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	2303      	movs	r3, #3
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	2300      	movs	r3, #0
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	4907      	ldr	r1, [pc, #28]	; (80059c4 <CreateDisplayTask+0x4c>)
 80059a8:	4807      	ldr	r0, [pc, #28]	; (80059c8 <CreateDisplayTask+0x50>)
 80059aa:	f7fe fec9 	bl	8004740 <xTaskCreate>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d001      	beq.n	80059b8 <CreateDisplayTask+0x40>
    {
        return false;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <CreateDisplayTask+0x42>
    }
    return true;
 80059b8:	2301      	movs	r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20004758 	.word	0x20004758
 80059c4:	08006acc 	.word	0x08006acc
 80059c8:	0800594d 	.word	0x0800594d

080059cc <DisplayRefalsh>:

void DisplayRefalsh(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
    uint8_t trash;
	xQueueSendFromISR(xQueue, &trash, NULL);    
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <DisplayRefalsh+0x1c>)
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	1df9      	adds	r1, r7, #7
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	f7fe fb8e 	bl	80040fc <xQueueGenericSendFromISR>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20004758 	.word	0x20004758

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	2500      	movs	r5, #0
 80059f0:	4e0c      	ldr	r6, [pc, #48]	; (8005a24 <__libc_init_array+0x38>)
 80059f2:	4c0d      	ldr	r4, [pc, #52]	; (8005a28 <__libc_init_array+0x3c>)
 80059f4:	1ba4      	subs	r4, r4, r6
 80059f6:	10a4      	asrs	r4, r4, #2
 80059f8:	42a5      	cmp	r5, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	f001 f840 	bl	8006a80 <_init>
 8005a00:	2500      	movs	r5, #0
 8005a02:	4e0a      	ldr	r6, [pc, #40]	; (8005a2c <__libc_init_array+0x40>)
 8005a04:	4c0a      	ldr	r4, [pc, #40]	; (8005a30 <__libc_init_array+0x44>)
 8005a06:	1ba4      	subs	r4, r4, r6
 8005a08:	10a4      	asrs	r4, r4, #2
 8005a0a:	42a5      	cmp	r5, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a14:	4798      	blx	r3
 8005a16:	3501      	adds	r5, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a1e:	4798      	blx	r3
 8005a20:	3501      	adds	r5, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	080092c8 	.word	0x080092c8
 8005a28:	080092c8 	.word	0x080092c8
 8005a2c:	080092c8 	.word	0x080092c8
 8005a30:	080092cc 	.word	0x080092cc

08005a34 <memcpy>:
 8005a34:	b510      	push	{r4, lr}
 8005a36:	1e43      	subs	r3, r0, #1
 8005a38:	440a      	add	r2, r1
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	d100      	bne.n	8005a40 <memcpy+0xc>
 8005a3e:	bd10      	pop	{r4, pc}
 8005a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a48:	e7f7      	b.n	8005a3a <memcpy+0x6>
	...

08005a4c <pow>:
 8005a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	b08f      	sub	sp, #60	; 0x3c
 8005a52:	461d      	mov	r5, r3
 8005a54:	4680      	mov	r8, r0
 8005a56:	4689      	mov	r9, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	f000 f95d 	bl	8005d18 <__ieee754_pow>
 8005a5e:	4fa5      	ldr	r7, [pc, #660]	; (8005cf4 <pow+0x2a8>)
 8005a60:	e9cd 0100 	strd	r0, r1, [sp]
 8005a64:	f997 3000 	ldrsb.w	r3, [r7]
 8005a68:	463e      	mov	r6, r7
 8005a6a:	9302      	str	r3, [sp, #8]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	d05f      	beq.n	8005b30 <pow+0xe4>
 8005a70:	4622      	mov	r2, r4
 8005a72:	462b      	mov	r3, r5
 8005a74:	4620      	mov	r0, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7fb f82c 	bl	8000ad4 <__aeabi_dcmpun>
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d156      	bne.n	8005b30 <pow+0xe4>
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	4640      	mov	r0, r8
 8005a88:	4649      	mov	r1, r9
 8005a8a:	f7fb f823 	bl	8000ad4 <__aeabi_dcmpun>
 8005a8e:	9003      	str	r0, [sp, #12]
 8005a90:	b1e8      	cbz	r0, 8005ace <pow+0x82>
 8005a92:	2200      	movs	r2, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fa ffe9 	bl	8000a70 <__aeabi_dcmpeq>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d046      	beq.n	8005b30 <pow+0xe4>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	4b93      	ldr	r3, [pc, #588]	; (8005cf8 <pow+0x2ac>)
 8005aaa:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	4b92      	ldr	r3, [pc, #584]	; (8005cfc <pow+0x2b0>)
 8005ab2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005ab6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005aba:	9b02      	ldr	r3, [sp, #8]
 8005abc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d031      	beq.n	8005b28 <pow+0xdc>
 8005ac4:	a804      	add	r0, sp, #16
 8005ac6:	f000 fece 	bl	8006866 <matherr>
 8005aca:	bb38      	cbnz	r0, 8005b1c <pow+0xd0>
 8005acc:	e058      	b.n	8005b80 <pow+0x134>
 8005ace:	f04f 0a00 	mov.w	sl, #0
 8005ad2:	f04f 0b00 	mov.w	fp, #0
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	465b      	mov	r3, fp
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa ffc7 	bl	8000a70 <__aeabi_dcmpeq>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d051      	beq.n	8005b8a <pow+0x13e>
 8005ae6:	4652      	mov	r2, sl
 8005ae8:	465b      	mov	r3, fp
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa ffbf 	bl	8000a70 <__aeabi_dcmpeq>
 8005af2:	4606      	mov	r6, r0
 8005af4:	b308      	cbz	r0, 8005b3a <pow+0xee>
 8005af6:	2301      	movs	r3, #1
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	4b7f      	ldr	r3, [pc, #508]	; (8005cf8 <pow+0x2ac>)
 8005afc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b00:	9305      	str	r3, [sp, #20]
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b08:	930c      	str	r3, [sp, #48]	; 0x30
 8005b0a:	9b02      	ldr	r3, [sp, #8]
 8005b0c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0d7      	beq.n	8005ac4 <pow+0x78>
 8005b14:	2200      	movs	r2, #0
 8005b16:	4b79      	ldr	r3, [pc, #484]	; (8005cfc <pow+0x2b0>)
 8005b18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b1e:	b11b      	cbz	r3, 8005b28 <pow+0xdc>
 8005b20:	f000 ffa8 	bl	8006a74 <__errno>
 8005b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b26:	6003      	str	r3, [r0, #0]
 8005b28:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005b2c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b34:	b00f      	add	sp, #60	; 0x3c
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f000 fe8c 	bl	800685a <finite>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d0f4      	beq.n	8005b30 <pow+0xe4>
 8005b46:	4652      	mov	r2, sl
 8005b48:	465b      	mov	r3, fp
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7fa ff99 	bl	8000a84 <__aeabi_dcmplt>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d0ec      	beq.n	8005b30 <pow+0xe4>
 8005b56:	2301      	movs	r3, #1
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <pow+0x2ac>)
 8005b5c:	960c      	str	r6, [sp, #48]	; 0x30
 8005b5e:	9305      	str	r3, [sp, #20]
 8005b60:	f997 3000 	ldrsb.w	r3, [r7]
 8005b64:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b68:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b6c:	b913      	cbnz	r3, 8005b74 <pow+0x128>
 8005b6e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005b72:	e7a7      	b.n	8005ac4 <pow+0x78>
 8005b74:	2000      	movs	r0, #0
 8005b76:	4962      	ldr	r1, [pc, #392]	; (8005d00 <pow+0x2b4>)
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b7e:	d1a1      	bne.n	8005ac4 <pow+0x78>
 8005b80:	f000 ff78 	bl	8006a74 <__errno>
 8005b84:	2321      	movs	r3, #33	; 0x21
 8005b86:	6003      	str	r3, [r0, #0]
 8005b88:	e7c8      	b.n	8005b1c <pow+0xd0>
 8005b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b8e:	f000 fe64 	bl	800685a <finite>
 8005b92:	9002      	str	r0, [sp, #8]
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d17f      	bne.n	8005c98 <pow+0x24c>
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	f000 fe5d 	bl	800685a <finite>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d079      	beq.n	8005c98 <pow+0x24c>
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f000 fe57 	bl	800685a <finite>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d073      	beq.n	8005c98 <pow+0x24c>
 8005bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fa ff8c 	bl	8000ad4 <__aeabi_dcmpun>
 8005bbc:	f997 7000 	ldrsb.w	r7, [r7]
 8005bc0:	4b4d      	ldr	r3, [pc, #308]	; (8005cf8 <pow+0x2ac>)
 8005bc2:	b1a0      	cbz	r0, 8005bee <pow+0x1a2>
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	9305      	str	r3, [sp, #20]
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	9204      	str	r2, [sp, #16]
 8005bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8005bce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005bd2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005bd6:	2f00      	cmp	r7, #0
 8005bd8:	d0c9      	beq.n	8005b6e <pow+0x122>
 8005bda:	4652      	mov	r2, sl
 8005bdc:	465b      	mov	r3, fp
 8005bde:	4650      	mov	r0, sl
 8005be0:	4659      	mov	r1, fp
 8005be2:	f7fa fe07 	bl	80007f4 <__aeabi_ddiv>
 8005be6:	2f02      	cmp	r7, #2
 8005be8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005bec:	e7c7      	b.n	8005b7e <pow+0x132>
 8005bee:	2203      	movs	r2, #3
 8005bf0:	9305      	str	r3, [sp, #20]
 8005bf2:	9204      	str	r2, [sp, #16]
 8005bf4:	900c      	str	r0, [sp, #48]	; 0x30
 8005bf6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005bfa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005bfe:	bb57      	cbnz	r7, 8005c56 <pow+0x20a>
 8005c00:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <pow+0x2b8>)
 8005c06:	4640      	mov	r0, r8
 8005c08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	4652      	mov	r2, sl
 8005c10:	465b      	mov	r3, fp
 8005c12:	f7fa ff37 	bl	8000a84 <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d064      	beq.n	8005ce4 <pow+0x298>
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	4b3a      	ldr	r3, [pc, #232]	; (8005d08 <pow+0x2bc>)
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	f7fa fcbd 	bl	80005a0 <__aeabi_dmul>
 8005c26:	4604      	mov	r4, r0
 8005c28:	460d      	mov	r5, r1
 8005c2a:	f000 fe25 	bl	8006878 <rint>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa ff1b 	bl	8000a70 <__aeabi_dcmpeq>
 8005c3a:	b920      	cbnz	r0, 8005c46 <pow+0x1fa>
 8005c3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005c40:	4b32      	ldr	r3, [pc, #200]	; (8005d0c <pow+0x2c0>)
 8005c42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c46:	f996 3000 	ldrsb.w	r3, [r6]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d14a      	bne.n	8005ce4 <pow+0x298>
 8005c4e:	f000 ff11 	bl	8006a74 <__errno>
 8005c52:	2322      	movs	r3, #34	; 0x22
 8005c54:	e797      	b.n	8005b86 <pow+0x13a>
 8005c56:	2200      	movs	r2, #0
 8005c58:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <pow+0x2c4>)
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c60:	4649      	mov	r1, r9
 8005c62:	4652      	mov	r2, sl
 8005c64:	465b      	mov	r3, fp
 8005c66:	f7fa ff0d 	bl	8000a84 <__aeabi_dcmplt>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d0eb      	beq.n	8005c46 <pow+0x1fa>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <pow+0x2bc>)
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa fc93 	bl	80005a0 <__aeabi_dmul>
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	f000 fdfb 	bl	8006878 <rint>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa fef1 	bl	8000a70 <__aeabi_dcmpeq>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d1d9      	bne.n	8005c46 <pow+0x1fa>
 8005c92:	2200      	movs	r2, #0
 8005c94:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <pow+0x2b4>)
 8005c96:	e7d4      	b.n	8005c42 <pow+0x1f6>
 8005c98:	2200      	movs	r2, #0
 8005c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f7fa fee6 	bl	8000a70 <__aeabi_dcmpeq>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f43f af43 	beq.w	8005b30 <pow+0xe4>
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f000 fdd4 	bl	800685a <finite>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	f43f af3c 	beq.w	8005b30 <pow+0xe4>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f000 fdcd 	bl	800685a <finite>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	f43f af35 	beq.w	8005b30 <pow+0xe4>
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <pow+0x2ac>)
 8005ccc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005cd0:	9305      	str	r3, [sp, #20]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2400      	movs	r4, #0
 8005cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005cde:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005ce2:	e7b0      	b.n	8005c46 <pow+0x1fa>
 8005ce4:	a804      	add	r0, sp, #16
 8005ce6:	f000 fdbe 	bl	8006866 <matherr>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f47f af16 	bne.w	8005b1c <pow+0xd0>
 8005cf0:	e7ad      	b.n	8005c4e <pow+0x202>
 8005cf2:	bf00      	nop
 8005cf4:	20000140 	.word	0x20000140
 8005cf8:	08009280 	.word	0x08009280
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	fff00000 	.word	0xfff00000
 8005d04:	47efffff 	.word	0x47efffff
 8005d08:	3fe00000 	.word	0x3fe00000
 8005d0c:	c7efffff 	.word	0xc7efffff
 8005d10:	7ff00000 	.word	0x7ff00000
 8005d14:	00000000 	.word	0x00000000

08005d18 <__ieee754_pow>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	b093      	sub	sp, #76	; 0x4c
 8005d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d22:	9e03      	ldr	r6, [sp, #12]
 8005d24:	9a02      	ldr	r2, [sp, #8]
 8005d26:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005d2a:	ea55 0302 	orrs.w	r3, r5, r2
 8005d2e:	4607      	mov	r7, r0
 8005d30:	4688      	mov	r8, r1
 8005d32:	4682      	mov	sl, r0
 8005d34:	4689      	mov	r9, r1
 8005d36:	f000 849e 	beq.w	8006676 <__ieee754_pow+0x95e>
 8005d3a:	4b77      	ldr	r3, [pc, #476]	; (8005f18 <__ieee754_pow+0x200>)
 8005d3c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005d40:	429c      	cmp	r4, r3
 8005d42:	dc09      	bgt.n	8005d58 <__ieee754_pow+0x40>
 8005d44:	d103      	bne.n	8005d4e <__ieee754_pow+0x36>
 8005d46:	b938      	cbnz	r0, 8005d58 <__ieee754_pow+0x40>
 8005d48:	42a5      	cmp	r5, r4
 8005d4a:	dc0d      	bgt.n	8005d68 <__ieee754_pow+0x50>
 8005d4c:	e001      	b.n	8005d52 <__ieee754_pow+0x3a>
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	dc02      	bgt.n	8005d58 <__ieee754_pow+0x40>
 8005d52:	429d      	cmp	r5, r3
 8005d54:	d10e      	bne.n	8005d74 <__ieee754_pow+0x5c>
 8005d56:	b16a      	cbz	r2, 8005d74 <__ieee754_pow+0x5c>
 8005d58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d60:	ea54 030a 	orrs.w	r3, r4, sl
 8005d64:	f000 8487 	beq.w	8006676 <__ieee754_pow+0x95e>
 8005d68:	486c      	ldr	r0, [pc, #432]	; (8005f1c <__ieee754_pow+0x204>)
 8005d6a:	b013      	add	sp, #76	; 0x4c
 8005d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	f000 bd7c 	b.w	800686c <nan>
 8005d74:	f1b9 0f00 	cmp.w	r9, #0
 8005d78:	da4f      	bge.n	8005e1a <__ieee754_pow+0x102>
 8005d7a:	4b69      	ldr	r3, [pc, #420]	; (8005f20 <__ieee754_pow+0x208>)
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	dc4a      	bgt.n	8005e16 <__ieee754_pow+0xfe>
 8005d80:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005d84:	429d      	cmp	r5, r3
 8005d86:	dd48      	ble.n	8005e1a <__ieee754_pow+0x102>
 8005d88:	152b      	asrs	r3, r5, #20
 8005d8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d8e:	2b14      	cmp	r3, #20
 8005d90:	dd24      	ble.n	8005ddc <__ieee754_pow+0xc4>
 8005d92:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005d96:	fa22 f103 	lsr.w	r1, r2, r3
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d13b      	bne.n	8005e1a <__ieee754_pow+0x102>
 8005da2:	f001 0101 	and.w	r1, r1, #1
 8005da6:	f1c1 0302 	rsb	r3, r1, #2
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	d156      	bne.n	8005e5e <__ieee754_pow+0x146>
 8005db0:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <__ieee754_pow+0x200>)
 8005db2:	429d      	cmp	r5, r3
 8005db4:	d122      	bne.n	8005dfc <__ieee754_pow+0xe4>
 8005db6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005dba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005dbe:	ea53 030a 	orrs.w	r3, r3, sl
 8005dc2:	f000 8458 	beq.w	8006676 <__ieee754_pow+0x95e>
 8005dc6:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <__ieee754_pow+0x20c>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	dd28      	ble.n	8005e1e <__ieee754_pow+0x106>
 8005dcc:	2e00      	cmp	r6, #0
 8005dce:	f280 8456 	bge.w	800667e <__ieee754_pow+0x966>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	b013      	add	sp, #76	; 0x4c
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d13c      	bne.n	8005e5a <__ieee754_pow+0x142>
 8005de0:	f1c3 0314 	rsb	r3, r3, #20
 8005de4:	fa45 f103 	asr.w	r1, r5, r3
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	429d      	cmp	r5, r3
 8005dee:	f040 844e 	bne.w	800668e <__ieee754_pow+0x976>
 8005df2:	f001 0101 	and.w	r1, r1, #1
 8005df6:	f1c1 0302 	rsb	r3, r1, #2
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <__ieee754_pow+0x210>)
 8005dfe:	429d      	cmp	r5, r3
 8005e00:	d114      	bne.n	8005e2c <__ieee754_pow+0x114>
 8005e02:	2e00      	cmp	r6, #0
 8005e04:	f280 843f 	bge.w	8006686 <__ieee754_pow+0x96e>
 8005e08:	463a      	mov	r2, r7
 8005e0a:	4643      	mov	r3, r8
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	4946      	ldr	r1, [pc, #280]	; (8005f28 <__ieee754_pow+0x210>)
 8005e10:	f7fa fcf0 	bl	80007f4 <__aeabi_ddiv>
 8005e14:	e7df      	b.n	8005dd6 <__ieee754_pow+0xbe>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e7c7      	b.n	8005daa <__ieee754_pow+0x92>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e7c5      	b.n	8005daa <__ieee754_pow+0x92>
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	dad7      	bge.n	8005dd2 <__ieee754_pow+0xba>
 8005e22:	9b03      	ldr	r3, [sp, #12]
 8005e24:	9802      	ldr	r0, [sp, #8]
 8005e26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e2a:	e7d4      	b.n	8005dd6 <__ieee754_pow+0xbe>
 8005e2c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005e30:	d106      	bne.n	8005e40 <__ieee754_pow+0x128>
 8005e32:	463a      	mov	r2, r7
 8005e34:	4643      	mov	r3, r8
 8005e36:	4638      	mov	r0, r7
 8005e38:	4641      	mov	r1, r8
 8005e3a:	f7fa fbb1 	bl	80005a0 <__aeabi_dmul>
 8005e3e:	e7ca      	b.n	8005dd6 <__ieee754_pow+0xbe>
 8005e40:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <__ieee754_pow+0x214>)
 8005e42:	429e      	cmp	r6, r3
 8005e44:	d10b      	bne.n	8005e5e <__ieee754_pow+0x146>
 8005e46:	f1b9 0f00 	cmp.w	r9, #0
 8005e4a:	db08      	blt.n	8005e5e <__ieee754_pow+0x146>
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	4641      	mov	r1, r8
 8005e50:	b013      	add	sp, #76	; 0x4c
 8005e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	f000 bc51 	b.w	80066fc <__ieee754_sqrt>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4638      	mov	r0, r7
 8005e60:	4641      	mov	r1, r8
 8005e62:	f000 fcf7 	bl	8006854 <fabs>
 8005e66:	f1ba 0f00 	cmp.w	sl, #0
 8005e6a:	d125      	bne.n	8005eb8 <__ieee754_pow+0x1a0>
 8005e6c:	b124      	cbz	r4, 8005e78 <__ieee754_pow+0x160>
 8005e6e:	4b2e      	ldr	r3, [pc, #184]	; (8005f28 <__ieee754_pow+0x210>)
 8005e70:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d11f      	bne.n	8005eb8 <__ieee754_pow+0x1a0>
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	da05      	bge.n	8005e88 <__ieee754_pow+0x170>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	2000      	movs	r0, #0
 8005e82:	4929      	ldr	r1, [pc, #164]	; (8005f28 <__ieee754_pow+0x210>)
 8005e84:	f7fa fcb6 	bl	80007f4 <__aeabi_ddiv>
 8005e88:	f1b9 0f00 	cmp.w	r9, #0
 8005e8c:	daa3      	bge.n	8005dd6 <__ieee754_pow+0xbe>
 8005e8e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e92:	9b00      	ldr	r3, [sp, #0]
 8005e94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e98:	4323      	orrs	r3, r4
 8005e9a:	d106      	bne.n	8005eaa <__ieee754_pow+0x192>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	f7fa f9ca 	bl	8000238 <__aeabi_dsub>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	e7b2      	b.n	8005e10 <__ieee754_pow+0xf8>
 8005eaa:	9b00      	ldr	r3, [sp, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d192      	bne.n	8005dd6 <__ieee754_pow+0xbe>
 8005eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	e78e      	b.n	8005dd6 <__ieee754_pow+0xbe>
 8005eb8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005ebc:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ec4:	9b00      	ldr	r3, [sp, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d104      	bne.n	8005ed4 <__ieee754_pow+0x1bc>
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4643      	mov	r3, r8
 8005ece:	4638      	mov	r0, r7
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	e7e5      	b.n	8005ea0 <__ieee754_pow+0x188>
 8005ed4:	4b16      	ldr	r3, [pc, #88]	; (8005f30 <__ieee754_pow+0x218>)
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	f340 80fc 	ble.w	80060d4 <__ieee754_pow+0x3bc>
 8005edc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005ee0:	429d      	cmp	r5, r3
 8005ee2:	dd0b      	ble.n	8005efc <__ieee754_pow+0x1e4>
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <__ieee754_pow+0x20c>)
 8005ee6:	429c      	cmp	r4, r3
 8005ee8:	dc0e      	bgt.n	8005f08 <__ieee754_pow+0x1f0>
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	f6bf af71 	bge.w	8005dd2 <__ieee754_pow+0xba>
 8005ef0:	a307      	add	r3, pc, #28	; (adr r3, 8005f10 <__ieee754_pow+0x1f8>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	e79e      	b.n	8005e3a <__ieee754_pow+0x122>
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <__ieee754_pow+0x21c>)
 8005efe:	429c      	cmp	r4, r3
 8005f00:	ddf3      	ble.n	8005eea <__ieee754_pow+0x1d2>
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <__ieee754_pow+0x210>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	dd17      	ble.n	8005f38 <__ieee754_pow+0x220>
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	dcf1      	bgt.n	8005ef0 <__ieee754_pow+0x1d8>
 8005f0c:	e761      	b.n	8005dd2 <__ieee754_pow+0xba>
 8005f0e:	bf00      	nop
 8005f10:	8800759c 	.word	0x8800759c
 8005f14:	7e37e43c 	.word	0x7e37e43c
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	08009283 	.word	0x08009283
 8005f20:	433fffff 	.word	0x433fffff
 8005f24:	3fefffff 	.word	0x3fefffff
 8005f28:	3ff00000 	.word	0x3ff00000
 8005f2c:	3fe00000 	.word	0x3fe00000
 8005f30:	41e00000 	.word	0x41e00000
 8005f34:	3feffffe 	.word	0x3feffffe
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4b61      	ldr	r3, [pc, #388]	; (80060c0 <__ieee754_pow+0x3a8>)
 8005f3c:	f7fa f97c 	bl	8000238 <__aeabi_dsub>
 8005f40:	a355      	add	r3, pc, #340	; (adr r3, 8006098 <__ieee754_pow+0x380>)
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	4604      	mov	r4, r0
 8005f48:	460d      	mov	r5, r1
 8005f4a:	f7fa fb29 	bl	80005a0 <__aeabi_dmul>
 8005f4e:	a354      	add	r3, pc, #336	; (adr r3, 80060a0 <__ieee754_pow+0x388>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	4606      	mov	r6, r0
 8005f56:	460f      	mov	r7, r1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa fb20 	bl	80005a0 <__aeabi_dmul>
 8005f60:	2200      	movs	r2, #0
 8005f62:	4682      	mov	sl, r0
 8005f64:	468b      	mov	fp, r1
 8005f66:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <__ieee754_pow+0x3ac>)
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa fb18 	bl	80005a0 <__aeabi_dmul>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	a14c      	add	r1, pc, #304	; (adr r1, 80060a8 <__ieee754_pow+0x390>)
 8005f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f7a:	f7fa f95d 	bl	8000238 <__aeabi_dsub>
 8005f7e:	4622      	mov	r2, r4
 8005f80:	462b      	mov	r3, r5
 8005f82:	f7fa fb0d 	bl	80005a0 <__aeabi_dmul>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	494e      	ldr	r1, [pc, #312]	; (80060c8 <__ieee754_pow+0x3b0>)
 8005f8e:	f7fa f953 	bl	8000238 <__aeabi_dsub>
 8005f92:	4622      	mov	r2, r4
 8005f94:	462b      	mov	r3, r5
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f7fa faff 	bl	80005a0 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa faf9 	bl	80005a0 <__aeabi_dmul>
 8005fae:	a340      	add	r3, pc, #256	; (adr r3, 80060b0 <__ieee754_pow+0x398>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa faf4 	bl	80005a0 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	f7fa f93a 	bl	8000238 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa f934 	bl	800023c <__adddf3>
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	468b      	mov	fp, r1
 8005fd8:	4682      	mov	sl, r0
 8005fda:	4632      	mov	r2, r6
 8005fdc:	463b      	mov	r3, r7
 8005fde:	f7fa f92b 	bl	8000238 <__aeabi_dsub>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7fa f925 	bl	8000238 <__aeabi_dsub>
 8005fee:	9b00      	ldr	r3, [sp, #0]
 8005ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	4c33      	ldreq	r4, [pc, #204]	; (80060cc <__ieee754_pow+0x3b4>)
 8005ffe:	4c30      	ldrne	r4, [pc, #192]	; (80060c0 <__ieee754_pow+0x3a8>)
 8006000:	4606      	mov	r6, r0
 8006002:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006006:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800600a:	2400      	movs	r4, #0
 800600c:	460f      	mov	r7, r1
 800600e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006012:	4622      	mov	r2, r4
 8006014:	462b      	mov	r3, r5
 8006016:	f7fa f90f 	bl	8000238 <__aeabi_dsub>
 800601a:	4652      	mov	r2, sl
 800601c:	465b      	mov	r3, fp
 800601e:	f7fa fabf 	bl	80005a0 <__aeabi_dmul>
 8006022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006026:	4680      	mov	r8, r0
 8006028:	4689      	mov	r9, r1
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa fab7 	bl	80005a0 <__aeabi_dmul>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	f7fa f8ff 	bl	800023c <__adddf3>
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	4680      	mov	r8, r0
 8006044:	4689      	mov	r9, r1
 8006046:	4650      	mov	r0, sl
 8006048:	4659      	mov	r1, fp
 800604a:	f7fa faa9 	bl	80005a0 <__aeabi_dmul>
 800604e:	4604      	mov	r4, r0
 8006050:	460d      	mov	r5, r1
 8006052:	460b      	mov	r3, r1
 8006054:	4602      	mov	r2, r0
 8006056:	4649      	mov	r1, r9
 8006058:	4640      	mov	r0, r8
 800605a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800605e:	f7fa f8ed 	bl	800023c <__adddf3>
 8006062:	4b1b      	ldr	r3, [pc, #108]	; (80060d0 <__ieee754_pow+0x3b8>)
 8006064:	4682      	mov	sl, r0
 8006066:	4299      	cmp	r1, r3
 8006068:	460f      	mov	r7, r1
 800606a:	460e      	mov	r6, r1
 800606c:	f340 82da 	ble.w	8006624 <__ieee754_pow+0x90c>
 8006070:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006074:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006078:	4303      	orrs	r3, r0
 800607a:	f000 81d5 	beq.w	8006428 <__ieee754_pow+0x710>
 800607e:	a30e      	add	r3, pc, #56	; (adr r3, 80060b8 <__ieee754_pow+0x3a0>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006088:	f7fa fa8a 	bl	80005a0 <__aeabi_dmul>
 800608c:	a30a      	add	r3, pc, #40	; (adr r3, 80060b8 <__ieee754_pow+0x3a0>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	e6d2      	b.n	8005e3a <__ieee754_pow+0x122>
 8006094:	f3af 8000 	nop.w
 8006098:	60000000 	.word	0x60000000
 800609c:	3ff71547 	.word	0x3ff71547
 80060a0:	f85ddf44 	.word	0xf85ddf44
 80060a4:	3e54ae0b 	.word	0x3e54ae0b
 80060a8:	55555555 	.word	0x55555555
 80060ac:	3fd55555 	.word	0x3fd55555
 80060b0:	652b82fe 	.word	0x652b82fe
 80060b4:	3ff71547 	.word	0x3ff71547
 80060b8:	8800759c 	.word	0x8800759c
 80060bc:	7e37e43c 	.word	0x7e37e43c
 80060c0:	3ff00000 	.word	0x3ff00000
 80060c4:	3fd00000 	.word	0x3fd00000
 80060c8:	3fe00000 	.word	0x3fe00000
 80060cc:	bff00000 	.word	0xbff00000
 80060d0:	408fffff 	.word	0x408fffff
 80060d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	da05      	bge.n	80060ea <__ieee754_pow+0x3d2>
 80060de:	4bca      	ldr	r3, [pc, #808]	; (8006408 <__ieee754_pow+0x6f0>)
 80060e0:	f7fa fa5e 	bl	80005a0 <__aeabi_dmul>
 80060e4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80060e8:	460c      	mov	r4, r1
 80060ea:	1523      	asrs	r3, r4, #20
 80060ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80060f0:	4413      	add	r3, r2
 80060f2:	9307      	str	r3, [sp, #28]
 80060f4:	4bc5      	ldr	r3, [pc, #788]	; (800640c <__ieee754_pow+0x6f4>)
 80060f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80060fa:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80060fe:	429c      	cmp	r4, r3
 8006100:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006104:	dd08      	ble.n	8006118 <__ieee754_pow+0x400>
 8006106:	4bc2      	ldr	r3, [pc, #776]	; (8006410 <__ieee754_pow+0x6f8>)
 8006108:	429c      	cmp	r4, r3
 800610a:	f340 8154 	ble.w	80063b6 <__ieee754_pow+0x69e>
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006114:	3301      	adds	r3, #1
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	2600      	movs	r6, #0
 800611a:	4629      	mov	r1, r5
 800611c:	00f3      	lsls	r3, r6, #3
 800611e:	930d      	str	r3, [sp, #52]	; 0x34
 8006120:	4bbc      	ldr	r3, [pc, #752]	; (8006414 <__ieee754_pow+0x6fc>)
 8006122:	00f2      	lsls	r2, r6, #3
 8006124:	4413      	add	r3, r2
 8006126:	cb18      	ldmia	r3, {r3, r4}
 8006128:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800612c:	461a      	mov	r2, r3
 800612e:	4623      	mov	r3, r4
 8006130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006134:	f7fa f880 	bl	8000238 <__aeabi_dsub>
 8006138:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800613c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006140:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006144:	f7fa f87a 	bl	800023c <__adddf3>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	2000      	movs	r0, #0
 800614e:	49b2      	ldr	r1, [pc, #712]	; (8006418 <__ieee754_pow+0x700>)
 8006150:	f7fa fb50 	bl	80007f4 <__aeabi_ddiv>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800615c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006160:	f7fa fa1e 	bl	80005a0 <__aeabi_dmul>
 8006164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006168:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800616c:	f04f 0a00 	mov.w	sl, #0
 8006170:	2200      	movs	r2, #0
 8006172:	106d      	asrs	r5, r5, #1
 8006174:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006178:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800617c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006180:	4659      	mov	r1, fp
 8006182:	4650      	mov	r0, sl
 8006184:	4614      	mov	r4, r2
 8006186:	461d      	mov	r5, r3
 8006188:	f7fa fa0a 	bl	80005a0 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006194:	f7fa f850 	bl	8000238 <__aeabi_dsub>
 8006198:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800619c:	4606      	mov	r6, r0
 800619e:	460f      	mov	r7, r1
 80061a0:	4620      	mov	r0, r4
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7fa f848 	bl	8000238 <__aeabi_dsub>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061b0:	f7fa f842 	bl	8000238 <__aeabi_dsub>
 80061b4:	465b      	mov	r3, fp
 80061b6:	4652      	mov	r2, sl
 80061b8:	f7fa f9f2 	bl	80005a0 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f838 	bl	8000238 <__aeabi_dsub>
 80061c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061cc:	f7fa f9e8 	bl	80005a0 <__aeabi_dmul>
 80061d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	f7fa f9e0 	bl	80005a0 <__aeabi_dmul>
 80061e0:	a377      	add	r3, pc, #476	; (adr r3, 80063c0 <__ieee754_pow+0x6a8>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	f7fa f9d9 	bl	80005a0 <__aeabi_dmul>
 80061ee:	a376      	add	r3, pc, #472	; (adr r3, 80063c8 <__ieee754_pow+0x6b0>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7fa f822 	bl	800023c <__adddf3>
 80061f8:	4622      	mov	r2, r4
 80061fa:	462b      	mov	r3, r5
 80061fc:	f7fa f9d0 	bl	80005a0 <__aeabi_dmul>
 8006200:	a373      	add	r3, pc, #460	; (adr r3, 80063d0 <__ieee754_pow+0x6b8>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa f819 	bl	800023c <__adddf3>
 800620a:	4622      	mov	r2, r4
 800620c:	462b      	mov	r3, r5
 800620e:	f7fa f9c7 	bl	80005a0 <__aeabi_dmul>
 8006212:	a371      	add	r3, pc, #452	; (adr r3, 80063d8 <__ieee754_pow+0x6c0>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7fa f810 	bl	800023c <__adddf3>
 800621c:	4622      	mov	r2, r4
 800621e:	462b      	mov	r3, r5
 8006220:	f7fa f9be 	bl	80005a0 <__aeabi_dmul>
 8006224:	a36e      	add	r3, pc, #440	; (adr r3, 80063e0 <__ieee754_pow+0x6c8>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7fa f807 	bl	800023c <__adddf3>
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	f7fa f9b5 	bl	80005a0 <__aeabi_dmul>
 8006236:	a36c      	add	r3, pc, #432	; (adr r3, 80063e8 <__ieee754_pow+0x6d0>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7f9 fffe 	bl	800023c <__adddf3>
 8006240:	4622      	mov	r2, r4
 8006242:	4606      	mov	r6, r0
 8006244:	460f      	mov	r7, r1
 8006246:	462b      	mov	r3, r5
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7fa f9a8 	bl	80005a0 <__aeabi_dmul>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa f9a2 	bl	80005a0 <__aeabi_dmul>
 800625c:	4604      	mov	r4, r0
 800625e:	460d      	mov	r5, r1
 8006260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006264:	465b      	mov	r3, fp
 8006266:	4652      	mov	r2, sl
 8006268:	f7f9 ffe8 	bl	800023c <__adddf3>
 800626c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006270:	f7fa f996 	bl	80005a0 <__aeabi_dmul>
 8006274:	4622      	mov	r2, r4
 8006276:	462b      	mov	r3, r5
 8006278:	f7f9 ffe0 	bl	800023c <__adddf3>
 800627c:	465b      	mov	r3, fp
 800627e:	4606      	mov	r6, r0
 8006280:	460f      	mov	r7, r1
 8006282:	4652      	mov	r2, sl
 8006284:	4659      	mov	r1, fp
 8006286:	4650      	mov	r0, sl
 8006288:	f7fa f98a 	bl	80005a0 <__aeabi_dmul>
 800628c:	2200      	movs	r2, #0
 800628e:	4b63      	ldr	r3, [pc, #396]	; (800641c <__ieee754_pow+0x704>)
 8006290:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006294:	f7f9 ffd2 	bl	800023c <__adddf3>
 8006298:	4632      	mov	r2, r6
 800629a:	463b      	mov	r3, r7
 800629c:	f7f9 ffce 	bl	800023c <__adddf3>
 80062a0:	4650      	mov	r0, sl
 80062a2:	460d      	mov	r5, r1
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa f978 	bl	80005a0 <__aeabi_dmul>
 80062b0:	2200      	movs	r2, #0
 80062b2:	4680      	mov	r8, r0
 80062b4:	4689      	mov	r9, r1
 80062b6:	4b59      	ldr	r3, [pc, #356]	; (800641c <__ieee754_pow+0x704>)
 80062b8:	4629      	mov	r1, r5
 80062ba:	4650      	mov	r0, sl
 80062bc:	f7f9 ffbc 	bl	8000238 <__aeabi_dsub>
 80062c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062c4:	f7f9 ffb8 	bl	8000238 <__aeabi_dsub>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7f9 ffb2 	bl	8000238 <__aeabi_dsub>
 80062d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d8:	f7fa f962 	bl	80005a0 <__aeabi_dmul>
 80062dc:	462b      	mov	r3, r5
 80062de:	4606      	mov	r6, r0
 80062e0:	460f      	mov	r7, r1
 80062e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062e6:	4652      	mov	r2, sl
 80062e8:	f7fa f95a 	bl	80005a0 <__aeabi_dmul>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4630      	mov	r0, r6
 80062f2:	4639      	mov	r1, r7
 80062f4:	f7f9 ffa2 	bl	800023c <__adddf3>
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4640      	mov	r0, r8
 8006302:	4649      	mov	r1, r9
 8006304:	f7f9 ff9a 	bl	800023c <__adddf3>
 8006308:	a339      	add	r3, pc, #228	; (adr r3, 80063f0 <__ieee754_pow+0x6d8>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	4650      	mov	r0, sl
 8006310:	460d      	mov	r5, r1
 8006312:	f7fa f945 	bl	80005a0 <__aeabi_dmul>
 8006316:	4642      	mov	r2, r8
 8006318:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800631c:	464b      	mov	r3, r9
 800631e:	4629      	mov	r1, r5
 8006320:	4650      	mov	r0, sl
 8006322:	f7f9 ff89 	bl	8000238 <__aeabi_dsub>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4630      	mov	r0, r6
 800632c:	4639      	mov	r1, r7
 800632e:	f7f9 ff83 	bl	8000238 <__aeabi_dsub>
 8006332:	a331      	add	r3, pc, #196	; (adr r3, 80063f8 <__ieee754_pow+0x6e0>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f7fa f932 	bl	80005a0 <__aeabi_dmul>
 800633c:	a330      	add	r3, pc, #192	; (adr r3, 8006400 <__ieee754_pow+0x6e8>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	4650      	mov	r0, sl
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa f929 	bl	80005a0 <__aeabi_dmul>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7f9 ff71 	bl	800023c <__adddf3>
 800635a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800635c:	4b30      	ldr	r3, [pc, #192]	; (8006420 <__ieee754_pow+0x708>)
 800635e:	4413      	add	r3, r2
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7f9 ff6a 	bl	800023c <__adddf3>
 8006368:	4604      	mov	r4, r0
 800636a:	9807      	ldr	r0, [sp, #28]
 800636c:	460d      	mov	r5, r1
 800636e:	f7fa f8b1 	bl	80004d4 <__aeabi_i2d>
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006378:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <__ieee754_pow+0x70c>)
 800637a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800637e:	4413      	add	r3, r2
 8006380:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006384:	4622      	mov	r2, r4
 8006386:	462b      	mov	r3, r5
 8006388:	f7f9 ff58 	bl	800023c <__adddf3>
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	f7f9 ff54 	bl	800023c <__adddf3>
 8006394:	4632      	mov	r2, r6
 8006396:	463b      	mov	r3, r7
 8006398:	f7f9 ff50 	bl	800023c <__adddf3>
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	4650      	mov	r0, sl
 80063a2:	468b      	mov	fp, r1
 80063a4:	f7f9 ff48 	bl	8000238 <__aeabi_dsub>
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	f7f9 ff44 	bl	8000238 <__aeabi_dsub>
 80063b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b4:	e613      	b.n	8005fde <__ieee754_pow+0x2c6>
 80063b6:	2601      	movs	r6, #1
 80063b8:	e6af      	b.n	800611a <__ieee754_pow+0x402>
 80063ba:	bf00      	nop
 80063bc:	f3af 8000 	nop.w
 80063c0:	4a454eef 	.word	0x4a454eef
 80063c4:	3fca7e28 	.word	0x3fca7e28
 80063c8:	93c9db65 	.word	0x93c9db65
 80063cc:	3fcd864a 	.word	0x3fcd864a
 80063d0:	a91d4101 	.word	0xa91d4101
 80063d4:	3fd17460 	.word	0x3fd17460
 80063d8:	518f264d 	.word	0x518f264d
 80063dc:	3fd55555 	.word	0x3fd55555
 80063e0:	db6fabff 	.word	0xdb6fabff
 80063e4:	3fdb6db6 	.word	0x3fdb6db6
 80063e8:	33333303 	.word	0x33333303
 80063ec:	3fe33333 	.word	0x3fe33333
 80063f0:	e0000000 	.word	0xe0000000
 80063f4:	3feec709 	.word	0x3feec709
 80063f8:	dc3a03fd 	.word	0xdc3a03fd
 80063fc:	3feec709 	.word	0x3feec709
 8006400:	145b01f5 	.word	0x145b01f5
 8006404:	be3e2fe0 	.word	0xbe3e2fe0
 8006408:	43400000 	.word	0x43400000
 800640c:	0003988e 	.word	0x0003988e
 8006410:	000bb679 	.word	0x000bb679
 8006414:	08009288 	.word	0x08009288
 8006418:	3ff00000 	.word	0x3ff00000
 800641c:	40080000 	.word	0x40080000
 8006420:	080092a8 	.word	0x080092a8
 8006424:	08009298 	.word	0x08009298
 8006428:	a39b      	add	r3, pc, #620	; (adr r3, 8006698 <__ieee754_pow+0x980>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7f9 ff03 	bl	800023c <__adddf3>
 8006436:	4622      	mov	r2, r4
 8006438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800643c:	462b      	mov	r3, r5
 800643e:	4650      	mov	r0, sl
 8006440:	4639      	mov	r1, r7
 8006442:	f7f9 fef9 	bl	8000238 <__aeabi_dsub>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644e:	f7fa fb37 	bl	8000ac0 <__aeabi_dcmpgt>
 8006452:	2800      	cmp	r0, #0
 8006454:	f47f ae13 	bne.w	800607e <__ieee754_pow+0x366>
 8006458:	4aa3      	ldr	r2, [pc, #652]	; (80066e8 <__ieee754_pow+0x9d0>)
 800645a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800645e:	4293      	cmp	r3, r2
 8006460:	f340 8104 	ble.w	800666c <__ieee754_pow+0x954>
 8006464:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006468:	2000      	movs	r0, #0
 800646a:	151b      	asrs	r3, r3, #20
 800646c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006470:	fa4a f303 	asr.w	r3, sl, r3
 8006474:	4433      	add	r3, r6
 8006476:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800647a:	4f9c      	ldr	r7, [pc, #624]	; (80066ec <__ieee754_pow+0x9d4>)
 800647c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006480:	4117      	asrs	r7, r2
 8006482:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006486:	ea23 0107 	bic.w	r1, r3, r7
 800648a:	f1c2 0214 	rsb	r2, r2, #20
 800648e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006492:	fa4a fa02 	asr.w	sl, sl, r2
 8006496:	2e00      	cmp	r6, #0
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	bfb8      	it	lt
 80064a2:	f1ca 0a00 	rsblt	sl, sl, #0
 80064a6:	f7f9 fec7 	bl	8000238 <__aeabi_dsub>
 80064aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b2:	4642      	mov	r2, r8
 80064b4:	464b      	mov	r3, r9
 80064b6:	f7f9 fec1 	bl	800023c <__adddf3>
 80064ba:	a379      	add	r3, pc, #484	; (adr r3, 80066a0 <__ieee754_pow+0x988>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	2000      	movs	r0, #0
 80064c2:	460d      	mov	r5, r1
 80064c4:	4604      	mov	r4, r0
 80064c6:	f7fa f86b 	bl	80005a0 <__aeabi_dmul>
 80064ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
 80064d2:	4620      	mov	r0, r4
 80064d4:	4629      	mov	r1, r5
 80064d6:	f7f9 feaf 	bl	8000238 <__aeabi_dsub>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4640      	mov	r0, r8
 80064e0:	4649      	mov	r1, r9
 80064e2:	f7f9 fea9 	bl	8000238 <__aeabi_dsub>
 80064e6:	a370      	add	r3, pc, #448	; (adr r3, 80066a8 <__ieee754_pow+0x990>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7fa f858 	bl	80005a0 <__aeabi_dmul>
 80064f0:	a36f      	add	r3, pc, #444	; (adr r3, 80066b0 <__ieee754_pow+0x998>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7fa f84f 	bl	80005a0 <__aeabi_dmul>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7f9 fe97 	bl	800023c <__adddf3>
 800650e:	4604      	mov	r4, r0
 8006510:	460d      	mov	r5, r1
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7f9 fe8f 	bl	800023c <__adddf3>
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	4680      	mov	r8, r0
 8006524:	4689      	mov	r9, r1
 8006526:	f7f9 fe87 	bl	8000238 <__aeabi_dsub>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	f7f9 fe81 	bl	8000238 <__aeabi_dsub>
 8006536:	4642      	mov	r2, r8
 8006538:	4606      	mov	r6, r0
 800653a:	460f      	mov	r7, r1
 800653c:	464b      	mov	r3, r9
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7fa f82d 	bl	80005a0 <__aeabi_dmul>
 8006546:	a35c      	add	r3, pc, #368	; (adr r3, 80066b8 <__ieee754_pow+0x9a0>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	4604      	mov	r4, r0
 800654e:	460d      	mov	r5, r1
 8006550:	f7fa f826 	bl	80005a0 <__aeabi_dmul>
 8006554:	a35a      	add	r3, pc, #360	; (adr r3, 80066c0 <__ieee754_pow+0x9a8>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7f9 fe6d 	bl	8000238 <__aeabi_dsub>
 800655e:	4622      	mov	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	f7fa f81d 	bl	80005a0 <__aeabi_dmul>
 8006566:	a358      	add	r3, pc, #352	; (adr r3, 80066c8 <__ieee754_pow+0x9b0>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7f9 fe66 	bl	800023c <__adddf3>
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	f7fa f814 	bl	80005a0 <__aeabi_dmul>
 8006578:	a355      	add	r3, pc, #340	; (adr r3, 80066d0 <__ieee754_pow+0x9b8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fe5b 	bl	8000238 <__aeabi_dsub>
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	f7fa f80b 	bl	80005a0 <__aeabi_dmul>
 800658a:	a353      	add	r3, pc, #332	; (adr r3, 80066d8 <__ieee754_pow+0x9c0>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7f9 fe54 	bl	800023c <__adddf3>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	f7fa f802 	bl	80005a0 <__aeabi_dmul>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4640      	mov	r0, r8
 80065a2:	4649      	mov	r1, r9
 80065a4:	f7f9 fe48 	bl	8000238 <__aeabi_dsub>
 80065a8:	4604      	mov	r4, r0
 80065aa:	460d      	mov	r5, r1
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7f9 fff4 	bl	80005a0 <__aeabi_dmul>
 80065b8:	2200      	movs	r2, #0
 80065ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065c2:	4620      	mov	r0, r4
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7f9 fe37 	bl	8000238 <__aeabi_dsub>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d2:	f7fa f90f 	bl	80007f4 <__aeabi_ddiv>
 80065d6:	4632      	mov	r2, r6
 80065d8:	4604      	mov	r4, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	463b      	mov	r3, r7
 80065de:	4640      	mov	r0, r8
 80065e0:	4649      	mov	r1, r9
 80065e2:	f7f9 ffdd 	bl	80005a0 <__aeabi_dmul>
 80065e6:	4632      	mov	r2, r6
 80065e8:	463b      	mov	r3, r7
 80065ea:	f7f9 fe27 	bl	800023c <__adddf3>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f7f9 fe1f 	bl	8000238 <__aeabi_dsub>
 80065fa:	4642      	mov	r2, r8
 80065fc:	464b      	mov	r3, r9
 80065fe:	f7f9 fe1b 	bl	8000238 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	2000      	movs	r0, #0
 8006608:	4939      	ldr	r1, [pc, #228]	; (80066f0 <__ieee754_pow+0x9d8>)
 800660a:	f7f9 fe15 	bl	8000238 <__aeabi_dsub>
 800660e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006612:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006616:	da2c      	bge.n	8006672 <__ieee754_pow+0x95a>
 8006618:	4652      	mov	r2, sl
 800661a:	f000 f9b5 	bl	8006988 <scalbn>
 800661e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006622:	e40a      	b.n	8005e3a <__ieee754_pow+0x122>
 8006624:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <__ieee754_pow+0x9dc>)
 8006626:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800662a:	429f      	cmp	r7, r3
 800662c:	f77f af14 	ble.w	8006458 <__ieee754_pow+0x740>
 8006630:	4b31      	ldr	r3, [pc, #196]	; (80066f8 <__ieee754_pow+0x9e0>)
 8006632:	440b      	add	r3, r1
 8006634:	4303      	orrs	r3, r0
 8006636:	d00b      	beq.n	8006650 <__ieee754_pow+0x938>
 8006638:	a329      	add	r3, pc, #164	; (adr r3, 80066e0 <__ieee754_pow+0x9c8>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006642:	f7f9 ffad 	bl	80005a0 <__aeabi_dmul>
 8006646:	a326      	add	r3, pc, #152	; (adr r3, 80066e0 <__ieee754_pow+0x9c8>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7ff bbf5 	b.w	8005e3a <__ieee754_pow+0x122>
 8006650:	4622      	mov	r2, r4
 8006652:	462b      	mov	r3, r5
 8006654:	f7f9 fdf0 	bl	8000238 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fa1a 	bl	8000a98 <__aeabi_dcmple>
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f aef7 	beq.w	8006458 <__ieee754_pow+0x740>
 800666a:	e7e5      	b.n	8006638 <__ieee754_pow+0x920>
 800666c:	f04f 0a00 	mov.w	sl, #0
 8006670:	e71d      	b.n	80064ae <__ieee754_pow+0x796>
 8006672:	4621      	mov	r1, r4
 8006674:	e7d3      	b.n	800661e <__ieee754_pow+0x906>
 8006676:	2000      	movs	r0, #0
 8006678:	491d      	ldr	r1, [pc, #116]	; (80066f0 <__ieee754_pow+0x9d8>)
 800667a:	f7ff bbac 	b.w	8005dd6 <__ieee754_pow+0xbe>
 800667e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006682:	f7ff bba8 	b.w	8005dd6 <__ieee754_pow+0xbe>
 8006686:	4638      	mov	r0, r7
 8006688:	4641      	mov	r1, r8
 800668a:	f7ff bba4 	b.w	8005dd6 <__ieee754_pow+0xbe>
 800668e:	9200      	str	r2, [sp, #0]
 8006690:	f7ff bbb4 	b.w	8005dfc <__ieee754_pow+0xe4>
 8006694:	f3af 8000 	nop.w
 8006698:	652b82fe 	.word	0x652b82fe
 800669c:	3c971547 	.word	0x3c971547
 80066a0:	00000000 	.word	0x00000000
 80066a4:	3fe62e43 	.word	0x3fe62e43
 80066a8:	fefa39ef 	.word	0xfefa39ef
 80066ac:	3fe62e42 	.word	0x3fe62e42
 80066b0:	0ca86c39 	.word	0x0ca86c39
 80066b4:	be205c61 	.word	0xbe205c61
 80066b8:	72bea4d0 	.word	0x72bea4d0
 80066bc:	3e663769 	.word	0x3e663769
 80066c0:	c5d26bf1 	.word	0xc5d26bf1
 80066c4:	3ebbbd41 	.word	0x3ebbbd41
 80066c8:	af25de2c 	.word	0xaf25de2c
 80066cc:	3f11566a 	.word	0x3f11566a
 80066d0:	16bebd93 	.word	0x16bebd93
 80066d4:	3f66c16c 	.word	0x3f66c16c
 80066d8:	5555553e 	.word	0x5555553e
 80066dc:	3fc55555 	.word	0x3fc55555
 80066e0:	c2f8f359 	.word	0xc2f8f359
 80066e4:	01a56e1f 	.word	0x01a56e1f
 80066e8:	3fe00000 	.word	0x3fe00000
 80066ec:	000fffff 	.word	0x000fffff
 80066f0:	3ff00000 	.word	0x3ff00000
 80066f4:	4090cbff 	.word	0x4090cbff
 80066f8:	3f6f3400 	.word	0x3f6f3400

080066fc <__ieee754_sqrt>:
 80066fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8006850 <__ieee754_sqrt+0x154>
 8006704:	4606      	mov	r6, r0
 8006706:	ea3e 0e01 	bics.w	lr, lr, r1
 800670a:	460d      	mov	r5, r1
 800670c:	4607      	mov	r7, r0
 800670e:	460a      	mov	r2, r1
 8006710:	460c      	mov	r4, r1
 8006712:	4603      	mov	r3, r0
 8006714:	d10f      	bne.n	8006736 <__ieee754_sqrt+0x3a>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	f7f9 ff41 	bl	80005a0 <__aeabi_dmul>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4630      	mov	r0, r6
 8006724:	4629      	mov	r1, r5
 8006726:	f7f9 fd89 	bl	800023c <__adddf3>
 800672a:	4606      	mov	r6, r0
 800672c:	460d      	mov	r5, r1
 800672e:	4630      	mov	r0, r6
 8006730:	4629      	mov	r1, r5
 8006732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006736:	2900      	cmp	r1, #0
 8006738:	dc0e      	bgt.n	8006758 <__ieee754_sqrt+0x5c>
 800673a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800673e:	ea5e 0707 	orrs.w	r7, lr, r7
 8006742:	d0f4      	beq.n	800672e <__ieee754_sqrt+0x32>
 8006744:	b141      	cbz	r1, 8006758 <__ieee754_sqrt+0x5c>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	f7f9 fd75 	bl	8000238 <__aeabi_dsub>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	f7fa f84f 	bl	80007f4 <__aeabi_ddiv>
 8006756:	e7e8      	b.n	800672a <__ieee754_sqrt+0x2e>
 8006758:	1512      	asrs	r2, r2, #20
 800675a:	d10c      	bne.n	8006776 <__ieee754_sqrt+0x7a>
 800675c:	2c00      	cmp	r4, #0
 800675e:	d06e      	beq.n	800683e <__ieee754_sqrt+0x142>
 8006760:	2100      	movs	r1, #0
 8006762:	02e6      	lsls	r6, r4, #11
 8006764:	d56f      	bpl.n	8006846 <__ieee754_sqrt+0x14a>
 8006766:	1e48      	subs	r0, r1, #1
 8006768:	1a12      	subs	r2, r2, r0
 800676a:	f1c1 0020 	rsb	r0, r1, #32
 800676e:	fa23 f000 	lsr.w	r0, r3, r0
 8006772:	4304      	orrs	r4, r0
 8006774:	408b      	lsls	r3, r1
 8006776:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800677a:	07d5      	lsls	r5, r2, #31
 800677c:	f04f 0500 	mov.w	r5, #0
 8006780:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006784:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006788:	bf42      	ittt	mi
 800678a:	0064      	lslmi	r4, r4, #1
 800678c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8006790:	005b      	lslmi	r3, r3, #1
 8006792:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8006796:	1050      	asrs	r0, r2, #1
 8006798:	4421      	add	r1, r4
 800679a:	2216      	movs	r2, #22
 800679c:	462c      	mov	r4, r5
 800679e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	19a7      	adds	r7, r4, r6
 80067a6:	428f      	cmp	r7, r1
 80067a8:	bfde      	ittt	le
 80067aa:	1bc9      	suble	r1, r1, r7
 80067ac:	19bc      	addle	r4, r7, r6
 80067ae:	19ad      	addle	r5, r5, r6
 80067b0:	0049      	lsls	r1, r1, #1
 80067b2:	3a01      	subs	r2, #1
 80067b4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80067b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067c0:	d1f0      	bne.n	80067a4 <__ieee754_sqrt+0xa8>
 80067c2:	f04f 0e20 	mov.w	lr, #32
 80067c6:	4694      	mov	ip, r2
 80067c8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067cc:	42a1      	cmp	r1, r4
 80067ce:	eb06 070c 	add.w	r7, r6, ip
 80067d2:	dc02      	bgt.n	80067da <__ieee754_sqrt+0xde>
 80067d4:	d112      	bne.n	80067fc <__ieee754_sqrt+0x100>
 80067d6:	429f      	cmp	r7, r3
 80067d8:	d810      	bhi.n	80067fc <__ieee754_sqrt+0x100>
 80067da:	2f00      	cmp	r7, #0
 80067dc:	eb07 0c06 	add.w	ip, r7, r6
 80067e0:	da34      	bge.n	800684c <__ieee754_sqrt+0x150>
 80067e2:	f1bc 0f00 	cmp.w	ip, #0
 80067e6:	db31      	blt.n	800684c <__ieee754_sqrt+0x150>
 80067e8:	f104 0801 	add.w	r8, r4, #1
 80067ec:	1b09      	subs	r1, r1, r4
 80067ee:	4644      	mov	r4, r8
 80067f0:	429f      	cmp	r7, r3
 80067f2:	bf88      	it	hi
 80067f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80067f8:	1bdb      	subs	r3, r3, r7
 80067fa:	4432      	add	r2, r6
 80067fc:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8006800:	f1be 0e01 	subs.w	lr, lr, #1
 8006804:	4439      	add	r1, r7
 8006806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800680a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800680e:	d1dd      	bne.n	80067cc <__ieee754_sqrt+0xd0>
 8006810:	430b      	orrs	r3, r1
 8006812:	d006      	beq.n	8006822 <__ieee754_sqrt+0x126>
 8006814:	1c54      	adds	r4, r2, #1
 8006816:	bf0b      	itete	eq
 8006818:	4672      	moveq	r2, lr
 800681a:	3201      	addne	r2, #1
 800681c:	3501      	addeq	r5, #1
 800681e:	f022 0201 	bicne.w	r2, r2, #1
 8006822:	106b      	asrs	r3, r5, #1
 8006824:	0852      	lsrs	r2, r2, #1
 8006826:	07e9      	lsls	r1, r5, #31
 8006828:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800682c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006830:	bf48      	it	mi
 8006832:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006836:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800683a:	4616      	mov	r6, r2
 800683c:	e777      	b.n	800672e <__ieee754_sqrt+0x32>
 800683e:	0adc      	lsrs	r4, r3, #11
 8006840:	3a15      	subs	r2, #21
 8006842:	055b      	lsls	r3, r3, #21
 8006844:	e78a      	b.n	800675c <__ieee754_sqrt+0x60>
 8006846:	0064      	lsls	r4, r4, #1
 8006848:	3101      	adds	r1, #1
 800684a:	e78a      	b.n	8006762 <__ieee754_sqrt+0x66>
 800684c:	46a0      	mov	r8, r4
 800684e:	e7cd      	b.n	80067ec <__ieee754_sqrt+0xf0>
 8006850:	7ff00000 	.word	0x7ff00000

08006854 <fabs>:
 8006854:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006858:	4770      	bx	lr

0800685a <finite>:
 800685a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800685e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006862:	0fc0      	lsrs	r0, r0, #31
 8006864:	4770      	bx	lr

08006866 <matherr>:
 8006866:	2000      	movs	r0, #0
 8006868:	4770      	bx	lr
	...

0800686c <nan>:
 800686c:	2000      	movs	r0, #0
 800686e:	4901      	ldr	r1, [pc, #4]	; (8006874 <nan+0x8>)
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	7ff80000 	.word	0x7ff80000

08006878 <rint>:
 8006878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800687a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800687e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8006882:	2f13      	cmp	r7, #19
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4684      	mov	ip, r0
 800688a:	460c      	mov	r4, r1
 800688c:	4605      	mov	r5, r0
 800688e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006892:	dc56      	bgt.n	8006942 <rint+0xca>
 8006894:	2f00      	cmp	r7, #0
 8006896:	da29      	bge.n	80068ec <rint+0x74>
 8006898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800689c:	4301      	orrs	r1, r0
 800689e:	d021      	beq.n	80068e4 <rint+0x6c>
 80068a0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80068a4:	4305      	orrs	r5, r0
 80068a6:	426b      	negs	r3, r5
 80068a8:	432b      	orrs	r3, r5
 80068aa:	0b1b      	lsrs	r3, r3, #12
 80068ac:	0c64      	lsrs	r4, r4, #17
 80068ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b2:	0464      	lsls	r4, r4, #17
 80068b4:	ea43 0104 	orr.w	r1, r3, r4
 80068b8:	4b31      	ldr	r3, [pc, #196]	; (8006980 <rint+0x108>)
 80068ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	f7f9 fcb9 	bl	800023c <__adddf3>
 80068ca:	e9cd 0100 	strd	r0, r1, [sp]
 80068ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068d2:	4622      	mov	r2, r4
 80068d4:	462b      	mov	r3, r5
 80068d6:	f7f9 fcaf 	bl	8000238 <__aeabi_dsub>
 80068da:	4602      	mov	r2, r0
 80068dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80068e0:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 80068e4:	4610      	mov	r0, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	b003      	add	sp, #12
 80068ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ec:	4925      	ldr	r1, [pc, #148]	; (8006984 <rint+0x10c>)
 80068ee:	4139      	asrs	r1, r7
 80068f0:	ea03 0001 	and.w	r0, r3, r1
 80068f4:	4310      	orrs	r0, r2
 80068f6:	d0f5      	beq.n	80068e4 <rint+0x6c>
 80068f8:	084b      	lsrs	r3, r1, #1
 80068fa:	ea04 0203 	and.w	r2, r4, r3
 80068fe:	ea52 050c 	orrs.w	r5, r2, ip
 8006902:	d00a      	beq.n	800691a <rint+0xa2>
 8006904:	ea24 0303 	bic.w	r3, r4, r3
 8006908:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800690c:	2f13      	cmp	r7, #19
 800690e:	bf0c      	ite	eq
 8006910:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8006914:	2500      	movne	r5, #0
 8006916:	413c      	asrs	r4, r7
 8006918:	431c      	orrs	r4, r3
 800691a:	4b19      	ldr	r3, [pc, #100]	; (8006980 <rint+0x108>)
 800691c:	4621      	mov	r1, r4
 800691e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006922:	4628      	mov	r0, r5
 8006924:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006928:	4622      	mov	r2, r4
 800692a:	462b      	mov	r3, r5
 800692c:	f7f9 fc86 	bl	800023c <__adddf3>
 8006930:	e9cd 0100 	strd	r0, r1, [sp]
 8006934:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	f7f9 fc7c 	bl	8000238 <__aeabi_dsub>
 8006940:	e006      	b.n	8006950 <rint+0xd8>
 8006942:	2f33      	cmp	r7, #51	; 0x33
 8006944:	dd07      	ble.n	8006956 <rint+0xde>
 8006946:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800694a:	d1cb      	bne.n	80068e4 <rint+0x6c>
 800694c:	f7f9 fc76 	bl	800023c <__adddf3>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	e7c6      	b.n	80068e4 <rint+0x6c>
 8006956:	f04f 31ff 	mov.w	r1, #4294967295
 800695a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800695e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006962:	4208      	tst	r0, r1
 8006964:	d0be      	beq.n	80068e4 <rint+0x6c>
 8006966:	084b      	lsrs	r3, r1, #1
 8006968:	4218      	tst	r0, r3
 800696a:	bf1f      	itttt	ne
 800696c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006970:	ea20 0303 	bicne.w	r3, r0, r3
 8006974:	fa45 fe0e 	asrne.w	lr, r5, lr
 8006978:	ea4e 0503 	orrne.w	r5, lr, r3
 800697c:	e7cd      	b.n	800691a <rint+0xa2>
 800697e:	bf00      	nop
 8006980:	080092b8 	.word	0x080092b8
 8006984:	000fffff 	.word	0x000fffff

08006988 <scalbn>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	4616      	mov	r6, r2
 800698c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006990:	4604      	mov	r4, r0
 8006992:	460d      	mov	r5, r1
 8006994:	460b      	mov	r3, r1
 8006996:	b98a      	cbnz	r2, 80069bc <scalbn+0x34>
 8006998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800699c:	4303      	orrs	r3, r0
 800699e:	d035      	beq.n	8006a0c <scalbn+0x84>
 80069a0:	2200      	movs	r2, #0
 80069a2:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <scalbn+0xd0>)
 80069a4:	f7f9 fdfc 	bl	80005a0 <__aeabi_dmul>
 80069a8:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <scalbn+0xd4>)
 80069aa:	4604      	mov	r4, r0
 80069ac:	4296      	cmp	r6, r2
 80069ae:	460d      	mov	r5, r1
 80069b0:	460b      	mov	r3, r1
 80069b2:	da0e      	bge.n	80069d2 <scalbn+0x4a>
 80069b4:	a324      	add	r3, pc, #144	; (adr r3, 8006a48 <scalbn+0xc0>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	e01c      	b.n	80069f6 <scalbn+0x6e>
 80069bc:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80069c0:	42ba      	cmp	r2, r7
 80069c2:	d109      	bne.n	80069d8 <scalbn+0x50>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	f7f9 fc38 	bl	800023c <__adddf3>
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	e01c      	b.n	8006a0c <scalbn+0x84>
 80069d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069d6:	3a36      	subs	r2, #54	; 0x36
 80069d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80069dc:	4432      	add	r2, r6
 80069de:	428a      	cmp	r2, r1
 80069e0:	dd0c      	ble.n	80069fc <scalbn+0x74>
 80069e2:	4622      	mov	r2, r4
 80069e4:	462b      	mov	r3, r5
 80069e6:	a11a      	add	r1, pc, #104	; (adr r1, 8006a50 <scalbn+0xc8>)
 80069e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ec:	f000 f83a 	bl	8006a64 <copysign>
 80069f0:	a317      	add	r3, pc, #92	; (adr r3, 8006a50 <scalbn+0xc8>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f7f9 fdd3 	bl	80005a0 <__aeabi_dmul>
 80069fa:	e7e7      	b.n	80069cc <scalbn+0x44>
 80069fc:	2a00      	cmp	r2, #0
 80069fe:	dd08      	ble.n	8006a12 <scalbn+0x8a>
 8006a00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4629      	mov	r1, r5
 8006a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a12:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a16:	da0b      	bge.n	8006a30 <scalbn+0xa8>
 8006a18:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a1c:	429e      	cmp	r6, r3
 8006a1e:	4622      	mov	r2, r4
 8006a20:	462b      	mov	r3, r5
 8006a22:	dce0      	bgt.n	80069e6 <scalbn+0x5e>
 8006a24:	a108      	add	r1, pc, #32	; (adr r1, 8006a48 <scalbn+0xc0>)
 8006a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a2a:	f000 f81b 	bl	8006a64 <copysign>
 8006a2e:	e7c1      	b.n	80069b4 <scalbn+0x2c>
 8006a30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a34:	3236      	adds	r2, #54	; 0x36
 8006a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a3e:	4620      	mov	r0, r4
 8006a40:	4629      	mov	r1, r5
 8006a42:	2200      	movs	r2, #0
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <scalbn+0xd8>)
 8006a46:	e7d6      	b.n	80069f6 <scalbn+0x6e>
 8006a48:	c2f8f359 	.word	0xc2f8f359
 8006a4c:	01a56e1f 	.word	0x01a56e1f
 8006a50:	8800759c 	.word	0x8800759c
 8006a54:	7e37e43c 	.word	0x7e37e43c
 8006a58:	43500000 	.word	0x43500000
 8006a5c:	ffff3cb0 	.word	0xffff3cb0
 8006a60:	3c900000 	.word	0x3c900000

08006a64 <copysign>:
 8006a64:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6c:	ea42 0103 	orr.w	r1, r2, r3
 8006a70:	4770      	bx	lr
	...

08006a74 <__errno>:
 8006a74:	4b01      	ldr	r3, [pc, #4]	; (8006a7c <__errno+0x8>)
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000144 	.word	0x20000144

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
