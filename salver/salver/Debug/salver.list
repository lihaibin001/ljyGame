
salver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005120  2000000c  08004280  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  2000512c  08004280  0002512c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e589  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002790  00000000  00000000  0002e5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000da8  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c40  00000000  00000000  00031af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000058a8  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000465f  00000000  00000000  00037fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c63f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003748  00000000  00000000  0003c6bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000000c 	.word	0x2000000c
 800020c:	00000000 	.word	0x00000000
 8000210:	080040d8 	.word	0x080040d8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000010 	.word	0x20000010
 800022c:	080040d8 	.word	0x080040d8

08000230 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	2300      	movs	r3, #0
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	230f      	movs	r3, #15
 8000242:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	78db      	ldrb	r3, [r3, #3]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d03a      	beq.n	80002c2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800024c:	4b27      	ldr	r3, [pc, #156]	; (80002ec <NVIC_Init+0xbc>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	43db      	mvns	r3, r3
 8000252:	0a1b      	lsrs	r3, r3, #8
 8000254:	f003 0307 	and.w	r3, r3, #7
 8000258:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	f1c3 0304 	rsb	r3, r3, #4
 8000260:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	fa22 f303 	lsr.w	r3, r2, r3
 800026a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	785b      	ldrb	r3, [r3, #1]
 8000270:	461a      	mov	r2, r3
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	789b      	ldrb	r3, [r3, #2]
 800027e:	461a      	mov	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	4013      	ands	r3, r2
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	4313      	orrs	r3, r2
 8000288:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000290:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <NVIC_Init+0xc0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	6979      	ldr	r1, [r7, #20]
 8000298:	b2c9      	uxtb	r1, r1
 800029a:	4413      	add	r3, r2
 800029c:	460a      	mov	r2, r1
 800029e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002a2:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <NVIC_Init+0xc0>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	095b      	lsrs	r3, r3, #5
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	f003 031f 	and.w	r3, r3, #31
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80002c0:	e00f      	b.n	80002e2 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002c2:	490b      	ldr	r1, [pc, #44]	; (80002f0 <NVIC_Init+0xc0>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	095b      	lsrs	r3, r3, #5
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f003 031f 	and.w	r3, r3, #31
 80002d6:	2201      	movs	r2, #1
 80002d8:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002da:	f100 0320 	add.w	r3, r0, #32
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000ed00 	.word	0xe000ed00
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <CAN_Init>:
  *                         CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80002fe:	2300      	movs	r3, #0
 8000300:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f023 0202 	bic.w	r2, r3, #2
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0201 	orr.w	r2, r3, #1
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800031e:	e002      	b.n	8000326 <CAN_Init+0x32>
  {
    wait_ack++;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3301      	adds	r3, #1
 8000324:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	2b01      	cmp	r3, #1
 8000330:	d004      	beq.n	800033c <CAN_Init+0x48>
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000338:	4293      	cmp	r3, r2
 800033a:	d1f1      	bne.n	8000320 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	d002      	beq.n	800034e <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000348:	2300      	movs	r3, #0
 800034a:	73fb      	strb	r3, [r7, #15]
 800034c:	e09c      	b.n	8000488 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	799b      	ldrb	r3, [r3, #6]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d106      	bne.n	8000364 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	e005      	b.n	8000370 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	79db      	ldrb	r3, [r3, #7]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d106      	bne.n	8000386 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	e005      	b.n	8000392 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	7a1b      	ldrb	r3, [r3, #8]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d106      	bne.n	80003a8 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0220 	orr.w	r2, r3, #32
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e005      	b.n	80003b4 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f023 0220 	bic.w	r2, r3, #32
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	7a5b      	ldrb	r3, [r3, #9]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d106      	bne.n	80003ca <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f043 0210 	orr.w	r2, r3, #16
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	e005      	b.n	80003d6 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f023 0210 	bic.w	r2, r3, #16
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	7a9b      	ldrb	r3, [r3, #10]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d106      	bne.n	80003ec <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0208 	orr.w	r2, r3, #8
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e005      	b.n	80003f8 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f023 0208 	bic.w	r2, r3, #8
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	7adb      	ldrb	r3, [r3, #11]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d106      	bne.n	800040e <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f043 0204 	orr.w	r2, r3, #4
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	e005      	b.n	800041a <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f023 0204 	bic.w	r2, r3, #4
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	78db      	ldrb	r3, [r3, #3]
 8000424:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000426:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800042e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000436:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800043e:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f023 0201 	bic.w	r2, r3, #1
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000454:	e002      	b.n	800045c <CAN_Init+0x168>
   {
     wait_ack++;
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	3301      	adds	r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	2b01      	cmp	r3, #1
 8000466:	d104      	bne.n	8000472 <CAN_Init+0x17e>
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800046e:	4293      	cmp	r3, r2
 8000470:	d1f1      	bne.n	8000456 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 800047e:	2300      	movs	r3, #0
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	e001      	b.n	8000488 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <CAN_FilterInit>:
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	7a9b      	ldrb	r3, [r3, #10]
 80004a4:	461a      	mov	r2, r3
 80004a6:	2301      	movs	r3, #1
 80004a8:	4093      	lsls	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80004ac:	4a55      	ldr	r2, [pc, #340]	; (8000604 <CAN_FilterInit+0x170>)
 80004ae:	4b55      	ldr	r3, [pc, #340]	; (8000604 <CAN_FilterInit+0x170>)
 80004b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80004bc:	4951      	ldr	r1, [pc, #324]	; (8000604 <CAN_FilterInit+0x170>)
 80004be:	4b51      	ldr	r3, [pc, #324]	; (8000604 <CAN_FilterInit+0x170>)
 80004c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	43db      	mvns	r3, r3
 80004c8:	4013      	ands	r3, r2
 80004ca:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7b1b      	ldrb	r3, [r3, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d125      	bne.n	8000522 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80004d6:	494b      	ldr	r1, [pc, #300]	; (8000604 <CAN_FilterInit+0x170>)
 80004d8:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <CAN_FilterInit+0x170>)
 80004da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4013      	ands	r3, r2
 80004e4:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004e8:	4946      	ldr	r1, [pc, #280]	; (8000604 <CAN_FilterInit+0x170>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	7a9b      	ldrb	r3, [r3, #10]
 80004ee:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	88db      	ldrh	r3, [r3, #6]
 80004f4:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	8852      	ldrh	r2, [r2, #2]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80004fa:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004fc:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000500:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000504:	493f      	ldr	r1, [pc, #252]	; (8000604 <CAN_FilterInit+0x170>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	7a9b      	ldrb	r3, [r3, #10]
 800050a:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	889b      	ldrh	r3, [r3, #4]
 8000510:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	8812      	ldrh	r2, [r2, #0]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000516:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000518:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	440b      	add	r3, r1
 8000520:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7b1b      	ldrb	r3, [r3, #12]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d124      	bne.n	8000574 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800052a:	4936      	ldr	r1, [pc, #216]	; (8000604 <CAN_FilterInit+0x170>)
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <CAN_FilterInit+0x170>)
 800052e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4313      	orrs	r3, r2
 8000536:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800053a:	4932      	ldr	r1, [pc, #200]	; (8000604 <CAN_FilterInit+0x170>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7a9b      	ldrb	r3, [r3, #10]
 8000540:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	8852      	ldrh	r2, [r2, #2]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800054c:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800054e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000556:	492b      	ldr	r1, [pc, #172]	; (8000604 <CAN_FilterInit+0x170>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7a9b      	ldrb	r3, [r3, #10]
 800055c:	4618      	mov	r0, r3
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	889b      	ldrh	r3, [r3, #4]
 8000562:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	88d2      	ldrh	r2, [r2, #6]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000568:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800056a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	440b      	add	r3, r1
 8000572:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7adb      	ldrb	r3, [r3, #11]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d109      	bne.n	8000590 <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 800057c:	4921      	ldr	r1, [pc, #132]	; (8000604 <CAN_FilterInit+0x170>)
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <CAN_FilterInit+0x170>)
 8000580:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	43db      	mvns	r3, r3
 8000588:	4013      	ands	r3, r2
 800058a:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 800058e:	e007      	b.n	80005a0 <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000590:	491c      	ldr	r1, [pc, #112]	; (8000604 <CAN_FilterInit+0x170>)
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <CAN_FilterInit+0x170>)
 8000594:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4313      	orrs	r3, r2
 800059c:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	891b      	ldrh	r3, [r3, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d108      	bne.n	80005ba <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 80005a8:	4916      	ldr	r1, [pc, #88]	; (8000604 <CAN_FilterInit+0x170>)
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <CAN_FilterInit+0x170>)
 80005ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	43db      	mvns	r3, r3
 80005b4:	4013      	ands	r3, r2
 80005b6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	891b      	ldrh	r3, [r3, #8]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d107      	bne.n	80005d2 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <CAN_FilterInit+0x170>)
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <CAN_FilterInit+0x170>)
 80005c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7b5b      	ldrb	r3, [r3, #13]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d107      	bne.n	80005ea <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 80005da:	490a      	ldr	r1, [pc, #40]	; (8000604 <CAN_FilterInit+0x170>)
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <CAN_FilterInit+0x170>)
 80005de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80005ea:	4a06      	ldr	r2, [pc, #24]	; (8000604 <CAN_FilterInit+0x170>)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <CAN_FilterInit+0x170>)
 80005ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f2:	f023 0301 	bic.w	r3, r3, #1
 80005f6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40006400 	.word	0x40006400

08000608 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	460b      	mov	r3, r1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000616:	7afb      	ldrb	r3, [r7, #11]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	331b      	adds	r3, #27
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	4413      	add	r3, r2
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	b2da      	uxtb	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a1b      	ldrb	r3, [r3, #8]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	331b      	adds	r3, #27
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0d5b      	lsrs	r3, r3, #21
 8000644:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e00a      	b.n	8000664 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	331b      	adds	r3, #27
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4413      	add	r3, r2
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	08db      	lsrs	r3, r3, #3
 800065c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000664:	7afb      	ldrb	r3, [r7, #11]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	331b      	adds	r3, #27
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	4413      	add	r3, r2
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800067c:	7afb      	ldrb	r3, [r7, #11]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	331b      	adds	r3, #27
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	4413      	add	r3, r2
 8000686:	3304      	adds	r3, #4
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 030f 	and.w	r3, r3, #15
 8000690:	b2da      	uxtb	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000696:	7afb      	ldrb	r3, [r7, #11]
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	331b      	adds	r3, #27
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	4413      	add	r3, r2
 80006a0:	3304      	adds	r3, #4
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80006ac:	7afb      	ldrb	r3, [r7, #11]
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	4413      	add	r3, r2
 80006b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	4413      	add	r3, r2
 80006de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	0c1b      	lsrs	r3, r3, #16
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	0e1b      	lsrs	r3, r3, #24
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	4413      	add	r3, r2
 800070a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000716:	7afb      	ldrb	r3, [r7, #11]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	4413      	add	r3, r2
 800071e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b2da      	uxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	4413      	add	r3, r2
 8000734:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	b2da      	uxtb	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	4413      	add	r3, r2
 800074a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	0e1b      	lsrs	r3, r3, #24
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000758:	7afb      	ldrb	r3, [r7, #11]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d106      	bne.n	800076c <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f043 0220 	orr.w	r2, r3, #32
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 800076a:	e005      	b.n	8000778 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	f043 0220 	orr.w	r2, r3, #32
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *                   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8000782:	b480      	push	{r7}
 8000784:	b085      	sub	sp, #20
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	4613      	mov	r3, r2
 800078e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d006      	beq.n	80007a4 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	431a      	orrs	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 80007a2:	e006      	b.n	80007b2 <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	43db      	mvns	r3, r3
 80007ac:	401a      	ands	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	615a      	str	r2, [r3, #20]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <CAN_GetITStatus>:
  *                 -  CAN_IT_LEC    
  *                 -  CAN_IT_ERR 
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 80b2 	beq.w	800093c <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b40      	cmp	r3, #64	; 0x40
 80007dc:	d062      	beq.n	80008a4 <CAN_GetITStatus+0xe8>
 80007de:	2b40      	cmp	r3, #64	; 0x40
 80007e0:	d80f      	bhi.n	8000802 <CAN_GetITStatus+0x46>
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d03a      	beq.n	800085c <CAN_GetITStatus+0xa0>
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d804      	bhi.n	80007f4 <CAN_GetITStatus+0x38>
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d024      	beq.n	8000838 <CAN_GetITStatus+0x7c>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d02b      	beq.n	800084a <CAN_GetITStatus+0x8e>
 80007f2:	e09f      	b.n	8000934 <CAN_GetITStatus+0x178>
 80007f4:	2b10      	cmp	r3, #16
 80007f6:	d043      	beq.n	8000880 <CAN_GetITStatus+0xc4>
 80007f8:	2b20      	cmp	r3, #32
 80007fa:	d04a      	beq.n	8000892 <CAN_GetITStatus+0xd6>
 80007fc:	2b08      	cmp	r3, #8
 80007fe:	d036      	beq.n	800086e <CAN_GetITStatus+0xb2>
 8000800:	e098      	b.n	8000934 <CAN_GetITStatus+0x178>
 8000802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000806:	f000 8083 	beq.w	8000910 <CAN_GetITStatus+0x154>
 800080a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080e:	d809      	bhi.n	8000824 <CAN_GetITStatus+0x68>
 8000810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000814:	d06a      	beq.n	80008ec <CAN_GetITStatus+0x130>
 8000816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800081a:	d070      	beq.n	80008fe <CAN_GetITStatus+0x142>
 800081c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000820:	d05b      	beq.n	80008da <CAN_GetITStatus+0x11e>
 8000822:	e087      	b.n	8000934 <CAN_GetITStatus+0x178>
 8000824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000828:	d045      	beq.n	80008b6 <CAN_GetITStatus+0xfa>
 800082a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800082e:	d04b      	beq.n	80008c8 <CAN_GetITStatus+0x10c>
 8000830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000834:	d075      	beq.n	8000922 <CAN_GetITStatus+0x166>
 8000836:	e07d      	b.n	8000934 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	4943      	ldr	r1, [pc, #268]	; (800094c <CAN_GetITStatus+0x190>)
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f8f4 	bl	8000a2c <CheckITStatus>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
	      break;
 8000848:	e07a      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	2103      	movs	r1, #3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f8eb 	bl	8000a2c <CheckITStatus>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]
	      break;
 800085a:	e071      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	2108      	movs	r1, #8
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f8e2 	bl	8000a2c <CheckITStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
	      break;
 800086c:	e068      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	2110      	movs	r1, #16
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f8d9 	bl	8000a2c <CheckITStatus>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
	      break;
 800087e:	e05f      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	2103      	movs	r1, #3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f8d0 	bl	8000a2c <CheckITStatus>
 800088c:	4603      	mov	r3, r0
 800088e:	73fb      	strb	r3, [r7, #15]
	      break;
 8000890:	e056      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	2108      	movs	r1, #8
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f8c7 	bl	8000a2c <CheckITStatus>
 800089e:	4603      	mov	r3, r0
 80008a0:	73fb      	strb	r3, [r7, #15]
	      break;
 80008a2:	e04d      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
               /* Check CAN_RF1R_FOVR1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	2110      	movs	r1, #16
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f8be 	bl	8000a2c <CheckITStatus>
 80008b0:	4603      	mov	r3, r0
 80008b2:	73fb      	strb	r3, [r7, #15]
	      break;
 80008b4:	e044      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
               /* Check CAN_MSR_WKUI bit */
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2108      	movs	r1, #8
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f8b5 	bl	8000a2c <CheckITStatus>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]
	      break;
 80008c6:	e03b      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2110      	movs	r1, #16
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f8ac 	bl	8000a2c <CheckITStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73fb      	strb	r3, [r7, #15]
	      break;
 80008d8:	e032      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	2101      	movs	r1, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f8a3 	bl	8000a2c <CheckITStatus>
 80008e6:	4603      	mov	r3, r0
 80008e8:	73fb      	strb	r3, [r7, #15]
	      break;
 80008ea:	e029      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	2102      	movs	r1, #2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f89a 	bl	8000a2c <CheckITStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
	      break;
 80008fc:	e020      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
               /* Check CAN_ESR_BOFF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	2104      	movs	r1, #4
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f891 	bl	8000a2c <CheckITStatus>
 800090a:	4603      	mov	r3, r0
 800090c:	73fb      	strb	r3, [r7, #15]
	      break;
 800090e:	e017      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	2170      	movs	r1, #112	; 0x70
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f888 	bl	8000a2c <CheckITStatus>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
	      break;
 8000920:	e00e      	b.n	8000940 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2104      	movs	r1, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f87f 	bl	8000a2c <CheckITStatus>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
	      break;
 8000932:	e005      	b.n	8000940 <CAN_GetITStatus+0x184>
      default :
               /* in case of error, return RESET */
              itstatus = RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
              break;
 8000938:	bf00      	nop
 800093a:	e001      	b.n	8000940 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	00010101 	.word	0x00010101

08000950 <CAN_ClearITPendingBit>:
  *                  -  CAN_IT_LEC    
  *                  -  CAN_IT_ERR 
  * @retval None.
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000960:	d043      	beq.n	80009ea <CAN_ClearITPendingBit+0x9a>
 8000962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000966:	d80d      	bhi.n	8000984 <CAN_ClearITPendingBit+0x34>
 8000968:	2b08      	cmp	r3, #8
 800096a:	d02a      	beq.n	80009c2 <CAN_ClearITPendingBit+0x72>
 800096c:	2b08      	cmp	r3, #8
 800096e:	d804      	bhi.n	800097a <CAN_ClearITPendingBit+0x2a>
 8000970:	2b01      	cmp	r3, #1
 8000972:	d01e      	beq.n	80009b2 <CAN_ClearITPendingBit+0x62>
 8000974:	2b04      	cmp	r3, #4
 8000976:	d020      	beq.n	80009ba <CAN_ClearITPendingBit+0x6a>
	      CANx->MSR = CAN_MSR_ERRI; 
	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
                  of the CAN Bus status*/
	      break;
      default :
	      break;
 8000978:	e051      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 800097a:	2b20      	cmp	r3, #32
 800097c:	d025      	beq.n	80009ca <CAN_ClearITPendingBit+0x7a>
 800097e:	2b40      	cmp	r3, #64	; 0x40
 8000980:	d027      	beq.n	80009d2 <CAN_ClearITPendingBit+0x82>
	      break;
 8000982:	e04c      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 8000984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000988:	d03b      	beq.n	8000a02 <CAN_ClearITPendingBit+0xb2>
 800098a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800098e:	d806      	bhi.n	800099e <CAN_ClearITPendingBit+0x4e>
 8000990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000994:	d02d      	beq.n	80009f2 <CAN_ClearITPendingBit+0xa2>
 8000996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800099a:	d02e      	beq.n	80009fa <CAN_ClearITPendingBit+0xaa>
	      break;
 800099c:	e03f      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 800099e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009a2:	d01a      	beq.n	80009da <CAN_ClearITPendingBit+0x8a>
 80009a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80009a8:	d01b      	beq.n	80009e2 <CAN_ClearITPendingBit+0x92>
 80009aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009ae:	d02f      	beq.n	8000a10 <CAN_ClearITPendingBit+0xc0>
	      break;
 80009b0:	e035      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <CAN_ClearITPendingBit+0xd8>)
 80009b6:	609a      	str	r2, [r3, #8]
	      break;
 80009b8:	e031      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FULL0; 
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2208      	movs	r2, #8
 80009be:	60da      	str	r2, [r3, #12]
	      break;
 80009c0:	e02d      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2210      	movs	r2, #16
 80009c6:	60da      	str	r2, [r3, #12]
	      break;
 80009c8:	e029      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FULL1;  
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2208      	movs	r2, #8
 80009ce:	611a      	str	r2, [r3, #16]
	      break;
 80009d0:	e025      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2210      	movs	r2, #16
 80009d6:	611a      	str	r2, [r3, #16]
	      break;
 80009d8:	e021      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_WKUI;  
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2208      	movs	r2, #8
 80009de:	605a      	str	r2, [r3, #4]
	      break;
 80009e0:	e01d      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_SLAKI;   
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2210      	movs	r2, #16
 80009e6:	605a      	str	r2, [r3, #4]
	      break;
 80009e8:	e019      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2204      	movs	r2, #4
 80009ee:	605a      	str	r2, [r3, #4]
	      break;
 80009f0:	e015      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2204      	movs	r2, #4
 80009f6:	605a      	str	r2, [r3, #4]
	      break;
 80009f8:	e011      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->MSR = CAN_MSR_ERRI; 
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2204      	movs	r2, #4
 80009fe:	605a      	str	r2, [r3, #4]
	      break;
 8000a00:	e00d      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	605a      	str	r2, [r3, #4]
	      break;
 8000a0e:	e006      	b.n	8000a1e <CAN_ClearITPendingBit+0xce>
	      CANx->ESR = RESET; 
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
	      CANx->MSR = CAN_MSR_ERRI; 
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	605a      	str	r2, [r3, #4]
	      break;
 8000a1c:	bf00      	nop
   }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	00010101 	.word	0x00010101

08000a2c <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit:  specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e001      	b.n	8000a4e <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a78:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000a88:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000aa0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f043 0201 	orr.w	r2, r3, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000af4:	e006      	b.n	8000b04 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000afe:	4013      	ands	r3, r2
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000b2e:	e006      	b.n	8000b3e <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	401a      	ands	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	601a      	str	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.                 
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	605a      	str	r2, [r3, #4]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <DMA_GetITStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <DMA_GetITStatus+0x48>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	e002      	b.n	8000b8c <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <DMA_GetITStatus+0x4c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e001      	b.n	8000ba0 <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <DMA_ClearITPendingBit+0x2c>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
  }
}
 8000bcc:	e002      	b.n	8000bd4 <DMA_ClearITPendingBit+0x20>
    DMA1->IFCR = DMAy_IT;
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <DMA_ClearITPendingBit+0x30>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6053      	str	r3, [r2, #4]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020000 	.word	0x40020000

08000be8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	78db      	ldrb	r3, [r3, #3]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	789b      	ldrb	r3, [r3, #2]
 8000c24:	461a      	mov	r2, r3
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d044      	beq.n	8000cc0 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	e038      	b.n	8000cb4 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000c42:	2201      	movs	r2, #1
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d126      	bne.n	8000cae <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000c66:	220f      	movs	r2, #15
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	4013      	ands	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	78db      	ldrb	r3, [r3, #3]
 8000c8c:	2b28      	cmp	r3, #40	; 0x28
 8000c8e:	d105      	bne.n	8000c9c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000c90:	2201      	movs	r2, #1
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	409a      	lsls	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	e008      	b.n	8000cae <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	78db      	ldrb	r3, [r3, #3]
 8000ca0:	2b48      	cmp	r3, #72	; 0x48
 8000ca2:	d104      	bne.n	8000cae <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d9c3      	bls.n	8000c42 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	2bff      	cmp	r3, #255	; 0xff
 8000cc6:	d946      	bls.n	8000d56 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	e03a      	b.n	8000d4a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	2201      	movs	r2, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d127      	bne.n	8000d44 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	2b28      	cmp	r3, #40	; 0x28
 8000d22:	d105      	bne.n	8000d30 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	3308      	adds	r3, #8
 8000d28:	2201      	movs	r2, #1
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	2b48      	cmp	r3, #72	; 0x48
 8000d36:	d105      	bne.n	8000d44 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d9c1      	bls.n	8000cd4 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	605a      	str	r2, [r3, #4]
  }
}
 8000d56:	bf00      	nop
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e001      	b.n	8000d86 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	611a      	str	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da03      	bge.n	8000dda <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <GPIO_PinRemapConfig+0xdc>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e002      	b.n	8000de0 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <GPIO_PinRemapConfig+0xdc>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000df6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000dfa:	d10a      	bne.n	8000e12 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e02:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <GPIO_PinRemapConfig+0xdc>)
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <GPIO_PinRemapConfig+0xdc>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e0e:	6053      	str	r3, [r2, #4]
 8000e10:	e021      	b.n	8000e56 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00e      	beq.n	8000e3a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00d      	b.n	8000e56 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0d5b      	lsrs	r3, r3, #21
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000e54:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0d5b      	lsrs	r3, r3, #21
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da03      	bge.n	8000e7c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <GPIO_PinRemapConfig+0xdc>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000e7a:	e002      	b.n	8000e82 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <GPIO_PinRemapConfig+0xdc>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	6053      	str	r3, [r2, #4]
}
 8000e82:	bf00      	nop
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40010000 	.word	0x40010000

08000e90 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000ea2:	4909      	ldr	r1, [pc, #36]	; (8000ec8 <RCC_AHBPeriphClockCmd+0x38>)
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <RCC_AHBPeriphClockCmd+0x38>)
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000eae:	e006      	b.n	8000ebe <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000eb0:	4905      	ldr	r1, [pc, #20]	; (8000ec8 <RCC_AHBPeriphClockCmd+0x38>)
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <RCC_AHBPeriphClockCmd+0x38>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	614b      	str	r3, [r1, #20]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000

08000ecc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000ede:	4909      	ldr	r1, [pc, #36]	; (8000f04 <RCC_APB2PeriphClockCmd+0x38>)
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <RCC_APB2PeriphClockCmd+0x38>)
 8000ee2:	699a      	ldr	r2, [r3, #24]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000eea:	e006      	b.n	8000efa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000eec:	4905      	ldr	r1, [pc, #20]	; (8000f04 <RCC_APB2PeriphClockCmd+0x38>)
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <RCC_APB2PeriphClockCmd+0x38>)
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	618b      	str	r3, [r1, #24]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000

08000f08 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f1a:	4909      	ldr	r1, [pc, #36]	; (8000f40 <RCC_APB1PeriphClockCmd+0x38>)
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <RCC_APB1PeriphClockCmd+0x38>)
 8000f1e:	69da      	ldr	r2, [r3, #28]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f26:	e006      	b.n	8000f36 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f28:	4905      	ldr	r1, [pc, #20]	; (8000f40 <RCC_APB1PeriphClockCmd+0x38>)
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <RCC_APB1PeriphClockCmd+0x38>)
 8000f2c:	69da      	ldr	r2, [r3, #28]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4013      	ands	r3, r2
 8000f34:	61cb      	str	r3, [r1, #28]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000

08000f44 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f56:	4909      	ldr	r1, [pc, #36]	; (8000f7c <RCC_APB1PeriphResetCmd+0x38>)
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <RCC_APB1PeriphResetCmd+0x38>)
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000f62:	e006      	b.n	8000f72 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f64:	4905      	ldr	r1, [pc, #20]	; (8000f7c <RCC_APB1PeriphResetCmd+0x38>)
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <RCC_APB1PeriphResetCmd+0x38>)
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	610b      	str	r3, [r1, #16]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000

08000f80 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <TIM_TimeBaseInit+0xd0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d013      	beq.n	8000fc4 <TIM_TimeBaseInit+0x44>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <TIM_TimeBaseInit+0xd4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00f      	beq.n	8000fc4 <TIM_TimeBaseInit+0x44>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000faa:	d00b      	beq.n	8000fc4 <TIM_TimeBaseInit+0x44>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <TIM_TimeBaseInit+0xd8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <TIM_TimeBaseInit+0x44>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a29      	ldr	r2, [pc, #164]	; (800105c <TIM_TimeBaseInit+0xdc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d003      	beq.n	8000fc4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a28      	ldr	r2, [pc, #160]	; (8001060 <TIM_TimeBaseInit+0xe0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d108      	bne.n	8000fd6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	885a      	ldrh	r2, [r3, #2]
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a22      	ldr	r2, [pc, #136]	; (8001064 <TIM_TimeBaseInit+0xe4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00c      	beq.n	8000ff8 <TIM_TimeBaseInit+0x78>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <TIM_TimeBaseInit+0xe8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d008      	beq.n	8000ff8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fec:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	88da      	ldrh	r2, [r3, #6]
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	89fa      	ldrh	r2, [r7, #14]
 8000ffc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	889a      	ldrh	r2, [r3, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <TIM_TimeBaseInit+0xd0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00f      	beq.n	8001036 <TIM_TimeBaseInit+0xb6>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <TIM_TimeBaseInit+0xd4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00b      	beq.n	8001036 <TIM_TimeBaseInit+0xb6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <TIM_TimeBaseInit+0xec>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <TIM_TimeBaseInit+0xb6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <TIM_TimeBaseInit+0xf0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d003      	beq.n	8001036 <TIM_TimeBaseInit+0xb6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <TIM_TimeBaseInit+0xf4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d104      	bne.n	8001040 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	7a1b      	ldrb	r3, [r3, #8]
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	829a      	strh	r2, [r3, #20]
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40012c00 	.word	0x40012c00
 8001054:	40013400 	.word	0x40013400
 8001058:	40000400 	.word	0x40000400
 800105c:	40000800 	.word	0x40000800
 8001060:	40000c00 	.word	0x40000c00
 8001064:	40001000 	.word	0x40001000
 8001068:	40001400 	.word	0x40001400
 800106c:	40014000 	.word	0x40014000
 8001070:	40014400 	.word	0x40014400
 8001074:	40014800 	.word	0x40014800

08001078 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	81bb      	strh	r3, [r7, #12]
 8001086:	2300      	movs	r3, #0
 8001088:	817b      	strh	r3, [r7, #10]
 800108a:	2300      	movs	r3, #0
 800108c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	8c1b      	ldrh	r3, [r3, #32]
 8001092:	b29b      	uxth	r3, r3
 8001094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8c1b      	ldrh	r3, [r3, #32]
 80010a2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8b9b      	ldrh	r3, [r3, #28]
 80010ae:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010b6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80010b8:	89bb      	ldrh	r3, [r7, #12]
 80010ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010be:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	89bb      	ldrh	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010d4:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	891b      	ldrh	r3, [r3, #8]
 80010da:	031b      	lsls	r3, r3, #12
 80010dc:	b29a      	uxth	r2, r3
 80010de:	897b      	ldrh	r3, [r7, #10]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	031b      	lsls	r3, r3, #12
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	897b      	ldrh	r3, [r7, #10]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <TIM_OC4Init+0xc8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d003      	beq.n	8001102 <TIM_OC4Init+0x8a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <TIM_OC4Init+0xcc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10a      	bne.n	8001118 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001108:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	899b      	ldrh	r3, [r3, #12]
 800110e:	019b      	lsls	r3, r3, #6
 8001110:	b29a      	uxth	r2, r3
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	4313      	orrs	r3, r2
 8001116:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	89fa      	ldrh	r2, [r7, #14]
 800111c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	89ba      	ldrh	r2, [r7, #12]
 8001122:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	88da      	ldrh	r2, [r3, #6]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	897a      	ldrh	r2, [r7, #10]
 8001132:	841a      	strh	r2, [r3, #32]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40013400 	.word	0x40013400

08001148 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d008      	beq.n	800116c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	b29a      	uxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800116a:	e007      	b.n	800117c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	801a      	strh	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
 8001192:	4613      	mov	r3, r2
 8001194:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001196:	787b      	ldrb	r3, [r7, #1]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	899b      	ldrh	r3, [r3, #12]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80011ac:	e009      	b.n	80011c2 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	899b      	ldrh	r3, [r3, #12]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4013      	ands	r3, r2
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	819a      	strh	r2, [r3, #12]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	8b9b      	ldrh	r3, [r3, #28]
 80011e0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011e8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	839a      	strh	r2, [r3, #28]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <CanAppReceiveMsgHandler>:
	sizeof(canFirlter) / sizeof(canFirlter[0]),
};


static void CanAppReceiveMsgHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
    can_frame_t frame;
    CanGet_MSG(CAN_APP_CONTROLLER, &frame);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	2000      	movs	r0, #0
 8001214:	f000 fd66 	bl	8001ce4 <CanGet_MSG>
    if(frame.id == 0x01 && frame.dataByte0 == selfId)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d132      	bne.n	8001284 <CanAppReceiveMsgHandler+0x7c>
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	461a      	mov	r2, r3
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <CanAppReceiveMsgHandler+0x84>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d12c      	bne.n	8001284 <CanAppReceiveMsgHandler+0x7c>
    {
    	uint8_t i;
		while(!ws2812b_IsReady());  // wait
 800122a:	bf00      	nop
 800122c:	f000 fc2e 	bl	8001a8c <ws2812b_IsReady>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0fa      	beq.n	800122c <CanAppReceiveMsgHandler+0x24>
		for(i = 0; i <= NUM_GRB_LEDS; i++)
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
 800123a:	e01c      	b.n	8001276 <CanAppReceiveMsgHandler+0x6e>
		{
			leds[i].b = 0;
 800123c:	7dfa      	ldrb	r2, [r7, #23]
 800123e:	4914      	ldr	r1, [pc, #80]	; (8001290 <CanAppReceiveMsgHandler+0x88>)
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	440b      	add	r3, r1
 8001248:	3302      	adds	r3, #2
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
			leds[i].g = 0;
 800124e:	7dfa      	ldrb	r2, [r7, #23]
 8001250:	490f      	ldr	r1, [pc, #60]	; (8001290 <CanAppReceiveMsgHandler+0x88>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	440b      	add	r3, r1
 800125a:	3301      	adds	r3, #1
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
			leds[i].r = 0xFF;
 8001260:	7dfa      	ldrb	r2, [r7, #23]
 8001262:	490b      	ldr	r1, [pc, #44]	; (8001290 <CanAppReceiveMsgHandler+0x88>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	440b      	add	r3, r1
 800126c:	22ff      	movs	r2, #255	; 0xff
 800126e:	701a      	strb	r2, [r3, #0]
		for(i = 0; i <= NUM_GRB_LEDS; i++)
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	3301      	adds	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b10      	cmp	r3, #16
 800127a:	d9df      	bls.n	800123c <CanAppReceiveMsgHandler+0x34>
		}
		ws2812b_SendRGB(leds, NUM_GRB_LEDS);
 800127c:	2110      	movs	r1, #16
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <CanAppReceiveMsgHandler+0x88>)
 8001280:	f000 fc14 	bl	8001aac <ws2812b_SendRGB>
    }
    //CanAppSendMsg(&frame);
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000030 	.word	0x20000030
 8001290:	200050fc 	.word	0x200050fc

08001294 <CanAppTxCompleteHalder>:

static void CanAppTxCompleteHalder(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(xSemphore, NULL);
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <CanAppTxCompleteHalder+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fbd5 	bl	8002a4e <xQueueGiveFromISR>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000002c 	.word	0x2000002c

080012ac <CanAppBuffOffHanlder>:

static void CanAppBuffOffHanlder(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	CanDeinit(CAN_APP_CONTROLLER);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 fcdf 	bl	8001c74 <CanDeinit>
	CanInit(CanAppHandler[0].controller, CanAppHandler[0].baud, canAppCb, &firlterList);
 80012b6:	2000      	movs	r0, #0
 80012b8:	2101      	movs	r1, #1
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <CanAppBuffOffHanlder+0x1c>)
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <CanAppBuffOffHanlder+0x20>)
 80012be:	f000 fc59 	bl	8001b74 <CanInit>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08004164 	.word	0x08004164
 80012cc:	080012d1 	.word	0x080012d1

080012d0 <canAppCb>:
    }
    ERROR_DEBUG("[CanApp] Send msg failed\r\n");
}

static void canAppCb(CanControllerIdx_t controller, uint8_t it_flag)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	460a      	mov	r2, r1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	71bb      	strb	r3, [r7, #6]
	CanAppEvt_t evt;
	switch(it_flag)
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d815      	bhi.n	8001312 <canAppCb+0x42>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <canAppCb+0x1c>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	08001301 	.word	0x08001301
 80012f0:	08001307 	.word	0x08001307
 80012f4:	08001313 	.word	0x08001313
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001313 	.word	0x08001313
	{
		case CAN_RX_DATA:
			evt = CanAppEvtGetMsg;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
			break;
 8001304:	e006      	b.n	8001314 <canAppCb+0x44>
		case CAN_TX_COMPLETE:
			evt = CanAppTransComplete;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
			break;
 800130a:	e003      	b.n	8001314 <canAppCb+0x44>
		case CAN_WAKEUP:
			break;
		case CAN_BUSSOFF_ERR:
			evt = CanAppBusOff;
 800130c:	2302      	movs	r3, #2
 800130e:	73fb      	strb	r3, [r7, #15]
			break;
 8001310:	e000      	b.n	8001314 <canAppCb+0x44>
		case CAN_PASSIVE_ERR:
			break;
		default:
			break;
 8001312:	bf00      	nop
	}
	xQueueSendFromISR(xQueue, &evt, NULL);
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <canAppCb+0x5c>)
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f107 010f 	add.w	r1, r7, #15
 800131c:	2300      	movs	r3, #0
 800131e:	2200      	movs	r2, #0
 8001320:	f001 fb3c 	bl	800299c <xQueueGenericSendFromISR>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000028 	.word	0x20000028

08001330 <xTask>:

static void xTask(void *pParamter)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t event;
	for(;;)
	{
		if(pdPASS == xQueueReceive(xQueue, &event, pdMS_TO_TICKS(500)))
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <xTask+0x38>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f107 010f 	add.w	r1, r7, #15
 8001340:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fbd5 	bl	8002af4 <xQueueReceive>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d1f3      	bne.n	8001338 <xTask+0x8>
		{
			if(event >= CanAppEvtNum)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d806      	bhi.n	8001364 <xTask+0x34>
			{
				continue;
			}
			CanAppEvtHandler[event]();
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	461a      	mov	r2, r3
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <xTask+0x3c>)
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	4798      	blx	r3
 8001362:	e7e9      	b.n	8001338 <xTask+0x8>
				continue;
 8001364:	bf00      	nop
		if(pdPASS == xQueueReceive(xQueue, &event, pdMS_TO_TICKS(500)))
 8001366:	e7e7      	b.n	8001338 <xTask+0x8>
 8001368:	20000028 	.word	0x20000028
 800136c:	08004118 	.word	0x08004118

08001370 <CanAppInit>:
		}
	}
}

void CanAppInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af02      	add	r7, sp, #8
	selfId = PDin(8) | (PDin(9) << 1) | (PDin(10) << 2) | (PDin(11) << 3) | (PDin(11) << 4) | (PDin(12) << 5);
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <CanAppInit+0x7c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <CanAppInit+0x80>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	431a      	orrs	r2, r3
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <CanAppInit+0x84>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	431a      	orrs	r2, r3
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <CanAppInit+0x88>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	431a      	orrs	r2, r3
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <CanAppInit+0x88>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	431a      	orrs	r2, r3
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <CanAppInit+0x8c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	4313      	orrs	r3, r2
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <CanAppInit+0x90>)
 80013a4:	6013      	str	r3, [r2, #0]
	xQueue = xQueueCreate(3, 1);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2101      	movs	r1, #1
 80013aa:	2003      	movs	r0, #3
 80013ac:	f001 fa00 	bl	80027b0 <xQueueGenericCreate>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <CanAppInit+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
	xSemphore = xSemaphoreCreateBinary();
 80013b6:	2203      	movs	r2, #3
 80013b8:	2100      	movs	r1, #0
 80013ba:	2001      	movs	r0, #1
 80013bc:	f001 f9f8 	bl	80027b0 <xQueueGenericCreate>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <CanAppInit+0x98>)
 80013c4:	601a      	str	r2, [r3, #0]
	xTaskCreate(xTask, "CanApp", 128, NULL, 3, NULL);
 80013c6:	2300      	movs	r3, #0
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2303      	movs	r3, #3
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <CanAppInit+0x9c>)
 80013d4:	480e      	ldr	r0, [pc, #56]	; (8001410 <CanAppInit+0xa0>)
 80013d6:	f001 fd65 	bl	8002ea4 <xTaskCreate>
	CanInit(CanAppHandler[0].controller, CanAppHandler[0].baud, canAppCb, &firlterList);
 80013da:	2000      	movs	r0, #0
 80013dc:	2101      	movs	r1, #1
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <CanAppInit+0xa4>)
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <CanAppInit+0xa8>)
 80013e2:	f000 fbc7 	bl	8001b74 <CanInit>
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	42228120 	.word	0x42228120
 80013f0:	42228124 	.word	0x42228124
 80013f4:	42228128 	.word	0x42228128
 80013f8:	4222812c 	.word	0x4222812c
 80013fc:	42228130 	.word	0x42228130
 8001400:	20000030 	.word	0x20000030
 8001404:	20000028 	.word	0x20000028
 8001408:	2000002c 	.word	0x2000002c
 800140c:	080040f0 	.word	0x080040f0
 8001410:	08001331 	.word	0x08001331
 8001414:	08004164 	.word	0x08004164
 8001418:	080012d1 	.word	0x080012d1

0800141c <vApplicationDaemonTaskStartupHook>:
#include "sys.h"
#include "delay.h"
#include "ws2812b.h"
#include "at24qtxx.h"
void vApplicationDaemonTaskStartupHook( void )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	sysclock_init();
 8001420:	f000 fe02 	bl	8002028 <sysclock_init>
	gpioInit();
 8001424:	f000 fdec 	bl	8002000 <gpioInit>
    CanAppInit();
 8001428:	f7ff ffa2 	bl	8001370 <CanAppInit>
    ws2812b_Init();
 800142c:	f000 fab6 	bl	800199c <ws2812b_Init>
    at24qt_intit();
 8001430:	f000 f8e8 	bl	8001604 <at24qt_intit>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <vApplicationIdleHook>:

void vApplicationIdleHook( void )
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0


}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <main>:
#include "FreeRTOS.h"
#include "task.h"

int main() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
    vTaskStartScheduler();
 8001454:	f001 fe3a 	bl	80030cc <vTaskStartScheduler>
    return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}

0800145e <NMI_Handler>:
#include "stm32f10x_it.h" 


 
void NMI_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <HardFault_Handler>:
 
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:
  {
  }
}
 
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:
  }
}

 
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:
  {
  }
}
 
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <DebugMon_Handler>:
//void SVC_Handler(void)
//{
//}
 
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <vTimerCallback>:


static TimerHandle_t xTimers;
static bool touchButtonSta;
static void vTimerCallback(TimerHandle_t xTimer)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	uint8_t i;
	static uint8_t debouching;
	uint8_t stat = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_9);
 8001498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149c:	4854      	ldr	r0, [pc, #336]	; (80015f0 <vTimerCallback+0x160>)
 800149e:	f7ff fc5f 	bl	8000d60 <GPIO_ReadInputDataBit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73bb      	strb	r3, [r7, #14]

	if(stat)
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d018      	beq.n	80014de <vTimerCallback+0x4e>
	{
		if(touchButtonSta == true)
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <vTimerCallback+0x164>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <vTimerCallback+0x2c>
		{
			debouching = 0;
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <vTimerCallback+0x168>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e058      	b.n	800156e <vTimerCallback+0xde>
		}
		else
		{
			if(++debouching == 3)
 80014bc:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <vTimerCallback+0x168>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <vTimerCallback+0x168>)
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <vTimerCallback+0x168>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d14e      	bne.n	800156e <vTimerCallback+0xde>
			{
				touchButtonSta = true;
 80014d0:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <vTimerCallback+0x164>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
				debouching = 0;
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <vTimerCallback+0x168>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e047      	b.n	800156e <vTimerCallback+0xde>
			}
		}
	}
	else
	{
		if(touchButtonSta == false)
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <vTimerCallback+0x164>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d030      	beq.n	800154e <vTimerCallback+0xbe>
		{
			while(!ws2812b_IsReady());  // wait
 80014ec:	bf00      	nop
 80014ee:	f000 facd 	bl	8001a8c <ws2812b_IsReady>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0fa      	beq.n	80014ee <vTimerCallback+0x5e>
			for(i = 0; i <= NUM_GRB_LEDS ; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e01c      	b.n	8001538 <vTimerCallback+0xa8>
			{
				leds[i].b = 0;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	493e      	ldr	r1, [pc, #248]	; (80015fc <vTimerCallback+0x16c>)
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	440b      	add	r3, r1
 800150a:	3302      	adds	r3, #2
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
				leds[i].g = 0;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	493a      	ldr	r1, [pc, #232]	; (80015fc <vTimerCallback+0x16c>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	440b      	add	r3, r1
 800151c:	3301      	adds	r3, #1
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
				leds[i].r = 0;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <vTimerCallback+0x16c>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	440b      	add	r3, r1
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			for(i = 0; i <= NUM_GRB_LEDS ; i++)
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	3301      	adds	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b10      	cmp	r3, #16
 800153c:	d9df      	bls.n	80014fe <vTimerCallback+0x6e>
			}
			ws2812b_SendRGB(leds, NUM_GRB_LEDS);
 800153e:	2110      	movs	r1, #16
 8001540:	482e      	ldr	r0, [pc, #184]	; (80015fc <vTimerCallback+0x16c>)
 8001542:	f000 fab3 	bl	8001aac <ws2812b_SendRGB>
			debouching = 0;
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <vTimerCallback+0x168>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e00f      	b.n	800156e <vTimerCallback+0xde>
		}
		else
		{
			if(++debouching == 3)
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <vTimerCallback+0x168>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <vTimerCallback+0x168>)
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <vTimerCallback+0x168>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d105      	bne.n	800156e <vTimerCallback+0xde>
			{
				touchButtonSta = false;
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <vTimerCallback+0x164>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
				debouching = 0;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <vTimerCallback+0x168>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(touchButtonSta)
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <vTimerCallback+0x164>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d037      	beq.n	80015e6 <vTimerCallback+0x156>
	{
		static uint8_t count;
		if(count++ == 10)
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <vTimerCallback+0x170>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	b2d1      	uxtb	r1, r2
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <vTimerCallback+0x170>)
 8001580:	7011      	strb	r1, [r2, #0]
 8001582:	2b0a      	cmp	r3, #10
 8001584:	d12f      	bne.n	80015e6 <vTimerCallback+0x156>
		{
			count = 0;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <vTimerCallback+0x170>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
			while(!ws2812b_IsReady());  // wait
 800158c:	bf00      	nop
 800158e:	f000 fa7d 	bl	8001a8c <ws2812b_IsReady>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0fa      	beq.n	800158e <vTimerCallback+0xfe>
			for(i = 0; i <= NUM_GRB_LEDS; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e01c      	b.n	80015d8 <vTimerCallback+0x148>
			{
				leds[i].b = 0;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	4916      	ldr	r1, [pc, #88]	; (80015fc <vTimerCallback+0x16c>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	3302      	adds	r3, #2
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
				leds[i].g = 0;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	4912      	ldr	r1, [pc, #72]	; (80015fc <vTimerCallback+0x16c>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	3301      	adds	r3, #1
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
				leds[i].r = 0;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	490d      	ldr	r1, [pc, #52]	; (80015fc <vTimerCallback+0x16c>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
			for(i = 0; i <= NUM_GRB_LEDS; i++)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d9df      	bls.n	800159e <vTimerCallback+0x10e>
//				leds[i].b = rand() / 255;
//				leds[i].g = rand() / 255;
//				leds[i].r = rand() / 255;
			}
			ws2812b_SendRGB(leds, NUM_GRB_LEDS);
 80015de:	2110      	movs	r1, #16
 80015e0:	4806      	ldr	r0, [pc, #24]	; (80015fc <vTimerCallback+0x16c>)
 80015e2:	f000 fa63 	bl	8001aac <ws2812b_SendRGB>
		}
	}
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40011000 	.word	0x40011000
 80015f4:	20000038 	.word	0x20000038
 80015f8:	20000039 	.word	0x20000039
 80015fc:	200050fc 	.word	0x200050fc
 8001600:	2000003a 	.word	0x2000003a

08001604 <at24qt_intit>:

void at24qt_intit(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af02      	add	r7, sp, #8
	xTimers = xTimerCreate("at24qtchecker", pdMS_TO_TICKS(20), pdTRUE, (void*)0, vTimerCallback);
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <at24qt_intit+0x3c>)
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	2201      	movs	r2, #1
 8001612:	2114      	movs	r1, #20
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <at24qt_intit+0x40>)
 8001616:	f002 f98d 	bl	8003934 <xTimerCreate>
 800161a:	4602      	mov	r2, r0
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <at24qt_intit+0x44>)
 800161e:	601a      	str	r2, [r3, #0]
	xTimerStart(xTimers, 0);
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <at24qt_intit+0x44>)
 8001622:	681c      	ldr	r4, [r3, #0]
 8001624:	f001 fe2a 	bl	800327c <xTaskGetTickCount>
 8001628:	4602      	mov	r2, r0
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	2101      	movs	r1, #1
 8001632:	4620      	mov	r0, r4
 8001634:	f002 f9c0 	bl	80039b8 <xTimerGenericCommand>
}
 8001638:	bf00      	nop
 800163a:	3704      	adds	r7, #4
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	08001491 	.word	0x08001491
 8001644:	080040f8 	.word	0x080040f8
 8001648:	20000034 	.word	0x20000034

0800164c <LEDGamma>:
    235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255 };
#endif
#endif

static inline uint8_t LEDGamma(uint8_t v)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
#ifdef WS2812B_USE_GAMMA_CORRECTION
#ifdef WS2812B_USE_PRECALCULATED_GAMMA_TABLE
    return LEDGammaTable[v];
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <LEDGamma+0x1c>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
    return (v * v + v) >> 8;
#endif
#else
    return v;
#endif
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	0800416c 	.word	0x0800416c

0800166c <SrcFilterNull>:
static SrcFilter_t *DMAFilter;
static void *DMASrc;
static unsigned DMACount;

static void SrcFilterNull(void **src, PWM_t **pwm, unsigned *count, unsigned size)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
    memset(*pwm, 0, size * sizeof(PWM_t));
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	f002 fd1b 	bl	80040c6 <memset>
    *pwm += size;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	18ca      	adds	r2, r1, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <RGB2PWM>:

static void RGB2PWM(RGB_t *rgb, PWM_t *pwm)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    uint8_t r = LEDGamma(rgb->r);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffc6 	bl	800164c <LEDGamma>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]
    uint8_t g = LEDGamma(rgb->g);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	785b      	ldrb	r3, [r3, #1]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ffbf 	bl	800164c <LEDGamma>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73bb      	strb	r3, [r7, #14]
    uint8_t b = LEDGamma(rgb->b);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	789b      	ldrb	r3, [r3, #2]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffb8 	bl	800164c <LEDGamma>
 80016dc:	4603      	mov	r3, r0
 80016de:	737b      	strb	r3, [r7, #13]

    uint8_t mask = 128;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	75fb      	strb	r3, [r7, #23]

    int i;
    for (i = 0; i < 8; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	e02e      	b.n	8001748 <RGB2PWM+0x9c>
    {
        pwm->r[i] = r & mask ? WS2812B_PULSE_HIGH : WS2812B_PULSE_LOW;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	4013      	ands	r3, r2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <RGB2PWM+0x4e>
 80016f6:	2132      	movs	r1, #50	; 0x32
 80016f8:	e000      	b.n	80016fc <RGB2PWM+0x50>
 80016fa:	2115      	movs	r1, #21
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	3208      	adds	r2, #8
 8001702:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        pwm->g[i] = g & mask ? WS2812B_PULSE_HIGH : WS2812B_PULSE_LOW;
 8001706:	7bba      	ldrb	r2, [r7, #14]
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	4013      	ands	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <RGB2PWM+0x6a>
 8001712:	2132      	movs	r1, #50	; 0x32
 8001714:	e000      	b.n	8001718 <RGB2PWM+0x6c>
 8001716:	2115      	movs	r1, #21
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        pwm->b[i] = b & mask ? WS2812B_PULSE_HIGH : WS2812B_PULSE_LOW;
 8001720:	7b7a      	ldrb	r2, [r7, #13]
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	4013      	ands	r3, r2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <RGB2PWM+0x84>
 800172c:	2132      	movs	r1, #50	; 0x32
 800172e:	e000      	b.n	8001732 <RGB2PWM+0x86>
 8001730:	2115      	movs	r1, #21
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	3210      	adds	r2, #16
 8001738:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        mask >>= 1;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
    for (i = 0; i < 8; i++)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	3301      	adds	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b07      	cmp	r3, #7
 800174c:	ddcd      	ble.n	80016ea <RGB2PWM+0x3e>
    }
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <SrcFilterRGB>:

static void SrcFilterRGB(void **src, PWM_t **pwm, unsigned *count, unsigned size)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
    RGB_t *rgb = *src;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]
    PWM_t *p = *pwm;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]

    *count -= size;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	1ad2      	subs	r2, r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]

    while (size--)
 800177c:	e00a      	b.n	8001794 <SrcFilterRGB+0x3e>
    {
        RGB2PWM(rgb++, p++);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1cda      	adds	r2, r3, #3
 8001782:	617a      	str	r2, [r7, #20]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800178a:	6139      	str	r1, [r7, #16]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff8c 	bl	80016ac <RGB2PWM>
    while (size--)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	603a      	str	r2, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ef      	bne.n	800177e <SrcFilterRGB+0x28>
    }

    *src = rgb;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
    *pwm = p;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <DMASend>:
    *src = hsv;
    *pwm = p;
}

static void DMASend(SrcFilter_t *filter, void *src, unsigned count)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
    if (!DMABusy)
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <DMASend+0xb8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d14c      	bne.n	8001862 <DMASend+0xae>
    {
        DMABusy = 1;
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <DMASend+0xb8>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        DMAFilter = filter;
 80017ce:	4a28      	ldr	r2, [pc, #160]	; (8001870 <DMASend+0xbc>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6013      	str	r3, [r2, #0]
        DMASrc = src;
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <DMASend+0xc0>)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6013      	str	r3, [r2, #0]
        DMACount = count;
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <DMASend+0xc4>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6013      	str	r3, [r2, #0]

        PWM_t *pwm = DMABuffer;
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <DMASend+0xc8>)
 80017e2:	613b      	str	r3, [r7, #16]
        PWM_t *end = &DMABuffer[WS2812B_BUFFER_SIZE];
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <DMASend+0xcc>)
 80017e6:	61fb      	str	r3, [r7, #28]

        // Start sequence
        SrcFilterNull(NULL, &pwm, NULL, WS2812B_START_SIZE);
 80017e8:	f107 0110 	add.w	r1, r7, #16
 80017ec:	2302      	movs	r3, #2
 80017ee:	2200      	movs	r2, #0
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff ff3b 	bl	800166c <SrcFilterNull>

        // RGB PWM data
        DMAFilter(&DMASrc, &pwm, &DMACount, MIN(DMACount, end - pwm));
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <DMASend+0xbc>)
 80017f8:	681c      	ldr	r4, [r3, #0]
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <DMASend+0xc4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	111b      	asrs	r3, r3, #4
 8001808:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <DMASend+0xd0>)
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4293      	cmp	r3, r2
 8001816:	bf28      	it	cs
 8001818:	4613      	movcs	r3, r2
 800181a:	f107 0110 	add.w	r1, r7, #16
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <DMASend+0xc4>)
 8001820:	4814      	ldr	r0, [pc, #80]	; (8001874 <DMASend+0xc0>)
 8001822:	47a0      	blx	r4

        // Rest of buffer
        if (pwm < end)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	429a      	cmp	r2, r3
 800182a:	d20c      	bcs.n	8001846 <DMASend+0x92>
            SrcFilterNull(NULL, &pwm, NULL, end - pwm);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	111b      	asrs	r3, r3, #4
 8001834:	4a13      	ldr	r2, [pc, #76]	; (8001884 <DMASend+0xd0>)
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	f107 0110 	add.w	r1, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff ff13 	bl	800166c <SrcFilterNull>

        // Start transfer
        DMA_SetCurrDataCounter(WS2812B_DMA_CHANNEL, sizeof(DMABuffer) / sizeof(uint16_t));
 8001846:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800184a:	480f      	ldr	r0, [pc, #60]	; (8001888 <DMASend+0xd4>)
 800184c:	f7ff f97c 	bl	8000b48 <DMA_SetCurrDataCounter>

        TIM_Cmd(WS2812B_TIM, ENABLE);
 8001850:	2101      	movs	r1, #1
 8001852:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001856:	f7ff fc77 	bl	8001148 <TIM_Cmd>
        DMA_Cmd(WS2812B_DMA_CHANNEL, ENABLE);
 800185a:	2101      	movs	r1, #1
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <DMASend+0xd4>)
 800185e:	f7ff f93a 	bl	8000ad6 <DMA_Cmd>
    }
}
 8001862:	bf00      	nop
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	2000003c 	.word	0x2000003c
 8001870:	20000b80 	.word	0x20000b80
 8001874:	20000b84 	.word	0x20000b84
 8001878:	20000b88 	.word	0x20000b88
 800187c:	20000040 	.word	0x20000040
 8001880:	20000b80 	.word	0x20000b80
 8001884:	aaaaaaab 	.word	0xaaaaaaab
 8001888:	40020080 	.word	0x40020080

0800188c <DMASendNext>:

static void DMASendNext(PWM_t *pwm, PWM_t *end)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    if (!DMAFilter)
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <DMASendNext+0xa8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <DMASendNext+0x2c>
    {
        // Stop transfer
        TIM_Cmd(WS2812B_TIM, DISABLE);
 800189e:	2100      	movs	r1, #0
 80018a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018a4:	f7ff fc50 	bl	8001148 <TIM_Cmd>
        DMA_Cmd(WS2812B_DMA_CHANNEL, DISABLE);
 80018a8:	2100      	movs	r1, #0
 80018aa:	4823      	ldr	r0, [pc, #140]	; (8001938 <DMASendNext+0xac>)
 80018ac:	f7ff f913 	bl	8000ad6 <DMA_Cmd>

        DMABusy = 0;
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <DMASendNext+0xb0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

        // Rest of buffer
        if (pwm < end)
            SrcFilterNull(NULL, &pwm, NULL, end - pwm);
    }
}
 80018b6:	e039      	b.n	800192c <DMASendNext+0xa0>
    else if (!DMACount)
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <DMASendNext+0xb4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10f      	bne.n	80018e0 <DMASendNext+0x54>
        SrcFilterNull(NULL, &pwm, NULL, end - pwm);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	111b      	asrs	r3, r3, #4
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <DMASendNext+0xb8>)
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	1d39      	adds	r1, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff feca 	bl	800166c <SrcFilterNull>
        DMAFilter = NULL;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <DMASendNext+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	e025      	b.n	800192c <DMASendNext+0xa0>
        DMAFilter(&DMASrc, &pwm, &DMACount, MIN(DMACount, end - pwm));
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <DMASendNext+0xa8>)
 80018e2:	681c      	ldr	r4, [r3, #0]
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <DMASendNext+0xb4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	111b      	asrs	r3, r3, #4
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <DMASendNext+0xb8>)
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4293      	cmp	r3, r2
 8001900:	bf28      	it	cs
 8001902:	4613      	movcs	r3, r2
 8001904:	1d39      	adds	r1, r7, #4
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <DMASendNext+0xb4>)
 8001908:	480f      	ldr	r0, [pc, #60]	; (8001948 <DMASendNext+0xbc>)
 800190a:	47a0      	blx	r4
        if (pwm < end)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d20b      	bcs.n	800192c <DMASendNext+0xa0>
            SrcFilterNull(NULL, &pwm, NULL, end - pwm);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	111b      	asrs	r3, r3, #4
 800191c:	4a09      	ldr	r2, [pc, #36]	; (8001944 <DMASendNext+0xb8>)
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	1d39      	adds	r1, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fea0 	bl	800166c <SrcFilterNull>
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	20000b80 	.word	0x20000b80
 8001938:	40020080 	.word	0x40020080
 800193c:	2000003c 	.word	0x2000003c
 8001940:	20000b88 	.word	0x20000b88
 8001944:	aaaaaaab 	.word	0xaaaaaaab
 8001948:	20000b84 	.word	0x20000b84

0800194c <DMA1_Channel7_IRQHandler>:

void WS2812B_DMA_HANDLER(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    if (DMA_GetITStatus(WS2812B_DMA_IT_HT) != RESET)
 8001950:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001954:	f7ff f906 	bl	8000b64 <DMA_GetITStatus>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <DMA1_Channel7_IRQHandler+0x22>
    {
        DMA_ClearITPendingBit(WS2812B_DMA_IT_HT);
 800195e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001962:	f7ff f927 	bl	8000bb4 <DMA_ClearITPendingBit>
        DMASendNext(DMABuffer, &DMABuffer[WS2812B_BUFFER_SIZE / 2]);
 8001966:	490a      	ldr	r1, [pc, #40]	; (8001990 <DMA1_Channel7_IRQHandler+0x44>)
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <DMA1_Channel7_IRQHandler+0x48>)
 800196a:	f7ff ff8f 	bl	800188c <DMASendNext>
    }

    if (DMA_GetITStatus(WS2812B_DMA_IT_TC) != RESET)
 800196e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001972:	f7ff f8f7 	bl	8000b64 <DMA_GetITStatus>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <DMA1_Channel7_IRQHandler+0x40>
    {
        DMA_ClearITPendingBit(WS2812B_DMA_IT_TC);
 800197c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001980:	f7ff f918 	bl	8000bb4 <DMA_ClearITPendingBit>
        DMASendNext(&DMABuffer[WS2812B_BUFFER_SIZE / 2], &DMABuffer[WS2812B_BUFFER_SIZE]);
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <DMA1_Channel7_IRQHandler+0x4c>)
 8001986:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA1_Channel7_IRQHandler+0x44>)
 8001988:	f7ff ff80 	bl	800188c <DMASendNext>
    }
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200005e0 	.word	0x200005e0
 8001994:	20000040 	.word	0x20000040
 8001998:	20000b80 	.word	0x20000b80

0800199c <ws2812b_Init>:
//------------------------------------------------------------
// Interface
//------------------------------------------------------------

void ws2812b_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	; 0x50
 80019a0:	af00      	add	r7, sp, #0
    // Initialize timer clock
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

    //TIM_TimeBaseStructInit(&TIM_TimeBaseInitStruct);

    TIM_TimeBaseInitStruct.TIM_Prescaler = (SystemCoreClock / WS2812B_FREQUENCY) - 1;
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <ws2812b_Init+0xdc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <ws2812b_Init+0xe0>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0e9b      	lsrs	r3, r3, #26
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    TIM_TimeBaseInitStruct.TIM_Period = WS2812B_PERIOD - 1;
 80019be:	2359      	movs	r3, #89	; 0x59
 80019c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    TIM_TimeBaseInit(WS2812B_TIM, &TIM_TimeBaseInitStruct);
 80019ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019d4:	f7ff fad4 	bl	8000f80 <TIM_TimeBaseInit>
    // Initialize timer PWM
    TIM_OCInitTypeDef TIM_OCInitStruct;

    //TIM_OCStructInit(&TIM_OCInitStruct);

    TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	86bb      	strh	r3, [r7, #52]	; 0x34
    TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 80019dc:	2301      	movs	r3, #1
 80019de:	86fb      	strh	r3, [r7, #54]	; 0x36
    TIM_OCInitStruct.TIM_Pulse = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	877b      	strh	r3, [r7, #58]	; 0x3a
    TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 80019e4:	2300      	movs	r3, #0
 80019e6:	87bb      	strh	r3, [r7, #60]	; 0x3c

    WS2812B_TIM_OCINIT(WS2812B_TIM, &TIM_OCInitStruct);
 80019e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019f2:	f7ff fb41 	bl	8001078 <TIM_OC4Init>
    WS2812B_TIM_OCPRELOAD(WS2812B_TIM, TIM_OCPreload_Enable);
 80019f6:	2108      	movs	r1, #8
 80019f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019fc:	f7ff fbe6 	bl	80011cc <TIM_OC4PreloadConfig>
    // Initialize DMA channel
    DMA_InitTypeDef DMA_InitStruct;

    //DMA_StructInit(&DMA_InitStruct);

    DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t) & WS2812B_TIM_DMA_CCR;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <ws2812b_Init+0xe4>)
 8001a02:	60bb      	str	r3, [r7, #8]
    DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t) DMABuffer;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <ws2812b_Init+0xe8>)
 8001a06:	60fb      	str	r3, [r7, #12]
    DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralDST;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	613b      	str	r3, [r7, #16]
    DMA_InitStruct.DMA_BufferSize = sizeof(DMABuffer) / sizeof(uint16_t);
 8001a0c:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8001a10:	617b      	str	r3, [r7, #20]
    DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
    DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	61fb      	str	r3, [r7, #28]
    DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8001a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1e:	623b      	str	r3, [r7, #32]
    DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8001a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 8001a26:	2320      	movs	r3, #32
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStruct.DMA_M2M = DMA_M2M_Disable;
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30

    DMA_Init(WS2812B_DMA_CHANNEL, &DMA_InitStruct);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <ws2812b_Init+0xec>)
 8001a3c:	f7ff f80d 	bl	8000a5a <DMA_Init>

    // Turn on timer DMA requests
    TIM_DMACmd(WS2812B_TIM, WS2812B_TIM_DMA_CC, ENABLE);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a4a:	f7ff fb9c 	bl	8001186 <TIM_DMACmd>

    // Initialize DMA interrupt
    NVIC_InitTypeDef NVIC_InitStruct;

    NVIC_InitStruct.NVIC_IRQChannel = WS2812B_DMA_IRQ;
 8001a4e:	2311      	movs	r3, #17
 8001a50:	713b      	strb	r3, [r7, #4]
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = WS2812B_IRQ_PRIO;
 8001a52:	2300      	movs	r3, #0
 8001a54:	717b      	strb	r3, [r7, #5]
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = WS2812B_IRQ_SUBPRIO;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]

    NVIC_Init(&NVIC_InitStruct);
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fbe5 	bl	8000230 <NVIC_Init>

    // Enable DMA interrupt
    DMA_ITConfig(WS2812B_DMA_CHANNEL, DMA_IT_HT | DMA_IT_TC, ENABLE);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2106      	movs	r1, #6
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <ws2812b_Init+0xec>)
 8001a6c:	f7ff f84f 	bl	8000b0e <DMA_ITConfig>
}
 8001a70:	bf00      	nop
 8001a72:	3750      	adds	r7, #80	; 0x50
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	ee9bfab5 	.word	0xee9bfab5
 8001a80:	40000040 	.word	0x40000040
 8001a84:	20000040 	.word	0x20000040
 8001a88:	40020080 	.word	0x40020080

08001a8c <ws2812b_IsReady>:

inline int ws2812b_IsReady(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
    return !DMABusy;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <ws2812b_IsReady+0x1c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000003c 	.word	0x2000003c

08001aac <ws2812b_SendRGB>:

void ws2812b_SendRGB(RGB_t *rgb, unsigned count)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    DMASend(&SrcFilterRGB, rgb, count);
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <ws2812b_SendRGB+0x1c>)
 8001abc:	f7ff fe7a 	bl	80017b4 <DMASend>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08001757 	.word	0x08001757

08001acc <filterConfig>:
static const uint8_t baudList[CAN_Baud_Num] = {6, 12, 24, 48};

static CanHandler_t handler[canControllerIdxNum];

static void filterConfig(const canFIrlterList_t *pFirlterList)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	CAN_FilterInitTypeDef CAN_FilterInitStructure;
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	823b      	strh	r3, [r7, #16]
	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	74fb      	strb	r3, [r7, #19]
	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
 8001adc:	2301      	movs	r3, #1
 8001ade:	753b      	strb	r3, [r7, #20]
	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < pFirlterList->num; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	75fb      	strb	r3, [r7, #23]
 8001ae8:	e035      	b.n	8001b56 <filterConfig+0x8a>
	{
		if(pFirlterList->pFilter[i].type == CAN_ID_STANDRD)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10c      	bne.n	8001b1a <filterConfig+0x4e>
		{
			CAN_FilterInitStructure.CAN_FilterIdHigh = pFirlterList->pFilter[i].id << 5;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	015b      	lsls	r3, r3, #5
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	813b      	strh	r3, [r7, #8]
			CAN_FilterInitStructure.CAN_FilterIdLow = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	817b      	strh	r3, [r7, #10]
 8001b18:	e013      	b.n	8001b42 <filterConfig+0x76>
		}
		else
		{
			CAN_FilterInitStructure.CAN_FilterIdHigh = (pFirlterList->pFilter[i].id >> 16) & 0x1FFF;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	813b      	strh	r3, [r7, #8]
			CAN_FilterInitStructure.CAN_FilterIdLow = pFirlterList->pFilter[i].id;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	817b      	strh	r3, [r7, #10]
		}
		CAN_FilterInitStructure.CAN_FilterNumber = i;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	74bb      	strb	r3, [r7, #18]
		//CAN_FilterInitStructure.CAN_FilterFIFOAssignment = i / 2;
		CAN_FilterInit(&CAN_FilterInitStructure);
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fca2 	bl	8000494 <CAN_FilterInit>
	for(i = 0; i < pFirlterList->num; i++)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	3301      	adds	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	7dfa      	ldrb	r2, [r7, #23]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3c4      	bcc.n	8001aea <filterConfig+0x1e>
	}
	CAN_FilterInit(&CAN_FilterInitStructure);
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc95 	bl	8000494 <CAN_FilterInit>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <CanInit>:

void CanInit(CanControllerIdx_t controller, CanBaud_t baud, pHanlderCb cb, const canFIrlterList_t *pFirlterList)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	460b      	mov	r3, r1
 8001b84:	73bb      	strb	r3, [r7, #14]
	if(controller >= canControllerIdxNum)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d000      	beq.n	8001b8e <CanInit+0x1a>
	{
		ERROR_DEBUG("[CAN] Can controller out of rannge\r\n");
		while(1)
 8001b8c:	e7fe      	b.n	8001b8c <CanInit+0x18>
			;
	}
	if(baud >= CAN_Baud_Num)
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d900      	bls.n	8001b96 <CanInit+0x22>
	{
		ERROR_DEBUG("[CAN] Baud outof range\r\n");
		while(1)
 8001b94:	e7fe      	b.n	8001b94 <CanInit+0x20>
			;
	}

	CAN_TypeDef *pCan = (CAN_TypeDef *)pCanController[controller];
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <CanInit+0xf8>)
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_InitTypeDef CAN_InitStructure;
	NVIC_InitTypeDef  NVIC_InitStructure;

	CAN_InitStructure.CAN_TTCM = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	77bb      	strb	r3, [r7, #30]
	CAN_InitStructure.CAN_ABOM = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
	CAN_InitStructure.CAN_AWUM = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3020 	strb.w	r3, [r7, #32]
	CAN_InitStructure.CAN_NART = ENABLE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	CAN_InitStructure.CAN_RFLM = DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	CAN_InitStructure.CAN_TXFP = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	76bb      	strb	r3, [r7, #26]
	CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	76fb      	strb	r3, [r7, #27]
	CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	773b      	strb	r3, [r7, #28]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	777b      	strb	r3, [r7, #29]
	CAN_InitStructure.CAN_Prescaler = (uint16_t)baudList[canControllerIdxNum];
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	833b      	strh	r3, [r7, #24]

	CAN_Init(pCan, &CAN_InitStructure);
 8001bd6:	f107 0318 	add.w	r3, r7, #24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bde:	f7fe fb89 	bl	80002f4 <CAN_Init>
	if(pFirlterList != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <CanInit+0x7a>
	{
		filterConfig(pFirlterList);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff6f 	bl	8001acc <filterConfig>
	}
	switch((uint32_t)controller)
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d000      	beq.n	8001bf6 <CanInit+0x82>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_SCE_IRQn;
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
			NVIC_Init(&NVIC_InitStructure);
			break;
		default:
			break;
 8001bf4:	e01b      	b.n	8001c2e <CanInit+0xba>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	753b      	strb	r3, [r7, #20]
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	757b      	strb	r3, [r7, #21]
			NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
			NVIC_Init(&NVIC_InitStructure);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fb12 	bl	8000230 <NVIC_Init>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_TX_IRQn;
 8001c0c:	2313      	movs	r3, #19
 8001c0e:	753b      	strb	r3, [r7, #20]
			NVIC_Init(&NVIC_InitStructure);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fb0b 	bl	8000230 <NVIC_Init>
			NVIC_InitStructure.NVIC_IRQChannel = CAN1_SCE_IRQn;
 8001c1a:	2316      	movs	r3, #22
 8001c1c:	753b      	strb	r3, [r7, #20]
			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	757b      	strb	r3, [r7, #21]
			NVIC_Init(&NVIC_InitStructure);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fb02 	bl	8000230 <NVIC_Init>
			break;
 8001c2c:	bf00      	nop

	}

	CAN_ITConfig(pCan, CAN_IT_TME, ENABLE);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2101      	movs	r1, #1
 8001c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c34:	f7fe fda5 	bl	8000782 <CAN_ITConfig>
	CAN_ITConfig(pCan, CAN_IT_FMP0, ENABLE);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c3e:	f7fe fda0 	bl	8000782 <CAN_ITConfig>
	CAN_ITConfig(pCan, CAN_IT_BOF, ENABLE);
 8001c42:	2201      	movs	r2, #1
 8001c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c4a:	f7fe fd9a 	bl	8000782 <CAN_ITConfig>
	handler[controller].cb = cb;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <CanInit+0xfc>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3314      	adds	r3, #20
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000b8c 	.word	0x20000b8c

08001c74 <CanDeinit>:

void CanDeinit(CanControllerIdx_t controller)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	if(controller >= canControllerIdxNum)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d000      	beq.n	8001c86 <CanDeinit+0x12>
	{
		ERROR_DEBUG("[CAN] Can controller out of rannge\r\n");
		while(1)
 8001c84:	e7fe      	b.n	8001c84 <CanDeinit+0x10>
			;
	}
	CAN_TypeDef *pCan = (CAN_TypeDef *)pCanController[controller];
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <CanDeinit+0x64>)
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	60fb      	str	r3, [r7, #12]
	if(pCan != NULL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01c      	beq.n	8001cd0 <CanDeinit+0x5c>
	{
		if(pCan == CAN1)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <CanDeinit+0x68>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10a      	bne.n	8001cb4 <CanDeinit+0x40>
		{
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ca4:	f7ff f94e 	bl	8000f44 <RCC_APB1PeriphResetCmd>
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001cae:	f7ff f949 	bl	8000f44 <RCC_APB1PeriphResetCmd>
		{
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
		}
	}
}
 8001cb2:	e00d      	b.n	8001cd0 <CanDeinit+0x5c>
		else if(pCan == CAN2)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <CanDeinit+0x6c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d109      	bne.n	8001cd0 <CanDeinit+0x5c>
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001cc2:	f7ff f93f 	bl	8000f44 <RCC_APB1PeriphResetCmd>
			RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ccc:	f7ff f93a 	bl	8000f44 <RCC_APB1PeriphResetCmd>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	40006400 	.word	0x40006400
 8001ce0:	40006800 	.word	0x40006800

08001ce4 <CanGet_MSG>:
		return true;
	}
}

bool CanGet_MSG(CanControllerIdx_t controller, can_frame_t *pFrame)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
	if(controller >= canControllerIdxNum || pFrame == NULL)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <CanGet_MSG+0x18>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <CanGet_MSG+0x1c>
	{
		return false;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e022      	b.n	8001d46 <CanGet_MSG+0x62>
	}
	if(handler[controller].isHaveMsg)
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	4913      	ldr	r1, [pc, #76]	; (8001d50 <CanGet_MSG+0x6c>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d017      	beq.n	8001d44 <CanGet_MSG+0x60>
	{
		handler[controller].isHaveMsg = false;
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <CanGet_MSG+0x6c>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
		memcpy(pFrame, &handler[controller].Frame, sizeof(can_frame_t));
 8001d26:	79fa      	ldrb	r2, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <CanGet_MSG+0x6c>)
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	2210      	movs	r2, #16
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f002 f9b8 	bl	80040b0 <memcpy>
		return true;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <CanGet_MSG+0x62>
	}
	else
	{
		return false;
 8001d44:	2300      	movs	r3, #0
	}
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000b8c 	.word	0x20000b8c

08001d54 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0

	if(CAN_GetITStatus(CAN1, CAN_IT_FMP0) != RESET)
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	482b      	ldr	r0, [pc, #172]	; (8001e0c <CAN1_RX0_IRQHandler+0xb8>)
 8001d5e:	f7fe fd2d 	bl	80007bc <CAN_GetITStatus>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d04d      	beq.n	8001e04 <CAN1_RX0_IRQHandler+0xb0>
	{
		CanRxMsg RxMessage;

		CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
 8001d68:	2102      	movs	r1, #2
 8001d6a:	4828      	ldr	r0, [pc, #160]	; (8001e0c <CAN1_RX0_IRQHandler+0xb8>)
 8001d6c:	f7fe fdf0 	bl	8000950 <CAN_ClearITPendingBit>

		CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	461a      	mov	r2, r3
 8001d74:	2100      	movs	r1, #0
 8001d76:	4825      	ldr	r0, [pc, #148]	; (8001e0c <CAN1_RX0_IRQHandler+0xb8>)
 8001d78:	f7fe fc46 	bl	8000608 <CAN_Receive>
		handler[0].Frame.dataByte0 = RxMessage.Data[0];
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001d80:	73da      	strb	r2, [r3, #15]
		handler[0].Frame.dataByte1 = RxMessage.Data[1];
 8001d82:	7c3a      	ldrb	r2, [r7, #16]
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001d86:	739a      	strb	r2, [r3, #14]
		handler[0].Frame.dataByte2 = RxMessage.Data[2];
 8001d88:	7c7a      	ldrb	r2, [r7, #17]
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001d8c:	735a      	strb	r2, [r3, #13]
		handler[0].Frame.dataByte3 = RxMessage.Data[3];
 8001d8e:	7cba      	ldrb	r2, [r7, #18]
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001d92:	731a      	strb	r2, [r3, #12]
		handler[0].Frame.dataByte4 = RxMessage.Data[4];
 8001d94:	7cfa      	ldrb	r2, [r7, #19]
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001d98:	74da      	strb	r2, [r3, #19]
		handler[0].Frame.dataByte5 = RxMessage.Data[5];
 8001d9a:	7d3a      	ldrb	r2, [r7, #20]
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001d9e:	749a      	strb	r2, [r3, #18]
		handler[0].Frame.dataByte6 = RxMessage.Data[6];
 8001da0:	7d7a      	ldrb	r2, [r7, #21]
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001da4:	745a      	strb	r2, [r3, #17]
		handler[0].Frame.dataByte7 = RxMessage.Data[7];
 8001da6:	7dba      	ldrb	r2, [r7, #22]
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001daa:	741a      	strb	r2, [r3, #16]
		if(RxMessage.IDE == CAN_Id_Extended)
 8001dac:	7b3b      	ldrb	r3, [r7, #12]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d108      	bne.n	8001dc4 <CAN1_RX0_IRQHandler+0x70>
		{
			handler[0].Frame.format = CAN_ID_EXTEND;
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001db4:	7993      	ldrb	r3, [r2, #6]
 8001db6:	f043 0320 	orr.w	r3, r3, #32
 8001dba:	7193      	strb	r3, [r2, #6]
			handler[0].Frame.id = RxMessage.ExtId;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001dc0:	6093      	str	r3, [r2, #8]
 8001dc2:	e002      	b.n	8001dca <CAN1_RX0_IRQHandler+0x76>
		}
		else
		{
			handler[0].Frame.id = RxMessage.StdId;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001dc8:	6093      	str	r3, [r2, #8]
		}
		if(RxMessage.RTR == CAN_RTR_Remote)
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d104      	bne.n	8001dda <CAN1_RX0_IRQHandler+0x86>
		{
			handler[0].Frame.type = CAN_TYPE_REMOTE;
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001dd2:	7993      	ldrb	r3, [r2, #6]
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	7193      	strb	r3, [r2, #6]
		}
		handler[0].Frame.length = RxMessage.DLC;
 8001dda:	7bbb      	ldrb	r3, [r7, #14]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2d9      	uxtb	r1, r3
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001de4:	7993      	ldrb	r3, [r2, #6]
 8001de6:	f361 0303 	bfi	r3, r1, #0, #4
 8001dea:	7193      	strb	r3, [r2, #6]
		if(handler[0].cb)
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <CAN1_RX0_IRQHandler+0xaa>
		{
			handler[0].cb(canControllerIdx1, CAN_RX_DATA);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	4798      	blx	r3
		}
		handler[0].isHaveMsg = true;
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <CAN1_RX0_IRQHandler+0xbc>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
	}

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40006400 	.word	0x40006400
 8001e10:	20000b8c 	.word	0x20000b8c

08001e14 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	if(CAN_GetITStatus(CAN1, CAN_IT_TME) != RESET)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	480a      	ldr	r0, [pc, #40]	; (8001e44 <CAN1_TX_IRQHandler+0x30>)
 8001e1c:	f7fe fcce 	bl	80007bc <CAN_GetITStatus>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <CAN1_TX_IRQHandler+0x2c>
	{
		CAN_ClearITPendingBit(CAN1, CAN_IT_TME);
 8001e26:	2101      	movs	r1, #1
 8001e28:	4806      	ldr	r0, [pc, #24]	; (8001e44 <CAN1_TX_IRQHandler+0x30>)
 8001e2a:	f7fe fd91 	bl	8000950 <CAN_ClearITPendingBit>
		if(handler[canControllerIdx1].cb)
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <CAN1_TX_IRQHandler+0x34>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <CAN1_TX_IRQHandler+0x2c>
		{
			handler[canControllerIdx1].cb(canControllerIdx1, CAN_TX_COMPLETE);
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <CAN1_TX_IRQHandler+0x34>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4798      	blx	r3
		}

	}

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40006400 	.word	0x40006400
 8001e48:	20000b8c 	.word	0x20000b8c

08001e4c <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	71fb      	strb	r3, [r7, #7]
	if(CAN_GetITStatus(CAN1, CAN_IT_BOF) == SET)
 8001e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e66:	480b      	ldr	r0, [pc, #44]	; (8001e94 <CAN1_SCE_IRQHandler+0x3c>)
 8001e68:	f7fe fca8 	bl	80007bc <CAN_GetITStatus>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <CAN1_SCE_IRQHandler+0x1e>
	{
		error = CAN_BUSSOFF_ERR;
 8001e72:	2303      	movs	r3, #3
 8001e74:	71fb      	strb	r3, [r7, #7]
	}
	if(handler[canControllerIdx1].cb)
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <CAN1_SCE_IRQHandler+0x40>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <CAN1_SCE_IRQHandler+0x32>
	{
		handler[canControllerIdx1].cb(canControllerIdx1, error);
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <CAN1_SCE_IRQHandler+0x40>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	79fa      	ldrb	r2, [r7, #7]
 8001e84:	4611      	mov	r1, r2
 8001e86:	2000      	movs	r0, #0
 8001e88:	4798      	blx	r3
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40006400 	.word	0x40006400
 8001e98:	20000b8c 	.word	0x20000b8c

08001e9c <CAN2_TX_IRQHandler>:


void CAN2_TX_IRQHandler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <CAN2_SCE_IRQHandler>:
void CAN2_SCE_IRQHandler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <gpioInit_A>:
#include "gpioInit.h"

static void gpioInit_A(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
 8001ed2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ed6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001ed8:	2310      	movs	r3, #16
 8001eda:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001edc:	2303      	movs	r3, #3
 8001ede:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <gpioInit_A+0x28>)
 8001ee6:	f7fe fe7f 	bl	8000be8 <GPIO_Init>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40010800 	.word	0x40010800

08001ef8 <gpioInit_B>:

static void gpioInit_B(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11;
 8001efe:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001f02:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f04:	2303      	movs	r3, #3
 8001f06:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001f08:	2318      	movs	r3, #24
 8001f0a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <gpioInit_B+0x30>)
 8001f12:	f7fe fe69 	bl	8000be8 <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_8 | GPIO_Pin_9);
 8001f16:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <gpioInit_B+0x30>)
 8001f1c:	f7fe ff39 	bl	8000d92 <GPIO_SetBits>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <gpioInit_C>:

static void gpioInit_C(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <gpioInit_C+0x3c>)
 8001f42:	f7fe fe51 	bl	8000be8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8001f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001f50:	2310      	movs	r3, #16
 8001f52:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <gpioInit_C+0x3c>)
 8001f5a:	f7fe fe45 	bl	8000be8 <GPIO_Init>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40011000 	.word	0x40011000

08001f6c <gpioInit_D>:
static void gpioInit_D(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13;
 8001f72:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8001f76:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <gpioInit_D+0x4c>)
 8001f82:	f7fe fe31 	bl	8000be8 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8001f86:	2301      	movs	r3, #1
 8001f88:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8001f8a:	2348      	movs	r3, #72	; 0x48
 8001f8c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <gpioInit_D+0x4c>)
 8001f94:	f7fe fe28 	bl	8000be8 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001f9c:	2318      	movs	r3, #24
 8001f9e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <gpioInit_D+0x4c>)
 8001faa:	f7fe fe1d 	bl	8000be8 <GPIO_Init>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40011400 	.word	0x40011400

08001fbc <gpioInit_E>:
static void gpioInit_E(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <gpioInit_F>:
static void gpioInit_F(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <gpioInit_G>:
static void gpioInit_G(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <gpioRemap>:

static void gpioRemap(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	GPIO_PinRemapConfig(GPIO_Remap2_CAN1, ENABLE);
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	f44f 10eb 	mov.w	r0, #1925120	; 0x1d6000
 8001fea:	f7fe fee1 	bl	8000db0 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig(GPIO_PartialRemap2_TIM2, ENABLE);
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <gpioRemap+0x1c>)
 8001ff2:	f7fe fedd 	bl	8000db0 <GPIO_PinRemapConfig>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	00180200 	.word	0x00180200

08002000 <gpioInit>:
void gpioInit(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    gpioRemap();
 8002004:	f7ff ffec 	bl	8001fe0 <gpioRemap>
	gpioInit_A();
 8002008:	f7ff ff60 	bl	8001ecc <gpioInit_A>
	gpioInit_B();
 800200c:	f7ff ff74 	bl	8001ef8 <gpioInit_B>
	gpioInit_C();
 8002010:	f7ff ff8c 	bl	8001f2c <gpioInit_C>
	gpioInit_D();
 8002014:	f7ff ffaa 	bl	8001f6c <gpioInit_D>
	gpioInit_E();
 8002018:	f7ff ffd0 	bl	8001fbc <gpioInit_E>
	gpioInit_F();
 800201c:	f7ff ffd4 	bl	8001fc8 <gpioInit_F>
	gpioInit_G();
 8002020:	f7ff ffd8 	bl	8001fd4 <gpioInit_G>

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <sysclock_init>:
#define RCC_APB1PeriphClock ( RCC_APB1Periph_TIM2 \
                              | RCC_APB1Periph_TIM4 \
                              | RCC_APB1Periph_CAN1 )

void sysclock_init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriphClock, ENABLE);
 800202c:	2101      	movs	r1, #1
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe ff2e 	bl	8000e90 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2PeriphClock, ENABLE);
 8002034:	2101      	movs	r1, #1
 8002036:	f240 10fd 	movw	r0, #509	; 0x1fd
 800203a:	f7fe ff47 	bl	8000ecc <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1PeriphClock, ENABLE);
 800203e:	2101      	movs	r1, #1
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <sysclock_init+0x24>)
 8002042:	f7fe ff61 	bl	8000f08 <RCC_APB1PeriphClockCmd>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	02000005 	.word	0x02000005

08002050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0208 	add.w	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f103 0208 	add.w	r2, r3, #8
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 0208 	add.w	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d103      	bne.n	800210c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e00c      	b.n	8002126 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3308      	adds	r3, #8
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e002      	b.n	800211a <vListInsert+0x2e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d9f6      	bls.n	8002114 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6892      	ldr	r2, [r2, #8]
 8002172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6852      	ldr	r2, [r2, #4]
 800217c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d103      	bne.n	8002190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
	...

080021b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3b04      	subs	r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3b04      	subs	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f023 0201 	bic.w	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3b04      	subs	r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80021e0:	4a08      	ldr	r2, [pc, #32]	; (8002204 <pxPortInitialiseStack+0x54>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b14      	subs	r3, #20
 80021ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3b20      	subs	r3, #32
 80021f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	08002209 	.word	0x08002209

08002208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002212:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002216:	f383 8811 	msr	BASEPRI, r3
 800221a:	f3bf 8f6f 	isb	sy
 800221e:	f3bf 8f4f 	dsb	sy
 8002222:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002224:	bf00      	nop
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0fc      	beq.n	8002226 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
	...

08002240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <pxCurrentTCBConst2>)
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	6808      	ldr	r0, [r1, #0]
 8002246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800224a:	f380 8809 	msr	PSP, r0
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	f380 8811 	msr	BASEPRI, r0
 800225a:	f04e 0e0d 	orr.w	lr, lr, #13
 800225e:	4770      	bx	lr

08002260 <pxCurrentTCBConst2>:
 8002260:	20004fbc 	.word	0x20004fbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop

08002268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <prvPortStartFirstTask+0x1c>)
 800226a:	6800      	ldr	r0, [r0, #0]
 800226c:	6800      	ldr	r0, [r0, #0]
 800226e:	f380 8808 	msr	MSP, r0
 8002272:	b662      	cpsie	i
 8002274:	b661      	cpsie	f
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	df00      	svc	0
 8002280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002282:	bf00      	nop
 8002284:	e000ed08 	.word	0xe000ed08

08002288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <xPortStartScheduler+0x38>)
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <xPortStartScheduler+0x38>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <xPortStartScheduler+0x38>)
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <xPortStartScheduler+0x38>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80022a4:	f000 f888 	bl	80023b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <xPortStartScheduler+0x3c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80022ae:	f7ff ffdb 	bl	8002268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80022b2:	f001 f8a7 	bl	8003404 <vTaskSwitchContext>
	prvTaskExitError();
 80022b6:	f7ff ffa7 	bl	8002208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	e000ed20 	.word	0xe000ed20
 80022c4:	20000004 	.word	0x20000004

080022c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <vPortEnterCritical+0x2c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <vPortEnterCritical+0x2c>)
 80022e8:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000004 	.word	0x20000004

080022f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <vPortExitCritical+0x2c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <vPortExitCritical+0x2c>)
 8002306:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <vPortExitCritical+0x2c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <vPortExitCritical+0x22>
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000004 	.word	0x20000004
	...

08002330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002330:	f3ef 8009 	mrs	r0, PSP
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <pxCurrentTCBConst>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002340:	6010      	str	r0, [r2, #0]
 8002342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002346:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800234a:	f380 8811 	msr	BASEPRI, r0
 800234e:	f001 f859 	bl	8003404 <vTaskSwitchContext>
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f380 8811 	msr	BASEPRI, r0
 800235a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	6808      	ldr	r0, [r1, #0]
 8002362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002366:	f380 8809 	msr	PSP, r0
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	4770      	bx	lr

08002370 <pxCurrentTCBConst>:
 8002370:	20004fbc 	.word	0x20004fbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop

08002378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
	__asm volatile
 800237e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002390:	f000 ff82 	bl	8003298 <xTaskIncrementTick>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <SysTick_Handler+0x3c>)
 800239c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	e000ed04 	.word	0xe000ed04

080023b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <vPortSetupTimerInterrupt+0x24>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <vPortSetupTimerInterrupt+0x28>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <vPortSetupTimerInterrupt+0x2c>)
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <vPortSetupTimerInterrupt+0x30>)
 80023cc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023ce:	4b03      	ldr	r3, [pc, #12]	; (80023dc <vPortSetupTimerInterrupt+0x24>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	e000e010 	.word	0xe000e010
 80023e0:	e000e018 	.word	0xe000e018
 80023e4:	e000e014 	.word	0xe000e014
 80023e8:	0001193f 	.word	0x0001193f

080023ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80023f8:	f000 fea4 	bl	8003144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <pvPortMalloc+0x114>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002404:	f000 f8c0 	bl	8002588 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002408:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <pvPortMalloc+0x118>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d16d      	bne.n	80024f0 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800241a:	2208      	movs	r2, #8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	3308      	adds	r3, #8
 8002434:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d059      	beq.n	80024f0 <pvPortMalloc+0x104>
 800243c:	4b32      	ldr	r3, [pc, #200]	; (8002508 <pvPortMalloc+0x11c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d854      	bhi.n	80024f0 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <pvPortMalloc+0x120>)
 8002448:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <pvPortMalloc+0x120>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002450:	e004      	b.n	800245c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d203      	bcs.n	800246e <pvPortMalloc+0x82>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f1      	bne.n	8002452 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <pvPortMalloc+0x114>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	d03b      	beq.n	80024f0 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2208      	movs	r2, #8
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	2308      	movs	r3, #8
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	429a      	cmp	r2, r3
 8002498:	d90f      	bls.n	80024ba <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1ad2      	subs	r2, r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f000 f8c9 	bl	800264c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <pvPortMalloc+0x11c>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <pvPortMalloc+0x11c>)
 80024c6:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <pvPortMalloc+0x11c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <pvPortMalloc+0x124>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d203      	bcs.n	80024dc <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <pvPortMalloc+0x11c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <pvPortMalloc+0x124>)
 80024da:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <pvPortMalloc+0x118>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80024f0:	f000 fe36 	bl	8003160 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 80024f4:	68fb      	ldr	r3, [r7, #12]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20004fac 	.word	0x20004fac
 8002504:	20004fb8 	.word	0x20004fb8
 8002508:	20004fb0 	.word	0x20004fb0
 800250c:	20004fa4 	.word	0x20004fa4
 8002510:	20004fb4 	.word	0x20004fb4

08002514 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d027      	beq.n	8002576 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002526:	2308      	movs	r3, #8
 8002528:	425b      	negs	r3, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <vPortFree+0x6c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d019      	beq.n	8002576 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <vPortFree+0x6c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	43db      	mvns	r3, r3
 8002554:	401a      	ands	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800255a:	f000 fdf3 	bl	8003144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <vPortFree+0x70>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <vPortFree+0x70>)
 800256a:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f000 f86d 	bl	800264c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002572:	f000 fdf5 	bl	8003160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20004fb8 	.word	0x20004fb8
 8002584:	20004fb0 	.word	0x20004fb0

08002588 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800258e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002592:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <prvHeapInit+0xac>)
 8002596:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3307      	adds	r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0307 	bic.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <prvHeapInit+0xac>)
 80025b8:	4413      	add	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <prvHeapInit+0xb0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <prvHeapInit+0xb0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4413      	add	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80025d4:	2208      	movs	r2, #8
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0307 	bic.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <prvHeapInit+0xb4>)
 80025e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <prvHeapInit+0xb4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <prvHeapInit+0xb4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <prvHeapInit+0xb4>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <prvHeapInit+0xb8>)
 8002616:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <prvHeapInit+0xbc>)
 800261e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <prvHeapInit+0xc0>)
 8002622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000ba4 	.word	0x20000ba4
 8002638:	20004fa4 	.word	0x20004fa4
 800263c:	20004fac 	.word	0x20004fac
 8002640:	20004fb4 	.word	0x20004fb4
 8002644:	20004fb0 	.word	0x20004fb0
 8002648:	20004fb8 	.word	0x20004fb8

0800264c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <prvInsertBlockIntoFreeList+0xa8>)
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <prvInsertBlockIntoFreeList+0x14>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d3f7      	bcc.n	800265a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	d108      	bne.n	800268e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	441a      	add	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	441a      	add	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d118      	bne.n	80026d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <prvInsertBlockIntoFreeList+0xac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d00d      	beq.n	80026ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	441a      	add	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e008      	b.n	80026dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <prvInsertBlockIntoFreeList+0xac>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e003      	b.n	80026dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d002      	beq.n	80026ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20004fa4 	.word	0x20004fa4
 80026f8:	20004fac 	.word	0x20004fac

080026fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800270a:	f7ff fddd 	bl	80022c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	3b01      	subs	r3, #1
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	441a      	add	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d114      	bne.n	800278a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01a      	beq.n	800279e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3310      	adds	r3, #16
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fec3 	bl	80034f8 <xTaskRemoveFromEventList>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <xQueueGenericReset+0xb0>)
 800277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	e009      	b.n	800279e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3310      	adds	r3, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fc5e 	bl	8002050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fc59 	bl	8002050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800279e:	f7ff fdab 	bl	80022f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	e000ed04 	.word	0xe000ed04

080027b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	e004      	b.n	80027d4 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3348      	adds	r3, #72	; 0x48
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fe07 	bl	80023ec <pvPortMalloc>
 80027de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3348      	adds	r3, #72	; 0x48
 80027ea:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f805 	bl	8002808 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80027fe:	69bb      	ldr	r3, [r7, #24]
	}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e002      	b.n	800282a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002836:	2101      	movs	r1, #1
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	f7ff ff5f 	bl	80026fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800285e:	f7ff fd33 	bl	80022c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <xQueueGenericSend+0x2c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d129      	bne.n	80028c8 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	6a38      	ldr	r0, [r7, #32]
 800287a:	f000 f9dd 	bl	8002c38 <prvCopyDataToQueue>
 800287e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	3324      	adds	r3, #36	; 0x24
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fe33 	bl	80034f8 <xTaskRemoveFromEventList>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <xQueueGenericSend+0x150>)
 800289a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	e00a      	b.n	80028c0 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028b0:	4b39      	ldr	r3, [pc, #228]	; (8002998 <xQueueGenericSend+0x150>)
 80028b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028c0:	f7ff fd1a 	bl	80022f8 <vPortExitCritical>
				return pdPASS;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e063      	b.n	8002990 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028ce:	f7ff fd13 	bl	80022f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e05c      	b.n	8002990 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fe5d 	bl	80035a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ea:	f7ff fd05 	bl	80022f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028ee:	f000 fc29 	bl	8003144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028f2:	f7ff fce9 	bl	80022c8 <vPortEnterCritical>
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d103      	bne.n	800290c <xQueueGenericSend+0xc4>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002912:	b25b      	sxtb	r3, r3
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d103      	bne.n	8002922 <xQueueGenericSend+0xda>
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002922:	f7ff fce9 	bl	80022f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002926:	1d3a      	adds	r2, r7, #4
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fe4c 	bl	80035cc <xTaskCheckForTimeOut>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d124      	bne.n	8002984 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800293a:	6a38      	ldr	r0, [r7, #32]
 800293c:	f000 fa66 	bl	8002e0c <prvIsQueueFull>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d018      	beq.n	8002978 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	3310      	adds	r3, #16
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd9e 	bl	8003490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002954:	6a38      	ldr	r0, [r7, #32]
 8002956:	f000 f9f1 	bl	8002d3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800295a:	f000 fc01 	bl	8003160 <xTaskResumeAll>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f af7c 	bne.w	800285e <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <xQueueGenericSend+0x150>)
 8002968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	e772      	b.n	800285e <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002978:	6a38      	ldr	r0, [r7, #32]
 800297a:	f000 f9df 	bl	8002d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800297e:	f000 fbef 	bl	8003160 <xTaskResumeAll>
 8002982:	e76c      	b.n	800285e <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002984:	6a38      	ldr	r0, [r7, #32]
 8002986:	f000 f9d9 	bl	8002d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800298a:	f000 fbe9 	bl	8003160 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800298e:	2300      	movs	r3, #0
		}
	}
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	e000ed04 	.word	0xe000ed04

0800299c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 80029ae:	f3ef 8211 	mrs	r2, BASEPRI
 80029b2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	61fa      	str	r2, [r7, #28]
 80029c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80029c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <xQueueGenericSendFromISR+0x40>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d12c      	bne.n	8002a36 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ec:	f000 f924 	bl	8002c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80029f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d112      	bne.n	8002a20 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	3324      	adds	r3, #36	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fd76 	bl	80034f8 <xTaskRemoveFromEventList>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e007      	b.n	8002a30 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a24:	3301      	adds	r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	b25a      	sxtb	r2, r3
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8002a34:	e001      	b.n	8002a3a <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08a      	sub	sp, #40	; 0x28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	623b      	str	r3, [r7, #32]
	__asm volatile
 8002a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8002a60:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	613a      	str	r2, [r7, #16]
 8002a72:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8002a74:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a76:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d929      	bls.n	8002adc <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8e:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d112      	bne.n	8002ac8 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3324      	adds	r3, #36	; 0x24
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fd22 	bl	80034f8 <xTaskRemoveFromEventList>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e006      	b.n	8002ad6 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	e001      	b.n	8002ae0 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b08:	f7ff fbde 	bl	80022c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01f      	beq.n	8002b58 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6a38      	ldr	r0, [r7, #32]
 8002b1c:	f000 f8e8 	bl	8002cf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	3310      	adds	r3, #16
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fcdf 	bl	80034f8 <xTaskRemoveFromEventList>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b40:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <xQueueReceive+0x140>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b50:	f7ff fbd2 	bl	80022f8 <vPortExitCritical>
				return pdPASS;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e069      	b.n	8002c2c <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b5e:	f7ff fbcb 	bl	80022f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e062      	b.n	8002c2c <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fd15 	bl	80035a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b7a:	f7ff fbbd 	bl	80022f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b7e:	f000 fae1 	bl	8003144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b82:	f7ff fba1 	bl	80022c8 <vPortEnterCritical>
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d103      	bne.n	8002b9c <xQueueReceive+0xa8>
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d103      	bne.n	8002bb2 <xQueueReceive+0xbe>
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb2:	f7ff fba1 	bl	80022f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bb6:	1d3a      	adds	r2, r7, #4
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fd04 	bl	80035cc <xTaskCheckForTimeOut>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d123      	bne.n	8002c12 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bca:	6a38      	ldr	r0, [r7, #32]
 8002bcc:	f000 f908 	bl	8002de0 <prvIsQueueEmpty>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d017      	beq.n	8002c06 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	3324      	adds	r3, #36	; 0x24
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fc56 	bl	8003490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002be4:	6a38      	ldr	r0, [r7, #32]
 8002be6:	f000 f8a9 	bl	8002d3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bea:	f000 fab9 	bl	8003160 <xTaskResumeAll>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d189      	bne.n	8002b08 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <xQueueReceive+0x140>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	e780      	b.n	8002b08 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c06:	6a38      	ldr	r0, [r7, #32]
 8002c08:	f000 f898 	bl	8002d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c0c:	f000 faa8 	bl	8003160 <xTaskResumeAll>
 8002c10:	e77a      	b.n	8002b08 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c12:	6a38      	ldr	r0, [r7, #32]
 8002c14:	f000 f892 	bl	8002d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c18:	f000 faa2 	bl	8003160 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c1c:	6a38      	ldr	r0, [r7, #32]
 8002c1e:	f000 f8df 	bl	8002de0 <prvIsQueueEmpty>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f43f af6f 	beq.w	8002b08 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d043      	beq.n	8002cde <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d119      	bne.n	8002c90 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6898      	ldr	r0, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	461a      	mov	r2, r3
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	f001 fa22 	bl	80040b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	441a      	add	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d32b      	bcc.n	8002cde <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	e026      	b.n	8002cde <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68d8      	ldr	r0, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	f001 fa08 	bl	80040b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	425b      	negs	r3, r3
 8002caa:	441a      	add	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d207      	bcs.n	8002ccc <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d105      	bne.n	8002cde <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ce6:	693b      	ldr	r3, [r7, #16]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	441a      	add	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d303      	bcc.n	8002d24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6838      	ldr	r0, [r7, #0]
 8002d30:	f001 f9be 	bl	80040b0 <memcpy>
	}
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d44:	f7ff fac0 	bl	80022c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d50:	e011      	b.n	8002d76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d012      	beq.n	8002d80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3324      	adds	r3, #36	; 0x24
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fbca 	bl	80034f8 <xTaskRemoveFromEventList>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d6a:	f000 fc75 	bl	8003658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dce9      	bgt.n	8002d52 <prvUnlockQueue+0x16>
 8002d7e:	e000      	b.n	8002d82 <prvUnlockQueue+0x46>
					break;
 8002d80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	22ff      	movs	r2, #255	; 0xff
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d8a:	f7ff fab5 	bl	80022f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d8e:	f7ff fa9b 	bl	80022c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d9a:	e011      	b.n	8002dc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3310      	adds	r3, #16
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fba5 	bl	80034f8 <xTaskRemoveFromEventList>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002db4:	f000 fc50 	bl	8003658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	dce9      	bgt.n	8002d9c <prvUnlockQueue+0x60>
 8002dc8:	e000      	b.n	8002dcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	22ff      	movs	r2, #255	; 0xff
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002dd4:	f7ff fa90 	bl	80022f8 <vPortExitCritical>
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002de8:	f7ff fa6e 	bl	80022c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002df4:	2301      	movs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e001      	b.n	8002dfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dfe:	f7ff fa7b 	bl	80022f8 <vPortExitCritical>

	return xReturn;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e14:	f7ff fa58 	bl	80022c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d102      	bne.n	8002e2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e001      	b.n	8002e2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e2e:	f7ff fa63 	bl	80022f8 <vPortExitCritical>

	return xReturn;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e4c:	f7ff fa3c 	bl	80022c8 <vPortEnterCritical>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d103      	bne.n	8002e66 <vQueueWaitForMessageRestricted+0x2a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d103      	bne.n	8002e7c <vQueueWaitForMessageRestricted+0x40>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e7c:	f7ff fa3c 	bl	80022f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3324      	adds	r3, #36	; 0x24
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fb13 	bl	80034bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff50 	bl	8002d3c <prvUnlockQueue>
	}
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	; 0x30
 8002ea8:	af04      	add	r7, sp, #16
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fa97 	bl	80023ec <pvPortMalloc>
 8002ebe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ec6:	204c      	movs	r0, #76	; 0x4c
 8002ec8:	f7ff fa90 	bl	80023ec <pvPortMalloc>
 8002ecc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eda:	e005      	b.n	8002ee8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002edc:	6978      	ldr	r0, [r7, #20]
 8002ede:	f7ff fb19 	bl	8002514 <vPortFree>
 8002ee2:	e001      	b.n	8002ee8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d013      	beq.n	8002f16 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f80e 	bl	8002f26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f0a:	69f8      	ldr	r0, [r7, #28]
 8002f0c:	f000 f874 	bl	8002ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f10:	2301      	movs	r3, #1
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e002      	b.n	8002f1c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
	}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f023 0307 	bic.w	r3, r3, #7
 8002f4c:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e012      	b.n	8002f7a <prvInitialiseNewTask+0x54>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4413      	add	r3, r2
 8002f5a:	7819      	ldrb	r1, [r3, #0]
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	4413      	add	r3, r2
 8002f62:	3334      	adds	r3, #52	; 0x34
 8002f64:	460a      	mov	r2, r1
 8002f66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <prvInitialiseNewTask+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d9e9      	bls.n	8002f54 <prvInitialiseNewTask+0x2e>
 8002f80:	e000      	b.n	8002f84 <prvInitialiseNewTask+0x5e>
		{
			break;
 8002f82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d901      	bls.n	8002f96 <prvInitialiseNewTask+0x70>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f92:	2304      	movs	r3, #4
 8002f94:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f874 	bl	800208e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	3318      	adds	r3, #24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f86f 	bl	800208e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f1c3 0205 	rsb	r2, r3, #5
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	6938      	ldr	r0, [r7, #16]
 8002fda:	f7ff f8e9 	bl	80021b0 <pxPortInitialiseStack>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <prvInitialiseNewTask+0xca>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003000:	f7ff f962 	bl	80022c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <prvAddNewTaskToReadyList+0xb8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <prvAddNewTaskToReadyList+0xb8>)
 800300c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003016:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <prvAddNewTaskToReadyList+0xb8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d110      	bne.n	8003046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003024:	f000 fb3e 	bl	80036a4 <prvInitialiseTaskLists>
 8003028:	e00d      	b.n	8003046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <prvAddNewTaskToReadyList+0xc0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	429a      	cmp	r2, r3
 800303e:	d802      	bhi.n	8003046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003040:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <prvAddNewTaskToReadyList+0xc4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <prvAddNewTaskToReadyList+0xc4>)
 800304e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <prvAddNewTaskToReadyList+0xc8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <prvAddNewTaskToReadyList+0xc8>)
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <prvAddNewTaskToReadyList+0xcc>)
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7ff f814 	bl	80020a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800307e:	f7ff f93b 	bl	80022f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <prvAddNewTaskToReadyList+0xc0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00e      	beq.n	80030a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <prvAddNewTaskToReadyList+0xbc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	429a      	cmp	r2, r3
 8003096:	d207      	bcs.n	80030a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <prvAddNewTaskToReadyList+0xd0>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20005094 	.word	0x20005094
 80030b4:	20004fbc 	.word	0x20004fbc
 80030b8:	200050a0 	.word	0x200050a0
 80030bc:	200050b0 	.word	0x200050b0
 80030c0:	2000509c 	.word	0x2000509c
 80030c4:	20004fc0 	.word	0x20004fc0
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <vTaskStartScheduler+0x60>)
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	4914      	ldr	r1, [pc, #80]	; (8003130 <vTaskStartScheduler+0x64>)
 80030e0:	4814      	ldr	r0, [pc, #80]	; (8003134 <vTaskStartScheduler+0x68>)
 80030e2:	f7ff fedf 	bl	8002ea4 <xTaskCreate>
 80030e6:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80030ee:	f000 fbfd 	bl	80038ec <xTimerCreateTimerTask>
 80030f2:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d114      	bne.n	8003124 <vTaskStartScheduler+0x58>
	__asm volatile
 80030fa:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <vTaskStartScheduler+0x6c>)
 800310e:	f04f 32ff 	mov.w	r2, #4294967295
 8003112:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <vTaskStartScheduler+0x70>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <vTaskStartScheduler+0x74>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003120:	f7ff f8b2 	bl	8002288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200050b8 	.word	0x200050b8
 8003130:	08004108 	.word	0x08004108
 8003134:	08003671 	.word	0x08003671
 8003138:	200050b4 	.word	0x200050b4
 800313c:	200050a0 	.word	0x200050a0
 8003140:	20005098 	.word	0x20005098

08003144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <vTaskSuspendAll+0x18>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a03      	ldr	r2, [pc, #12]	; (800315c <vTaskSuspendAll+0x18>)
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200050bc 	.word	0x200050bc

08003160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800316e:	f7ff f8ab 	bl	80022c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003172:	4b39      	ldr	r3, [pc, #228]	; (8003258 <xTaskResumeAll+0xf8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3b01      	subs	r3, #1
 8003178:	4a37      	ldr	r2, [pc, #220]	; (8003258 <xTaskResumeAll+0xf8>)
 800317a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <xTaskResumeAll+0xf8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d161      	bne.n	8003248 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003184:	4b35      	ldr	r3, [pc, #212]	; (800325c <xTaskResumeAll+0xfc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05d      	beq.n	8003248 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800318c:	e02e      	b.n	80031ec <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800318e:	4b34      	ldr	r3, [pc, #208]	; (8003260 <xTaskResumeAll+0x100>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3318      	adds	r3, #24
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe ffde 	bl	800215c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe ffd9 	bl	800215c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <xTaskResumeAll+0x104>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <xTaskResumeAll+0x104>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <xTaskResumeAll+0x108>)
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fe ff67 	bl	80020a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <xTaskResumeAll+0x10c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <xTaskResumeAll+0x110>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ec:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <xTaskResumeAll+0x100>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1cc      	bne.n	800318e <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031fa:	f000 facf 	bl	800379c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <xTaskResumeAll+0x114>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800320a:	f000 f845 	bl	8003298 <xTaskIncrementTick>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <xTaskResumeAll+0x110>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3b01      	subs	r3, #1
 800321e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f1      	bne.n	800320a <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <xTaskResumeAll+0x114>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <xTaskResumeAll+0x110>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003234:	2301      	movs	r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <xTaskResumeAll+0x118>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003248:	f7ff f856 	bl	80022f8 <vPortExitCritical>

	return xAlreadyYielded;
 800324c:	68bb      	ldr	r3, [r7, #8]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200050bc 	.word	0x200050bc
 800325c:	20005094 	.word	0x20005094
 8003260:	20005054 	.word	0x20005054
 8003264:	2000509c 	.word	0x2000509c
 8003268:	20004fc0 	.word	0x20004fc0
 800326c:	20004fbc 	.word	0x20004fbc
 8003270:	200050a8 	.word	0x200050a8
 8003274:	200050a4 	.word	0x200050a4
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <xTaskGetTickCount+0x18>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003288:	687b      	ldr	r3, [r7, #4]
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	20005098 	.word	0x20005098

08003298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a2:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <xTaskIncrementTick+0x140>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 8083 	bne.w	80033b2 <xTaskIncrementTick+0x11a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <xTaskIncrementTick+0x144>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032b4:	4a49      	ldr	r2, [pc, #292]	; (80033dc <xTaskIncrementTick+0x144>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d110      	bne.n	80032e2 <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032c0:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <xTaskIncrementTick+0x148>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <xTaskIncrementTick+0x14c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <xTaskIncrementTick+0x148>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4a45      	ldr	r2, [pc, #276]	; (80033e4 <xTaskIncrementTick+0x14c>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <xTaskIncrementTick+0x150>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a43      	ldr	r2, [pc, #268]	; (80033e8 <xTaskIncrementTick+0x150>)
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	f000 fa5d 	bl	800379c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032e2:	4b42      	ldr	r3, [pc, #264]	; (80033ec <xTaskIncrementTick+0x154>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d34d      	bcc.n	8003388 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <xTaskIncrementTick+0x148>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xTaskIncrementTick+0x62>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <xTaskIncrementTick+0x64>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d004      	beq.n	800330a <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <xTaskIncrementTick+0x154>)
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	601a      	str	r2, [r3, #0]
					break;
 8003308:	e03e      	b.n	8003388 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800330a:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <xTaskIncrementTick+0x148>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d203      	bcs.n	800332a <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003322:	4a32      	ldr	r2, [pc, #200]	; (80033ec <xTaskIncrementTick+0x154>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6013      	str	r3, [r2, #0]
						break;
 8003328:	e02e      	b.n	8003388 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe ff14 	bl	800215c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3318      	adds	r3, #24
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe ff0b 	bl	800215c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	2201      	movs	r2, #1
 800334c:	409a      	lsls	r2, r3
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <xTaskIncrementTick+0x158>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <xTaskIncrementTick+0x158>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <xTaskIncrementTick+0x15c>)
 8003366:	441a      	add	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7fe fe99 	bl	80020a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <xTaskIncrementTick+0x160>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d3b4      	bcc.n	80032ec <xTaskIncrementTick+0x54>
						{
							xSwitchRequired = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003386:	e7b1      	b.n	80032ec <xTaskIncrementTick+0x54>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <xTaskIncrementTick+0x160>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	4919      	ldr	r1, [pc, #100]	; (80033f4 <xTaskIncrementTick+0x15c>)
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d901      	bls.n	80033a4 <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <xTaskIncrementTick+0x164>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <xTaskIncrementTick+0x128>
			{
				vApplicationTickHook();
 80033ac:	f7fe f84a 	bl	8001444 <vApplicationTickHook>
 80033b0:	e006      	b.n	80033c0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <xTaskIncrementTick+0x164>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	4a10      	ldr	r2, [pc, #64]	; (80033fc <xTaskIncrementTick+0x164>)
 80033ba:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80033bc:	f7fe f842 	bl	8001444 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <xTaskIncrementTick+0x168>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033cc:	697b      	ldr	r3, [r7, #20]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200050bc 	.word	0x200050bc
 80033dc:	20005098 	.word	0x20005098
 80033e0:	2000504c 	.word	0x2000504c
 80033e4:	20005050 	.word	0x20005050
 80033e8:	200050ac 	.word	0x200050ac
 80033ec:	200050b4 	.word	0x200050b4
 80033f0:	2000509c 	.word	0x2000509c
 80033f4:	20004fc0 	.word	0x20004fc0
 80033f8:	20004fbc 	.word	0x20004fbc
 80033fc:	200050a4 	.word	0x200050a4
 8003400:	200050a8 	.word	0x200050a8

08003404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <vTaskSwitchContext+0x78>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <vTaskSwitchContext+0x7c>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003418:	e02a      	b.n	8003470 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <vTaskSwitchContext+0x7c>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <vTaskSwitchContext+0x80>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	f1c3 031f 	rsb	r3, r3, #31
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <vTaskSwitchContext+0x84>)
 8003442:	4413      	add	r3, r2
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3308      	adds	r3, #8
 8003458:	429a      	cmp	r2, r3
 800345a:	d104      	bne.n	8003466 <vTaskSwitchContext+0x62>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a07      	ldr	r2, [pc, #28]	; (800348c <vTaskSwitchContext+0x88>)
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	200050bc 	.word	0x200050bc
 8003480:	200050a8 	.word	0x200050a8
 8003484:	2000509c 	.word	0x2000509c
 8003488:	20004fc0 	.word	0x20004fc0
 800348c:	20004fbc 	.word	0x20004fbc

08003490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <vTaskPlaceOnEventList+0x28>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3318      	adds	r3, #24
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fe22 	bl	80020ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034a8:	2101      	movs	r1, #1
 80034aa:	6838      	ldr	r0, [r7, #0]
 80034ac:	f000 f9b8 	bl	8003820 <prvAddCurrentTaskToDelayedList>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20004fbc 	.word	0x20004fbc

080034bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <vTaskPlaceOnEventListRestricted+0x38>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3318      	adds	r3, #24
 80034ce:	4619      	mov	r1, r3
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7fe fde8 	bl	80020a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68b8      	ldr	r0, [r7, #8]
 80034e6:	f000 f99b 	bl	8003820 <prvAddCurrentTaskToDelayedList>
	}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20004fbc 	.word	0x20004fbc

080034f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3318      	adds	r3, #24
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fe25 	bl	800215c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <xTaskRemoveFromEventList+0x90>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11c      	bne.n	8003554 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3304      	adds	r3, #4
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fe1c 	bl	800215c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <xTaskRemoveFromEventList+0x94>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <xTaskRemoveFromEventList+0x94>)
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <xTaskRemoveFromEventList+0x98>)
 8003544:	441a      	add	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3304      	adds	r3, #4
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7fe fdaa 	bl	80020a6 <vListInsertEnd>
 8003552:	e005      	b.n	8003560 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3318      	adds	r3, #24
 8003558:	4619      	mov	r1, r3
 800355a:	480e      	ldr	r0, [pc, #56]	; (8003594 <xTaskRemoveFromEventList+0x9c>)
 800355c:	f7fe fda3 	bl	80020a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <xTaskRemoveFromEventList+0xa0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	429a      	cmp	r2, r3
 800356c:	d905      	bls.n	800357a <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800356e:	2301      	movs	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <xTaskRemoveFromEventList+0xa4>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e001      	b.n	800357e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	200050bc 	.word	0x200050bc
 800358c:	2000509c 	.word	0x2000509c
 8003590:	20004fc0 	.word	0x20004fc0
 8003594:	20005054 	.word	0x20005054
 8003598:	20004fbc 	.word	0x20004fbc
 800359c:	200050a8 	.word	0x200050a8

080035a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <vTaskInternalSetTimeOutState+0x24>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <vTaskInternalSetTimeOutState+0x28>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	200050ac 	.word	0x200050ac
 80035c8:	20005098 	.word	0x20005098

080035cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80035d6:	f7fe fe77 	bl	80022c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <xTaskCheckForTimeOut+0x84>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d102      	bne.n	80035fa <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e023      	b.n	8003642 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <xTaskCheckForTimeOut+0x88>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d007      	beq.n	8003616 <xTaskCheckForTimeOut+0x4a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	429a      	cmp	r2, r3
 800360e:	d802      	bhi.n	8003616 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003610:	2301      	movs	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e015      	b.n	8003642 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d90b      	bls.n	8003638 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffb7 	bl	80035a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e004      	b.n	8003642 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800363e:	2301      	movs	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003642:	f7fe fe59 	bl	80022f8 <vPortExitCritical>

	return xReturn;
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20005098 	.word	0x20005098
 8003654:	200050ac 	.word	0x200050ac

08003658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <vTaskMissedYield+0x14>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200050a8 	.word	0x200050a8

08003670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003678:	f000 f854 	bl	8003724 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <prvIdleTask+0x2c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d907      	bls.n	8003694 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <prvIdleTask+0x30>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003694:	f7fd fed0 	bl	8001438 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003698:	e7ee      	b.n	8003678 <prvIdleTask+0x8>
 800369a:	bf00      	nop
 800369c:	20004fc0 	.word	0x20004fc0
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	e00c      	b.n	80036ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <prvInitialiseTaskLists+0x60>)
 80036bc:	4413      	add	r3, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fcc6 	bl	8002050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3301      	adds	r3, #1
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d9ef      	bls.n	80036b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <prvInitialiseTaskLists+0x64>)
 80036d2:	f7fe fcbd 	bl	8002050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036d6:	480d      	ldr	r0, [pc, #52]	; (800370c <prvInitialiseTaskLists+0x68>)
 80036d8:	f7fe fcba 	bl	8002050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036dc:	480c      	ldr	r0, [pc, #48]	; (8003710 <prvInitialiseTaskLists+0x6c>)
 80036de:	f7fe fcb7 	bl	8002050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036e2:	480c      	ldr	r0, [pc, #48]	; (8003714 <prvInitialiseTaskLists+0x70>)
 80036e4:	f7fe fcb4 	bl	8002050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036e8:	480b      	ldr	r0, [pc, #44]	; (8003718 <prvInitialiseTaskLists+0x74>)
 80036ea:	f7fe fcb1 	bl	8002050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <prvInitialiseTaskLists+0x78>)
 80036f0:	4a05      	ldr	r2, [pc, #20]	; (8003708 <prvInitialiseTaskLists+0x64>)
 80036f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <prvInitialiseTaskLists+0x7c>)
 80036f6:	4a05      	ldr	r2, [pc, #20]	; (800370c <prvInitialiseTaskLists+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20004fc0 	.word	0x20004fc0
 8003708:	20005024 	.word	0x20005024
 800370c:	20005038 	.word	0x20005038
 8003710:	20005054 	.word	0x20005054
 8003714:	20005068 	.word	0x20005068
 8003718:	20005080 	.word	0x20005080
 800371c:	2000504c 	.word	0x2000504c
 8003720:	20005050 	.word	0x20005050

08003724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800372a:	e019      	b.n	8003760 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800372c:	f7fe fdcc 	bl	80022c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <prvCheckTasksWaitingTermination+0x4c>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fd0d 	bl	800215c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <prvCheckTasksWaitingTermination+0x50>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3b01      	subs	r3, #1
 8003748:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <prvCheckTasksWaitingTermination+0x50>)
 800374a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <prvCheckTasksWaitingTermination+0x54>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <prvCheckTasksWaitingTermination+0x54>)
 8003754:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003756:	f7fe fdcf 	bl	80022f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f80e 	bl	800377c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <prvCheckTasksWaitingTermination+0x54>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e1      	bne.n	800372c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20005068 	.word	0x20005068
 8003774:	20005094 	.word	0x20005094
 8003778:	2000507c 	.word	0x2000507c

0800377c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fec3 	bl	8002514 <vPortFree>
			vPortFree( pxTCB );
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe fec0 	bl	8002514 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <prvResetNextTaskUnblockTime+0x40>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <prvResetNextTaskUnblockTime+0x14>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <prvResetNextTaskUnblockTime+0x16>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvResetNextTaskUnblockTime+0x44>)
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295
 80037bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037be:	e008      	b.n	80037d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <prvResetNextTaskUnblockTime+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <prvResetNextTaskUnblockTime+0x44>)
 80037d0:	6013      	str	r3, [r2, #0]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	2000504c 	.word	0x2000504c
 80037e0:	200050b4 	.word	0x200050b4

080037e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <xTaskGetSchedulerState+0x34>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037f2:	2301      	movs	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	e008      	b.n	800380a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <xTaskGetSchedulerState+0x38>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003800:	2302      	movs	r3, #2
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e001      	b.n	800380a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800380a:	687b      	ldr	r3, [r7, #4]
	}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	200050a0 	.word	0x200050a0
 800381c:	200050bc 	.word	0x200050bc

08003820 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800382a:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fc90 	bl	800215c <uxListRemove>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	2201      	movs	r2, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43da      	mvns	r2, r3
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4013      	ands	r3, r2
 8003856:	4a20      	ldr	r2, [pc, #128]	; (80038d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d10a      	bne.n	8003878 <prvAddCurrentTaskToDelayedList+0x58>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	481a      	ldr	r0, [pc, #104]	; (80038dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003872:	f7fe fc18 	bl	80020a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003876:	e026      	b.n	80038c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d209      	bcs.n	80038a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f7fe fc25 	bl	80020ec <vListInsert>
}
 80038a2:	e010      	b.n	80038c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7fe fc1b 	bl	80020ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d202      	bcs.n	80038c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6013      	str	r3, [r2, #0]
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20005098 	.word	0x20005098
 80038d4:	20004fbc 	.word	0x20004fbc
 80038d8:	2000509c 	.word	0x2000509c
 80038dc:	20005080 	.word	0x20005080
 80038e0:	20005050 	.word	0x20005050
 80038e4:	2000504c 	.word	0x2000504c
 80038e8:	200050b4 	.word	0x200050b4

080038ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80038f6:	f000 fa83 	bl	8003e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <xTimerCreateTimerTask+0x38>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <xTimerCreateTimerTask+0x3c>)
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2303      	movs	r3, #3
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	4907      	ldr	r1, [pc, #28]	; (800392c <xTimerCreateTimerTask+0x40>)
 8003910:	4807      	ldr	r0, [pc, #28]	; (8003930 <xTimerCreateTimerTask+0x44>)
 8003912:	f7ff fac7 	bl	8002ea4 <xTaskCreate>
 8003916:	6078      	str	r0, [r7, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8003918:	687b      	ldr	r3, [r7, #4]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200050f0 	.word	0x200050f0
 8003928:	200050f4 	.word	0x200050f4
 800392c:	08004110 	.word	0x08004110
 8003930:	08003a9d 	.word	0x08003a9d

08003934 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003942:	2028      	movs	r0, #40	; 0x28
 8003944:	f7fe fd52 	bl	80023ec <pvPortMalloc>
 8003948:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f805 	bl	800396e <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003964:	697b      	ldr	r3, [r7, #20]
	}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	if( pxNewTimer != NULL )
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d015      	beq.n	80039ae <prvInitialiseNewTimer+0x40>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003982:	f000 fa3d 	bl	8003e00 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fb70 	bl	800208e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039ca:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <xTimerGenericCommand+0x7c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02a      	beq.n	8003a28 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	dc18      	bgt.n	8003a16 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039e4:	f7ff fefe 	bl	80037e4 <xTaskGetSchedulerState>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d109      	bne.n	8003a02 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <xTimerGenericCommand+0x7c>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	f107 0110 	add.w	r1, r7, #16
 80039f6:	2300      	movs	r3, #0
 80039f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fa:	f7fe ff25 	bl	8002848 <xQueueGenericSend>
 80039fe:	61f8      	str	r0, [r7, #28]
 8003a00:	e012      	b.n	8003a28 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <xTimerGenericCommand+0x7c>)
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	f107 0110 	add.w	r1, r7, #16
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f7fe ff1b 	bl	8002848 <xQueueGenericSend>
 8003a12:	61f8      	str	r0, [r7, #28]
 8003a14:	e008      	b.n	8003a28 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a16:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <xTimerGenericCommand+0x7c>)
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f107 0110 	add.w	r1, r7, #16
 8003a1e:	2300      	movs	r3, #0
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	f7fe ffbb 	bl	800299c <xQueueGenericSendFromISR>
 8003a26:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a28:	69fb      	ldr	r3, [r7, #28]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200050f0 	.word	0x200050f0

08003a38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <prvProcessExpiredTimer+0x60>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fb83 	bl	800215c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d114      	bne.n	8003a88 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	18d1      	adds	r1, r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f8bc 	bl	8003be8 <prvInsertTimerInActiveList>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a76:	2300      	movs	r3, #0
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	2100      	movs	r1, #0
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff ff99 	bl	80039b8 <xTimerGenericCommand>
 8003a86:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	4798      	blx	r3
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200050e8 	.word	0x200050e8

08003a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8003aa4:	f7fd fcba 	bl	800141c <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f857 	bl	8003b60 <prvGetNextExpireTime>
 8003ab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f803 	bl	8003ac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003abe:	f000 f8d5 	bl	8003c6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ac2:	e7f1      	b.n	8003aa8 <prvTimerTask+0xc>

08003ac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ace:	f7ff fb39 	bl	8003144 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f866 	bl	8003ba8 <prvSampleTimeNow>
 8003adc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d130      	bne.n	8003b46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <prvProcessTimerOrBlockTask+0x3c>
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d806      	bhi.n	8003b00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003af2:	f7ff fb35 	bl	8003160 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff9d 	bl	8003a38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003afe:	e024      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <prvProcessTimerOrBlockTask+0x90>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <prvProcessTimerOrBlockTask+0x94>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7ff f989 	bl	8002e3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b2a:	f7ff fb19 	bl	8003160 <xTaskResumeAll>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <prvProcessTimerOrBlockTask+0x98>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
}
 8003b44:	e001      	b.n	8003b4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003b46:	f7ff fb0b 	bl	8003160 <xTaskResumeAll>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200050ec 	.word	0x200050ec
 8003b58:	200050f0 	.word	0x200050f0
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <prvGetNextExpireTime+0x44>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <prvGetNextExpireTime+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e001      	b.n	8003b96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200050e8 	.word	0x200050e8

08003ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bb0:	f7ff fb64 	bl	800327c <xTaskGetTickCount>
 8003bb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <prvSampleTimeNow+0x3c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d205      	bcs.n	8003bcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003bc0:	f000 f8ca 	bl	8003d58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <prvSampleTimeNow+0x3c>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200050f8 	.word	0x200050f8

08003be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d812      	bhi.n	8003c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e01b      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <prvInsertTimerInActiveList+0x7c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7fe fa5d 	bl	80020ec <vListInsert>
 8003c32:	e012      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d206      	bcs.n	8003c4a <prvInsertTimerInActiveList+0x62>
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e007      	b.n	8003c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <prvInsertTimerInActiveList+0x80>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe fa49 	bl	80020ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c5a:	697b      	ldr	r3, [r7, #20]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200050ec 	.word	0x200050ec
 8003c68:	200050e8 	.word	0x200050e8

08003c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c72:	e060      	b.n	8003d36 <prvProcessReceivedCommands+0xca>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db5d      	blt.n	8003d36 <prvProcessReceivedCommands+0xca>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fa66 	bl	800215c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff88 	bl	8003ba8 <prvSampleTimeNow>
 8003c98:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d849      	bhi.n	8003d34 <prvProcessReceivedCommands+0xc8>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <prvProcessReceivedCommands+0x3c>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cd1 	.word	0x08003cd1
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd1 	.word	0x08003cd1
 8003cb4:	08003d37 	.word	0x08003d37
 8003cb8:	08003d13 	.word	0x08003d13
 8003cbc:	08003d2d 	.word	0x08003d2d
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003cd1 	.word	0x08003cd1
 8003cc8:	08003d37 	.word	0x08003d37
 8003ccc:	08003d13 	.word	0x08003d13
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	18d1      	adds	r1, r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	69f8      	ldr	r0, [r7, #28]
 8003cde:	f7ff ff83 	bl	8003be8 <prvInsertTimerInActiveList>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d026      	beq.n	8003d36 <prvProcessReceivedCommands+0xca>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	69f8      	ldr	r0, [r7, #28]
 8003cee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d11e      	bne.n	8003d36 <prvProcessReceivedCommands+0xca>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	441a      	add	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	2100      	movs	r1, #0
 8003d08:	69f8      	ldr	r0, [r7, #28]
 8003d0a:	f7ff fe55 	bl	80039b8 <xTimerGenericCommand>
 8003d0e:	6178      	str	r0, [r7, #20]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8003d10:	e011      	b.n	8003d36 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	18d1      	adds	r1, r2, r3
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	69f8      	ldr	r0, [r7, #28]
 8003d26:	f7ff ff5f 	bl	8003be8 <prvInsertTimerInActiveList>
					break;
 8003d2a:	e004      	b.n	8003d36 <prvProcessReceivedCommands+0xca>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003d2c:	69f8      	ldr	r0, [r7, #28]
 8003d2e:	f7fe fbf1 	bl	8002514 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003d32:	e000      	b.n	8003d36 <prvProcessReceivedCommands+0xca>

				default	:
					/* Don't expect to get here. */
					break;
 8003d34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <prvProcessReceivedCommands+0xe8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f107 0108 	add.w	r1, r7, #8
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fed7 	bl	8002af4 <xQueueReceive>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d193      	bne.n	8003c74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200050f0 	.word	0x200050f0

08003d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d5e:	e037      	b.n	8003dd0 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <prvSwitchTimerLists+0xa0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <prvSwitchTimerLists+0xa0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe f9ef 	bl	800215c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	6938      	ldr	r0, [r7, #16]
 8003d84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d120      	bne.n	8003dd0 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d90e      	bls.n	8003dbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <prvSwitchTimerLists+0xa0>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7fe f998 	bl	80020ec <vListInsert>
 8003dbc:	e008      	b.n	8003dd0 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6938      	ldr	r0, [r7, #16]
 8003dca:	f7ff fdf5 	bl	80039b8 <xTimerGenericCommand>
 8003dce:	60b8      	str	r0, [r7, #8]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <prvSwitchTimerLists+0xa0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1c2      	bne.n	8003d60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <prvSwitchTimerLists+0xa0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <prvSwitchTimerLists+0xa4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <prvSwitchTimerLists+0xa0>)
 8003de6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <prvSwitchTimerLists+0xa4>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200050e8 	.word	0x200050e8
 8003dfc:	200050ec 	.word	0x200050ec

08003e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e04:	f7fe fa60 	bl	80022c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <prvCheckForValidListAndQueue+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d113      	bne.n	8003e38 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8003e10:	480c      	ldr	r0, [pc, #48]	; (8003e44 <prvCheckForValidListAndQueue+0x44>)
 8003e12:	f7fe f91d 	bl	8002050 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003e16:	480c      	ldr	r0, [pc, #48]	; (8003e48 <prvCheckForValidListAndQueue+0x48>)
 8003e18:	f7fe f91a 	bl	8002050 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <prvCheckForValidListAndQueue+0x4c>)
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <prvCheckForValidListAndQueue+0x44>)
 8003e20:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <prvCheckForValidListAndQueue+0x50>)
 8003e24:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <prvCheckForValidListAndQueue+0x48>)
 8003e26:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e28:	2200      	movs	r2, #0
 8003e2a:	210c      	movs	r1, #12
 8003e2c:	2005      	movs	r0, #5
 8003e2e:	f7fe fcbf 	bl	80027b0 <xQueueGenericCreate>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <prvCheckForValidListAndQueue+0x40>)
 8003e36:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e38:	f7fe fa5e 	bl	80022f8 <vPortExitCritical>
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200050f0 	.word	0x200050f0
 8003e44:	200050c0 	.word	0x200050c0
 8003e48:	200050d4 	.word	0x200050d4
 8003e4c:	200050e8 	.word	0x200050e8
 8003e50:	200050ec 	.word	0x200050ec

08003e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003e58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003e5a:	e003      	b.n	8003e64 <LoopCopyDataInit>

08003e5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003e5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003e60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003e62:	3104      	adds	r1, #4

08003e64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003e64:	480b      	ldr	r0, [pc, #44]	; (8003e94 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8003e68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e6c:	d3f6      	bcc.n	8003e5c <CopyDataInit>
	ldr	r2, =_sbss
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003e70:	e002      	b.n	8003e78 <LoopFillZerobss>

08003e72 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e74:	f842 3b04 	str.w	r3, [r2], #4

08003e78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e78:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8003e7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e7c:	d3f9      	bcc.n	8003e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 8003e7e:	f000 f813 	bl	8003ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e82:	f000 f8f1 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e86:	f7fd fae3 	bl	8001450 <main>
	bx	lr
 8003e8a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003e90:	08004274 	.word	0x08004274
	ldr	r0, =_sdata
 8003e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003e9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003ea0:	2000512c 	.word	0x2000512c

08003ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ea4:	e7fe      	b.n	8003ea4 <ADC1_2_IRQHandler>
	...

08003ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003eac:	4a1a      	ldr	r2, [pc, #104]	; (8003f18 <SystemInit+0x70>)
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <SystemInit+0x70>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8003eb8:	4917      	ldr	r1, [pc, #92]	; (8003f18 <SystemInit+0x70>)
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <SystemInit+0x70>)
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <SystemInit+0x74>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <SystemInit+0x70>)
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <SystemInit+0x70>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ed4:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <SystemInit+0x70>)
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <SystemInit+0x70>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	; (8003f18 <SystemInit+0x70>)
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <SystemInit+0x70>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003eea:	6053      	str	r3, [r2, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <SystemInit+0x70>)
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <SystemInit+0x70>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003ef6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <SystemInit+0x70>)
 8003efa:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8003efe:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SystemInit+0x70>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003f06:	f000 f80d 	bl	8003f24 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <SystemInit+0x78>)
 8003f0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f10:	609a      	str	r2, [r3, #8]
#endif 
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	f0ff0000 	.word	0xf0ff0000
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003f28:	f000 f802 	bl	8003f30 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003f3e:	4a47      	ldr	r2, [pc, #284]	; (800405c <SetSysClockTo72+0x12c>)
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <SetSysClockTo72+0x12c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003f4a:	4b44      	ldr	r3, [pc, #272]	; (800405c <SetSysClockTo72+0x12c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3301      	adds	r3, #1
 8003f58:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <SetSysClockTo72+0x38>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f66:	d1f0      	bne.n	8003f4a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003f68:	4b3c      	ldr	r3, [pc, #240]	; (800405c <SetSysClockTo72+0x12c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003f74:	2301      	movs	r3, #1
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	e001      	b.n	8003f7e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d166      	bne.n	8004052 <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003f84:	4a36      	ldr	r2, [pc, #216]	; (8004060 <SetSysClockTo72+0x130>)
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <SetSysClockTo72+0x130>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f043 0310 	orr.w	r3, r3, #16
 8003f8e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003f90:	4a33      	ldr	r2, [pc, #204]	; (8004060 <SetSysClockTo72+0x130>)
 8003f92:	4b33      	ldr	r3, [pc, #204]	; (8004060 <SetSysClockTo72+0x130>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003f9c:	4a30      	ldr	r2, [pc, #192]	; (8004060 <SetSysClockTo72+0x130>)
 8003f9e:	4b30      	ldr	r3, [pc, #192]	; (8004060 <SetSysClockTo72+0x130>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	; (800405c <SetSysClockTo72+0x12c>)
 8003faa:	4b2c      	ldr	r3, [pc, #176]	; (800405c <SetSysClockTo72+0x12c>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <SetSysClockTo72+0x12c>)
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	; (800405c <SetSysClockTo72+0x12c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003fb8:	4a28      	ldr	r2, [pc, #160]	; (800405c <SetSysClockTo72+0x12c>)
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <SetSysClockTo72+0x12c>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fc2:	6053      	str	r3, [r2, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 3) * 10 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 8003fc4:	4925      	ldr	r1, [pc, #148]	; (800405c <SetSysClockTo72+0x12c>)
 8003fc6:	4b25      	ldr	r3, [pc, #148]	; (800405c <SetSysClockTo72+0x12c>)
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <SetSysClockTo72+0x134>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	62cb      	str	r3, [r1, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV3 | RCC_CFGR2_PLL2MUL10 |
 8003fd0:	4a22      	ldr	r2, [pc, #136]	; (800405c <SetSysClockTo72+0x12c>)
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <SetSysClockTo72+0x12c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	f443 3384 	orr.w	r3, r3, #67584	; 0x10800
 8003fda:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);

    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <SetSysClockTo72+0x12c>)
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	; (800405c <SetSysClockTo72+0x12c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fea:	6013      	str	r3, [r2, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 8003fec:	bf00      	nop
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <SetSysClockTo72+0x12c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f9      	beq.n	8003fee <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <SetSysClockTo72+0x12c>)
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <SetSysClockTo72+0x12c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004004:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <SetSysClockTo72+0x12c>)
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <SetSysClockTo72+0x12c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004010:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <SetSysClockTo72+0x12c>)
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <SetSysClockTo72+0x12c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800401e:	bf00      	nop
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <SetSysClockTo72+0x12c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f9      	beq.n	8004020 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800402c:	4a0b      	ldr	r2, [pc, #44]	; (800405c <SetSysClockTo72+0x12c>)
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <SetSysClockTo72+0x12c>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <SetSysClockTo72+0x12c>)
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <SetSysClockTo72+0x12c>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004044:	bf00      	nop
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <SetSysClockTo72+0x12c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b08      	cmp	r3, #8
 8004050:	d1f9      	bne.n	8004046 <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40021000 	.word	0x40021000
 8004060:	40022000 	.word	0x40022000
 8004064:	fffef000 	.word	0xfffef000

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	2500      	movs	r5, #0
 800406c:	4e0c      	ldr	r6, [pc, #48]	; (80040a0 <__libc_init_array+0x38>)
 800406e:	4c0d      	ldr	r4, [pc, #52]	; (80040a4 <__libc_init_array+0x3c>)
 8004070:	1ba4      	subs	r4, r4, r6
 8004072:	10a4      	asrs	r4, r4, #2
 8004074:	42a5      	cmp	r5, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	f000 f82e 	bl	80040d8 <_init>
 800407c:	2500      	movs	r5, #0
 800407e:	4e0a      	ldr	r6, [pc, #40]	; (80040a8 <__libc_init_array+0x40>)
 8004080:	4c0a      	ldr	r4, [pc, #40]	; (80040ac <__libc_init_array+0x44>)
 8004082:	1ba4      	subs	r4, r4, r6
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	42a5      	cmp	r5, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004090:	4798      	blx	r3
 8004092:	3501      	adds	r5, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800409a:	4798      	blx	r3
 800409c:	3501      	adds	r5, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	0800426c 	.word	0x0800426c
 80040a4:	0800426c 	.word	0x0800426c
 80040a8:	0800426c 	.word	0x0800426c
 80040ac:	08004270 	.word	0x08004270

080040b0 <memcpy>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	1e43      	subs	r3, r0, #1
 80040b4:	440a      	add	r2, r1
 80040b6:	4291      	cmp	r1, r2
 80040b8:	d100      	bne.n	80040bc <memcpy+0xc>
 80040ba:	bd10      	pop	{r4, pc}
 80040bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040c4:	e7f7      	b.n	80040b6 <memcpy+0x6>

080040c6 <memset>:
 80040c6:	4603      	mov	r3, r0
 80040c8:	4402      	add	r2, r0
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d100      	bne.n	80040d0 <memset+0xa>
 80040ce:	4770      	bx	lr
 80040d0:	f803 1b01 	strb.w	r1, [r3], #1
 80040d4:	e7f9      	b.n	80040ca <memset+0x4>
	...

080040d8 <_init>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

080040e4 <_fini>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr
